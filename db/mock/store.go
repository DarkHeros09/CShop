// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cshop/v3/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -package mockdb -destination db/mock/store.go github.com/cshop/v3/db/sqlc Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/cshop/v3/db/sqlc"
	uuid "github.com/google/uuid"
	null "github.com/guregu/null/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AdminCreateBrandPromotion mocks base method.
func (m *MockStore) AdminCreateBrandPromotion(ctx context.Context, arg db.AdminCreateBrandPromotionParams) (db.BrandPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminCreateBrandPromotion", ctx, arg)
	ret0, _ := ret[0].(db.BrandPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminCreateBrandPromotion indicates an expected call of AdminCreateBrandPromotion.
func (mr *MockStoreMockRecorder) AdminCreateBrandPromotion(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCreateBrandPromotion", reflect.TypeOf((*MockStore)(nil).AdminCreateBrandPromotion), ctx, arg)
}

// AdminCreateCategoryPromotion mocks base method.
func (m *MockStore) AdminCreateCategoryPromotion(ctx context.Context, arg db.AdminCreateCategoryPromotionParams) (db.CategoryPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminCreateCategoryPromotion", ctx, arg)
	ret0, _ := ret[0].(db.CategoryPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminCreateCategoryPromotion indicates an expected call of AdminCreateCategoryPromotion.
func (mr *MockStoreMockRecorder) AdminCreateCategoryPromotion(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCreateCategoryPromotion", reflect.TypeOf((*MockStore)(nil).AdminCreateCategoryPromotion), ctx, arg)
}

// AdminCreateFeaturedProductItem mocks base method.
func (m *MockStore) AdminCreateFeaturedProductItem(ctx context.Context, arg db.AdminCreateFeaturedProductItemParams) (db.FeaturedProductItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminCreateFeaturedProductItem", ctx, arg)
	ret0, _ := ret[0].(db.FeaturedProductItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminCreateFeaturedProductItem indicates an expected call of AdminCreateFeaturedProductItem.
func (mr *MockStoreMockRecorder) AdminCreateFeaturedProductItem(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCreateFeaturedProductItem", reflect.TypeOf((*MockStore)(nil).AdminCreateFeaturedProductItem), ctx, arg)
}

// AdminCreatePaymentType mocks base method.
func (m *MockStore) AdminCreatePaymentType(ctx context.Context, arg db.AdminCreatePaymentTypeParams) (db.PaymentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminCreatePaymentType", ctx, arg)
	ret0, _ := ret[0].(db.PaymentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminCreatePaymentType indicates an expected call of AdminCreatePaymentType.
func (mr *MockStoreMockRecorder) AdminCreatePaymentType(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCreatePaymentType", reflect.TypeOf((*MockStore)(nil).AdminCreatePaymentType), ctx, arg)
}

// AdminCreateProduct mocks base method.
func (m *MockStore) AdminCreateProduct(ctx context.Context, arg db.AdminCreateProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminCreateProduct", ctx, arg)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminCreateProduct indicates an expected call of AdminCreateProduct.
func (mr *MockStoreMockRecorder) AdminCreateProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCreateProduct", reflect.TypeOf((*MockStore)(nil).AdminCreateProduct), ctx, arg)
}

// AdminCreateProductBrand mocks base method.
func (m *MockStore) AdminCreateProductBrand(ctx context.Context, arg db.AdminCreateProductBrandParams) (db.ProductBrand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminCreateProductBrand", ctx, arg)
	ret0, _ := ret[0].(db.ProductBrand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminCreateProductBrand indicates an expected call of AdminCreateProductBrand.
func (mr *MockStoreMockRecorder) AdminCreateProductBrand(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCreateProductBrand", reflect.TypeOf((*MockStore)(nil).AdminCreateProductBrand), ctx, arg)
}

// AdminCreateProductCategory mocks base method.
func (m *MockStore) AdminCreateProductCategory(ctx context.Context, arg db.AdminCreateProductCategoryParams) (db.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminCreateProductCategory", ctx, arg)
	ret0, _ := ret[0].(db.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminCreateProductCategory indicates an expected call of AdminCreateProductCategory.
func (mr *MockStoreMockRecorder) AdminCreateProductCategory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCreateProductCategory", reflect.TypeOf((*MockStore)(nil).AdminCreateProductCategory), ctx, arg)
}

// AdminCreateProductColor mocks base method.
func (m *MockStore) AdminCreateProductColor(ctx context.Context, arg db.AdminCreateProductColorParams) (db.ProductColor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminCreateProductColor", ctx, arg)
	ret0, _ := ret[0].(db.ProductColor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminCreateProductColor indicates an expected call of AdminCreateProductColor.
func (mr *MockStoreMockRecorder) AdminCreateProductColor(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCreateProductColor", reflect.TypeOf((*MockStore)(nil).AdminCreateProductColor), ctx, arg)
}

// AdminCreateProductImages mocks base method.
func (m *MockStore) AdminCreateProductImages(ctx context.Context, arg db.AdminCreateProductImagesParams) (db.ProductImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminCreateProductImages", ctx, arg)
	ret0, _ := ret[0].(db.ProductImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminCreateProductImages indicates an expected call of AdminCreateProductImages.
func (mr *MockStoreMockRecorder) AdminCreateProductImages(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCreateProductImages", reflect.TypeOf((*MockStore)(nil).AdminCreateProductImages), ctx, arg)
}

// AdminCreateProductItem mocks base method.
func (m *MockStore) AdminCreateProductItem(ctx context.Context, arg db.AdminCreateProductItemParams) (db.ProductItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminCreateProductItem", ctx, arg)
	ret0, _ := ret[0].(db.ProductItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminCreateProductItem indicates an expected call of AdminCreateProductItem.
func (mr *MockStoreMockRecorder) AdminCreateProductItem(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCreateProductItem", reflect.TypeOf((*MockStore)(nil).AdminCreateProductItem), ctx, arg)
}

// AdminCreateProductPromotion mocks base method.
func (m *MockStore) AdminCreateProductPromotion(ctx context.Context, arg db.AdminCreateProductPromotionParams) (db.ProductPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminCreateProductPromotion", ctx, arg)
	ret0, _ := ret[0].(db.ProductPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminCreateProductPromotion indicates an expected call of AdminCreateProductPromotion.
func (mr *MockStoreMockRecorder) AdminCreateProductPromotion(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCreateProductPromotion", reflect.TypeOf((*MockStore)(nil).AdminCreateProductPromotion), ctx, arg)
}

// AdminCreateProductSize mocks base method.
func (m *MockStore) AdminCreateProductSize(ctx context.Context, arg db.AdminCreateProductSizeParams) (db.ProductSize, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminCreateProductSize", ctx, arg)
	ret0, _ := ret[0].(db.ProductSize)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminCreateProductSize indicates an expected call of AdminCreateProductSize.
func (mr *MockStoreMockRecorder) AdminCreateProductSize(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCreateProductSize", reflect.TypeOf((*MockStore)(nil).AdminCreateProductSize), ctx, arg)
}

// AdminCreatePromotion mocks base method.
func (m *MockStore) AdminCreatePromotion(ctx context.Context, arg db.AdminCreatePromotionParams) (db.Promotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminCreatePromotion", ctx, arg)
	ret0, _ := ret[0].(db.Promotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminCreatePromotion indicates an expected call of AdminCreatePromotion.
func (mr *MockStoreMockRecorder) AdminCreatePromotion(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCreatePromotion", reflect.TypeOf((*MockStore)(nil).AdminCreatePromotion), ctx, arg)
}

// AdminCreateShippingMethod mocks base method.
func (m *MockStore) AdminCreateShippingMethod(ctx context.Context, arg db.AdminCreateShippingMethodParams) (db.ShippingMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminCreateShippingMethod", ctx, arg)
	ret0, _ := ret[0].(db.ShippingMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminCreateShippingMethod indicates an expected call of AdminCreateShippingMethod.
func (mr *MockStoreMockRecorder) AdminCreateShippingMethod(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCreateShippingMethod", reflect.TypeOf((*MockStore)(nil).AdminCreateShippingMethod), ctx, arg)
}

// AdminDeletePaymentType mocks base method.
func (m *MockStore) AdminDeletePaymentType(ctx context.Context, arg db.AdminDeletePaymentTypeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminDeletePaymentType", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminDeletePaymentType indicates an expected call of AdminDeletePaymentType.
func (mr *MockStoreMockRecorder) AdminDeletePaymentType(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDeletePaymentType", reflect.TypeOf((*MockStore)(nil).AdminDeletePaymentType), ctx, arg)
}

// AdminDeleteProduct mocks base method.
func (m *MockStore) AdminDeleteProduct(ctx context.Context, arg db.AdminDeleteProductParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminDeleteProduct", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminDeleteProduct indicates an expected call of AdminDeleteProduct.
func (mr *MockStoreMockRecorder) AdminDeleteProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDeleteProduct", reflect.TypeOf((*MockStore)(nil).AdminDeleteProduct), ctx, arg)
}

// AdminListBrandPromotions mocks base method.
func (m *MockStore) AdminListBrandPromotions(ctx context.Context, adminID int64) ([]db.AdminListBrandPromotionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminListBrandPromotions", ctx, adminID)
	ret0, _ := ret[0].([]db.AdminListBrandPromotionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminListBrandPromotions indicates an expected call of AdminListBrandPromotions.
func (mr *MockStoreMockRecorder) AdminListBrandPromotions(ctx, adminID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminListBrandPromotions", reflect.TypeOf((*MockStore)(nil).AdminListBrandPromotions), ctx, adminID)
}

// AdminListCategoryPromotions mocks base method.
func (m *MockStore) AdminListCategoryPromotions(ctx context.Context, adminID int64) ([]db.AdminListCategoryPromotionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminListCategoryPromotions", ctx, adminID)
	ret0, _ := ret[0].([]db.AdminListCategoryPromotionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminListCategoryPromotions indicates an expected call of AdminListCategoryPromotions.
func (mr *MockStoreMockRecorder) AdminListCategoryPromotions(ctx, adminID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminListCategoryPromotions", reflect.TypeOf((*MockStore)(nil).AdminListCategoryPromotions), ctx, adminID)
}

// AdminListFeaturedProductItems mocks base method.
func (m *MockStore) AdminListFeaturedProductItems(ctx context.Context, adminID int64) ([]db.AdminListFeaturedProductItemsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminListFeaturedProductItems", ctx, adminID)
	ret0, _ := ret[0].([]db.AdminListFeaturedProductItemsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminListFeaturedProductItems indicates an expected call of AdminListFeaturedProductItems.
func (mr *MockStoreMockRecorder) AdminListFeaturedProductItems(ctx, adminID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminListFeaturedProductItems", reflect.TypeOf((*MockStore)(nil).AdminListFeaturedProductItems), ctx, adminID)
}

// AdminListOrderStatuses mocks base method.
func (m *MockStore) AdminListOrderStatuses(ctx context.Context, adminID int64) ([]db.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminListOrderStatuses", ctx, adminID)
	ret0, _ := ret[0].([]db.OrderStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminListOrderStatuses indicates an expected call of AdminListOrderStatuses.
func (mr *MockStoreMockRecorder) AdminListOrderStatuses(ctx, adminID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminListOrderStatuses", reflect.TypeOf((*MockStore)(nil).AdminListOrderStatuses), ctx, adminID)
}

// AdminListPaymentTypes mocks base method.
func (m *MockStore) AdminListPaymentTypes(ctx context.Context, adminID int64) ([]db.PaymentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminListPaymentTypes", ctx, adminID)
	ret0, _ := ret[0].([]db.PaymentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminListPaymentTypes indicates an expected call of AdminListPaymentTypes.
func (mr *MockStoreMockRecorder) AdminListPaymentTypes(ctx, adminID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminListPaymentTypes", reflect.TypeOf((*MockStore)(nil).AdminListPaymentTypes), ctx, adminID)
}

// AdminListProductPromotions mocks base method.
func (m *MockStore) AdminListProductPromotions(ctx context.Context, adminID int64) ([]db.AdminListProductPromotionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminListProductPromotions", ctx, adminID)
	ret0, _ := ret[0].([]db.AdminListProductPromotionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminListProductPromotions indicates an expected call of AdminListProductPromotions.
func (mr *MockStoreMockRecorder) AdminListProductPromotions(ctx, adminID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminListProductPromotions", reflect.TypeOf((*MockStore)(nil).AdminListProductPromotions), ctx, adminID)
}

// AdminListShopOrdersNextPage mocks base method.
func (m *MockStore) AdminListShopOrdersNextPage(ctx context.Context, arg db.AdminListShopOrdersNextPageParams) ([]db.AdminListShopOrdersNextPageRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminListShopOrdersNextPage", ctx, arg)
	ret0, _ := ret[0].([]db.AdminListShopOrdersNextPageRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminListShopOrdersNextPage indicates an expected call of AdminListShopOrdersNextPage.
func (mr *MockStoreMockRecorder) AdminListShopOrdersNextPage(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminListShopOrdersNextPage", reflect.TypeOf((*MockStore)(nil).AdminListShopOrdersNextPage), ctx, arg)
}

// AdminListShopOrdersV2 mocks base method.
func (m *MockStore) AdminListShopOrdersV2(ctx context.Context, arg db.AdminListShopOrdersV2Params) ([]db.AdminListShopOrdersV2Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminListShopOrdersV2", ctx, arg)
	ret0, _ := ret[0].([]db.AdminListShopOrdersV2Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminListShopOrdersV2 indicates an expected call of AdminListShopOrdersV2.
func (mr *MockStoreMockRecorder) AdminListShopOrdersV2(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminListShopOrdersV2", reflect.TypeOf((*MockStore)(nil).AdminListShopOrdersV2), ctx, arg)
}

// AdminUpdateBrandPromotion mocks base method.
func (m *MockStore) AdminUpdateBrandPromotion(ctx context.Context, arg db.AdminUpdateBrandPromotionParams) (db.BrandPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminUpdateBrandPromotion", ctx, arg)
	ret0, _ := ret[0].(db.BrandPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminUpdateBrandPromotion indicates an expected call of AdminUpdateBrandPromotion.
func (mr *MockStoreMockRecorder) AdminUpdateBrandPromotion(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdateBrandPromotion", reflect.TypeOf((*MockStore)(nil).AdminUpdateBrandPromotion), ctx, arg)
}

// AdminUpdateCategoryPromotion mocks base method.
func (m *MockStore) AdminUpdateCategoryPromotion(ctx context.Context, arg db.AdminUpdateCategoryPromotionParams) (db.CategoryPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminUpdateCategoryPromotion", ctx, arg)
	ret0, _ := ret[0].(db.CategoryPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminUpdateCategoryPromotion indicates an expected call of AdminUpdateCategoryPromotion.
func (mr *MockStoreMockRecorder) AdminUpdateCategoryPromotion(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdateCategoryPromotion", reflect.TypeOf((*MockStore)(nil).AdminUpdateCategoryPromotion), ctx, arg)
}

// AdminUpdateFeaturedProductItem mocks base method.
func (m *MockStore) AdminUpdateFeaturedProductItem(ctx context.Context, arg db.AdminUpdateFeaturedProductItemParams) (db.FeaturedProductItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminUpdateFeaturedProductItem", ctx, arg)
	ret0, _ := ret[0].(db.FeaturedProductItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminUpdateFeaturedProductItem indicates an expected call of AdminUpdateFeaturedProductItem.
func (mr *MockStoreMockRecorder) AdminUpdateFeaturedProductItem(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdateFeaturedProductItem", reflect.TypeOf((*MockStore)(nil).AdminUpdateFeaturedProductItem), ctx, arg)
}

// AdminUpdatePaymentType mocks base method.
func (m *MockStore) AdminUpdatePaymentType(ctx context.Context, arg db.AdminUpdatePaymentTypeParams) (db.PaymentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminUpdatePaymentType", ctx, arg)
	ret0, _ := ret[0].(db.PaymentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminUpdatePaymentType indicates an expected call of AdminUpdatePaymentType.
func (mr *MockStoreMockRecorder) AdminUpdatePaymentType(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdatePaymentType", reflect.TypeOf((*MockStore)(nil).AdminUpdatePaymentType), ctx, arg)
}

// AdminUpdateProduct mocks base method.
func (m *MockStore) AdminUpdateProduct(ctx context.Context, arg db.AdminUpdateProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminUpdateProduct", ctx, arg)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminUpdateProduct indicates an expected call of AdminUpdateProduct.
func (mr *MockStoreMockRecorder) AdminUpdateProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdateProduct", reflect.TypeOf((*MockStore)(nil).AdminUpdateProduct), ctx, arg)
}

// AdminUpdateProductColor mocks base method.
func (m *MockStore) AdminUpdateProductColor(ctx context.Context, arg db.AdminUpdateProductColorParams) (db.ProductColor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminUpdateProductColor", ctx, arg)
	ret0, _ := ret[0].(db.ProductColor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminUpdateProductColor indicates an expected call of AdminUpdateProductColor.
func (mr *MockStoreMockRecorder) AdminUpdateProductColor(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdateProductColor", reflect.TypeOf((*MockStore)(nil).AdminUpdateProductColor), ctx, arg)
}

// AdminUpdateProductImage mocks base method.
func (m *MockStore) AdminUpdateProductImage(ctx context.Context, arg db.AdminUpdateProductImageParams) (db.ProductImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminUpdateProductImage", ctx, arg)
	ret0, _ := ret[0].(db.ProductImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminUpdateProductImage indicates an expected call of AdminUpdateProductImage.
func (mr *MockStoreMockRecorder) AdminUpdateProductImage(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdateProductImage", reflect.TypeOf((*MockStore)(nil).AdminUpdateProductImage), ctx, arg)
}

// AdminUpdateProductItem mocks base method.
func (m *MockStore) AdminUpdateProductItem(ctx context.Context, arg db.AdminUpdateProductItemParams) (db.ProductItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminUpdateProductItem", ctx, arg)
	ret0, _ := ret[0].(db.ProductItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminUpdateProductItem indicates an expected call of AdminUpdateProductItem.
func (mr *MockStoreMockRecorder) AdminUpdateProductItem(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdateProductItem", reflect.TypeOf((*MockStore)(nil).AdminUpdateProductItem), ctx, arg)
}

// AdminUpdateProductPromotion mocks base method.
func (m *MockStore) AdminUpdateProductPromotion(ctx context.Context, arg db.AdminUpdateProductPromotionParams) (db.ProductPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminUpdateProductPromotion", ctx, arg)
	ret0, _ := ret[0].(db.ProductPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminUpdateProductPromotion indicates an expected call of AdminUpdateProductPromotion.
func (mr *MockStoreMockRecorder) AdminUpdateProductPromotion(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdateProductPromotion", reflect.TypeOf((*MockStore)(nil).AdminUpdateProductPromotion), ctx, arg)
}

// AdminUpdateProductSize mocks base method.
func (m *MockStore) AdminUpdateProductSize(ctx context.Context, arg db.AdminUpdateProductSizeParams) (db.ProductSize, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminUpdateProductSize", ctx, arg)
	ret0, _ := ret[0].(db.ProductSize)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminUpdateProductSize indicates an expected call of AdminUpdateProductSize.
func (mr *MockStoreMockRecorder) AdminUpdateProductSize(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdateProductSize", reflect.TypeOf((*MockStore)(nil).AdminUpdateProductSize), ctx, arg)
}

// AdminUpdatePromotion mocks base method.
func (m *MockStore) AdminUpdatePromotion(ctx context.Context, arg db.AdminUpdatePromotionParams) (db.Promotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminUpdatePromotion", ctx, arg)
	ret0, _ := ret[0].(db.Promotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminUpdatePromotion indicates an expected call of AdminUpdatePromotion.
func (mr *MockStoreMockRecorder) AdminUpdatePromotion(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdatePromotion", reflect.TypeOf((*MockStore)(nil).AdminUpdatePromotion), ctx, arg)
}

// AdminUpdateShippingMethod mocks base method.
func (m *MockStore) AdminUpdateShippingMethod(ctx context.Context, arg db.AdminUpdateShippingMethodParams) (db.ShippingMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminUpdateShippingMethod", ctx, arg)
	ret0, _ := ret[0].(db.ShippingMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminUpdateShippingMethod indicates an expected call of AdminUpdateShippingMethod.
func (mr *MockStoreMockRecorder) AdminUpdateShippingMethod(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdateShippingMethod", reflect.TypeOf((*MockStore)(nil).AdminUpdateShippingMethod), ctx, arg)
}

// CheckUserAddressDefaultAddress mocks base method.
func (m *MockStore) CheckUserAddressDefaultAddress(ctx context.Context, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserAddressDefaultAddress", ctx, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserAddressDefaultAddress indicates an expected call of CheckUserAddressDefaultAddress.
func (mr *MockStoreMockRecorder) CheckUserAddressDefaultAddress(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserAddressDefaultAddress", reflect.TypeOf((*MockStore)(nil).CheckUserAddressDefaultAddress), ctx, userID)
}

// CreateAddress mocks base method.
func (m *MockStore) CreateAddress(ctx context.Context, arg db.CreateAddressParams) (db.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAddress", ctx, arg)
	ret0, _ := ret[0].(db.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAddress indicates an expected call of CreateAddress.
func (mr *MockStoreMockRecorder) CreateAddress(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddress", reflect.TypeOf((*MockStore)(nil).CreateAddress), ctx, arg)
}

// CreateAdmin mocks base method.
func (m *MockStore) CreateAdmin(ctx context.Context, arg db.CreateAdminParams) (db.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin", ctx, arg)
	ret0, _ := ret[0].(db.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockStoreMockRecorder) CreateAdmin(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockStore)(nil).CreateAdmin), ctx, arg)
}

// CreateAdminSession mocks base method.
func (m *MockStore) CreateAdminSession(ctx context.Context, arg db.CreateAdminSessionParams) (db.AdminSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdminSession", ctx, arg)
	ret0, _ := ret[0].(db.AdminSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdminSession indicates an expected call of CreateAdminSession.
func (mr *MockStoreMockRecorder) CreateAdminSession(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdminSession", reflect.TypeOf((*MockStore)(nil).CreateAdminSession), ctx, arg)
}

// CreateAdminType mocks base method.
func (m *MockStore) CreateAdminType(ctx context.Context, adminType string) (db.AdminType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdminType", ctx, adminType)
	ret0, _ := ret[0].(db.AdminType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdminType indicates an expected call of CreateAdminType.
func (mr *MockStoreMockRecorder) CreateAdminType(ctx, adminType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdminType", reflect.TypeOf((*MockStore)(nil).CreateAdminType), ctx, adminType)
}

// CreateAppPolicy mocks base method.
func (m *MockStore) CreateAppPolicy(ctx context.Context, arg db.CreateAppPolicyParams) (db.AppPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppPolicy", ctx, arg)
	ret0, _ := ret[0].(db.AppPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppPolicy indicates an expected call of CreateAppPolicy.
func (mr *MockStoreMockRecorder) CreateAppPolicy(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppPolicy", reflect.TypeOf((*MockStore)(nil).CreateAppPolicy), ctx, arg)
}

// CreateBrandPromotion mocks base method.
func (m *MockStore) CreateBrandPromotion(ctx context.Context, arg db.CreateBrandPromotionParams) (db.BrandPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBrandPromotion", ctx, arg)
	ret0, _ := ret[0].(db.BrandPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBrandPromotion indicates an expected call of CreateBrandPromotion.
func (mr *MockStoreMockRecorder) CreateBrandPromotion(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBrandPromotion", reflect.TypeOf((*MockStore)(nil).CreateBrandPromotion), ctx, arg)
}

// CreateCategoryPromotion mocks base method.
func (m *MockStore) CreateCategoryPromotion(ctx context.Context, arg db.CreateCategoryPromotionParams) (db.CategoryPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategoryPromotion", ctx, arg)
	ret0, _ := ret[0].(db.CategoryPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategoryPromotion indicates an expected call of CreateCategoryPromotion.
func (mr *MockStoreMockRecorder) CreateCategoryPromotion(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategoryPromotion", reflect.TypeOf((*MockStore)(nil).CreateCategoryPromotion), ctx, arg)
}

// CreateHomePageTextBanner mocks base method.
func (m *MockStore) CreateHomePageTextBanner(ctx context.Context, arg db.CreateHomePageTextBannerParams) (db.HomePageTextBanner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHomePageTextBanner", ctx, arg)
	ret0, _ := ret[0].(db.HomePageTextBanner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHomePageTextBanner indicates an expected call of CreateHomePageTextBanner.
func (mr *MockStoreMockRecorder) CreateHomePageTextBanner(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHomePageTextBanner", reflect.TypeOf((*MockStore)(nil).CreateHomePageTextBanner), ctx, arg)
}

// CreateNotification mocks base method.
func (m *MockStore) CreateNotification(ctx context.Context, arg db.CreateNotificationParams) (db.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotification", ctx, arg)
	ret0, _ := ret[0].(db.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotification indicates an expected call of CreateNotification.
func (mr *MockStoreMockRecorder) CreateNotification(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotification", reflect.TypeOf((*MockStore)(nil).CreateNotification), ctx, arg)
}

// CreateOrderStatus mocks base method.
func (m *MockStore) CreateOrderStatus(ctx context.Context, status string) (db.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderStatus", ctx, status)
	ret0, _ := ret[0].(db.OrderStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderStatus indicates an expected call of CreateOrderStatus.
func (mr *MockStoreMockRecorder) CreateOrderStatus(ctx, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderStatus", reflect.TypeOf((*MockStore)(nil).CreateOrderStatus), ctx, status)
}

// CreatePaymentMethod mocks base method.
func (m *MockStore) CreatePaymentMethod(ctx context.Context, arg db.CreatePaymentMethodParams) (db.PaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentMethod", ctx, arg)
	ret0, _ := ret[0].(db.PaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentMethod indicates an expected call of CreatePaymentMethod.
func (mr *MockStoreMockRecorder) CreatePaymentMethod(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentMethod", reflect.TypeOf((*MockStore)(nil).CreatePaymentMethod), ctx, arg)
}

// CreatePaymentType mocks base method.
func (m *MockStore) CreatePaymentType(ctx context.Context, value string) (db.PaymentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentType", ctx, value)
	ret0, _ := ret[0].(db.PaymentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentType indicates an expected call of CreatePaymentType.
func (mr *MockStoreMockRecorder) CreatePaymentType(ctx, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentType", reflect.TypeOf((*MockStore)(nil).CreatePaymentType), ctx, value)
}

// CreateProduct mocks base method.
func (m *MockStore) CreateProduct(ctx context.Context, arg db.CreateProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, arg)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockStoreMockRecorder) CreateProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockStore)(nil).CreateProduct), ctx, arg)
}

// CreateProductBrand mocks base method.
func (m *MockStore) CreateProductBrand(ctx context.Context, arg db.CreateProductBrandParams) (db.ProductBrand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductBrand", ctx, arg)
	ret0, _ := ret[0].(db.ProductBrand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductBrand indicates an expected call of CreateProductBrand.
func (mr *MockStoreMockRecorder) CreateProductBrand(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductBrand", reflect.TypeOf((*MockStore)(nil).CreateProductBrand), ctx, arg)
}

// CreateProductCategory mocks base method.
func (m *MockStore) CreateProductCategory(ctx context.Context, arg db.CreateProductCategoryParams) (db.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductCategory", ctx, arg)
	ret0, _ := ret[0].(db.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductCategory indicates an expected call of CreateProductCategory.
func (mr *MockStoreMockRecorder) CreateProductCategory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductCategory", reflect.TypeOf((*MockStore)(nil).CreateProductCategory), ctx, arg)
}

// CreateProductColor mocks base method.
func (m *MockStore) CreateProductColor(ctx context.Context, colorValue string) (db.ProductColor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductColor", ctx, colorValue)
	ret0, _ := ret[0].(db.ProductColor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductColor indicates an expected call of CreateProductColor.
func (mr *MockStoreMockRecorder) CreateProductColor(ctx, colorValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductColor", reflect.TypeOf((*MockStore)(nil).CreateProductColor), ctx, colorValue)
}

// CreateProductConfiguration mocks base method.
func (m *MockStore) CreateProductConfiguration(ctx context.Context, arg db.CreateProductConfigurationParams) (db.ProductConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductConfiguration", ctx, arg)
	ret0, _ := ret[0].(db.ProductConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductConfiguration indicates an expected call of CreateProductConfiguration.
func (mr *MockStoreMockRecorder) CreateProductConfiguration(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductConfiguration", reflect.TypeOf((*MockStore)(nil).CreateProductConfiguration), ctx, arg)
}

// CreateProductImage mocks base method.
func (m *MockStore) CreateProductImage(ctx context.Context, arg db.CreateProductImageParams) (db.ProductImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductImage", ctx, arg)
	ret0, _ := ret[0].(db.ProductImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductImage indicates an expected call of CreateProductImage.
func (mr *MockStoreMockRecorder) CreateProductImage(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductImage", reflect.TypeOf((*MockStore)(nil).CreateProductImage), ctx, arg)
}

// CreateProductItem mocks base method.
func (m *MockStore) CreateProductItem(ctx context.Context, arg db.CreateProductItemParams) (db.ProductItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductItem", ctx, arg)
	ret0, _ := ret[0].(db.ProductItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductItem indicates an expected call of CreateProductItem.
func (mr *MockStoreMockRecorder) CreateProductItem(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductItem", reflect.TypeOf((*MockStore)(nil).CreateProductItem), ctx, arg)
}

// CreateProductPromotion mocks base method.
func (m *MockStore) CreateProductPromotion(ctx context.Context, arg db.CreateProductPromotionParams) (db.ProductPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductPromotion", ctx, arg)
	ret0, _ := ret[0].(db.ProductPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductPromotion indicates an expected call of CreateProductPromotion.
func (mr *MockStoreMockRecorder) CreateProductPromotion(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductPromotion", reflect.TypeOf((*MockStore)(nil).CreateProductPromotion), ctx, arg)
}

// CreateProductSize mocks base method.
func (m *MockStore) CreateProductSize(ctx context.Context, arg db.CreateProductSizeParams) (db.ProductSize, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductSize", ctx, arg)
	ret0, _ := ret[0].(db.ProductSize)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductSize indicates an expected call of CreateProductSize.
func (mr *MockStoreMockRecorder) CreateProductSize(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductSize", reflect.TypeOf((*MockStore)(nil).CreateProductSize), ctx, arg)
}

// CreatePromotion mocks base method.
func (m *MockStore) CreatePromotion(ctx context.Context, arg db.CreatePromotionParams) (db.Promotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePromotion", ctx, arg)
	ret0, _ := ret[0].(db.Promotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePromotion indicates an expected call of CreatePromotion.
func (mr *MockStoreMockRecorder) CreatePromotion(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePromotion", reflect.TypeOf((*MockStore)(nil).CreatePromotion), ctx, arg)
}

// CreateResetPassword mocks base method.
func (m *MockStore) CreateResetPassword(ctx context.Context, arg db.CreateResetPasswordParams) (db.ResetPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResetPassword", ctx, arg)
	ret0, _ := ret[0].(db.ResetPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResetPassword indicates an expected call of CreateResetPassword.
func (mr *MockStoreMockRecorder) CreateResetPassword(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResetPassword", reflect.TypeOf((*MockStore)(nil).CreateResetPassword), ctx, arg)
}

// CreateShippingMethod mocks base method.
func (m *MockStore) CreateShippingMethod(ctx context.Context, arg db.CreateShippingMethodParams) (db.ShippingMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShippingMethod", ctx, arg)
	ret0, _ := ret[0].(db.ShippingMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShippingMethod indicates an expected call of CreateShippingMethod.
func (mr *MockStoreMockRecorder) CreateShippingMethod(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShippingMethod", reflect.TypeOf((*MockStore)(nil).CreateShippingMethod), ctx, arg)
}

// CreateShopOrder mocks base method.
func (m *MockStore) CreateShopOrder(ctx context.Context, arg db.CreateShopOrderParams) (db.ShopOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShopOrder", ctx, arg)
	ret0, _ := ret[0].(db.ShopOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShopOrder indicates an expected call of CreateShopOrder.
func (mr *MockStoreMockRecorder) CreateShopOrder(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShopOrder", reflect.TypeOf((*MockStore)(nil).CreateShopOrder), ctx, arg)
}

// CreateShopOrderItem mocks base method.
func (m *MockStore) CreateShopOrderItem(ctx context.Context, arg db.CreateShopOrderItemParams) (db.ShopOrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShopOrderItem", ctx, arg)
	ret0, _ := ret[0].(db.ShopOrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShopOrderItem indicates an expected call of CreateShopOrderItem.
func (mr *MockStoreMockRecorder) CreateShopOrderItem(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShopOrderItem", reflect.TypeOf((*MockStore)(nil).CreateShopOrderItem), ctx, arg)
}

// CreateShoppingCart mocks base method.
func (m *MockStore) CreateShoppingCart(ctx context.Context, userID int64) (db.ShoppingCart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShoppingCart", ctx, userID)
	ret0, _ := ret[0].(db.ShoppingCart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShoppingCart indicates an expected call of CreateShoppingCart.
func (mr *MockStoreMockRecorder) CreateShoppingCart(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShoppingCart", reflect.TypeOf((*MockStore)(nil).CreateShoppingCart), ctx, userID)
}

// CreateShoppingCartItem mocks base method.
func (m *MockStore) CreateShoppingCartItem(ctx context.Context, arg db.CreateShoppingCartItemParams) (db.ShoppingCartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShoppingCartItem", ctx, arg)
	ret0, _ := ret[0].(db.ShoppingCartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShoppingCartItem indicates an expected call of CreateShoppingCartItem.
func (mr *MockStoreMockRecorder) CreateShoppingCartItem(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShoppingCartItem", reflect.TypeOf((*MockStore)(nil).CreateShoppingCartItem), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(ctx context.Context, arg db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), ctx, arg)
}

// CreateUserAddress mocks base method.
func (m *MockStore) CreateUserAddress(ctx context.Context, arg db.CreateUserAddressParams) (db.UserAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserAddress", ctx, arg)
	ret0, _ := ret[0].(db.UserAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserAddress indicates an expected call of CreateUserAddress.
func (mr *MockStoreMockRecorder) CreateUserAddress(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserAddress", reflect.TypeOf((*MockStore)(nil).CreateUserAddress), ctx, arg)
}

// CreateUserAddressWithAddress mocks base method.
func (m *MockStore) CreateUserAddressWithAddress(ctx context.Context, arg db.CreateUserAddressWithAddressParams) (db.CreateUserAddressWithAddressRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserAddressWithAddress", ctx, arg)
	ret0, _ := ret[0].(db.CreateUserAddressWithAddressRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserAddressWithAddress indicates an expected call of CreateUserAddressWithAddress.
func (mr *MockStoreMockRecorder) CreateUserAddressWithAddress(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserAddressWithAddress", reflect.TypeOf((*MockStore)(nil).CreateUserAddressWithAddress), ctx, arg)
}

// CreateUserReview mocks base method.
func (m *MockStore) CreateUserReview(ctx context.Context, arg db.CreateUserReviewParams) (db.UserReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserReview", ctx, arg)
	ret0, _ := ret[0].(db.UserReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserReview indicates an expected call of CreateUserReview.
func (mr *MockStoreMockRecorder) CreateUserReview(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserReview", reflect.TypeOf((*MockStore)(nil).CreateUserReview), ctx, arg)
}

// CreateUserSession mocks base method.
func (m *MockStore) CreateUserSession(ctx context.Context, arg db.CreateUserSessionParams) (db.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserSession", ctx, arg)
	ret0, _ := ret[0].(db.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserSession indicates an expected call of CreateUserSession.
func (mr *MockStoreMockRecorder) CreateUserSession(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserSession", reflect.TypeOf((*MockStore)(nil).CreateUserSession), ctx, arg)
}

// CreateUserWithCartAndWishList mocks base method.
func (m *MockStore) CreateUserWithCartAndWishList(ctx context.Context, arg db.CreateUserWithCartAndWishListParams) (db.CreateUserWithCartAndWishListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserWithCartAndWishList", ctx, arg)
	ret0, _ := ret[0].(db.CreateUserWithCartAndWishListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserWithCartAndWishList indicates an expected call of CreateUserWithCartAndWishList.
func (mr *MockStoreMockRecorder) CreateUserWithCartAndWishList(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWithCartAndWishList", reflect.TypeOf((*MockStore)(nil).CreateUserWithCartAndWishList), ctx, arg)
}

// CreateVariation mocks base method.
func (m *MockStore) CreateVariation(ctx context.Context, arg db.CreateVariationParams) (db.Variation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVariation", ctx, arg)
	ret0, _ := ret[0].(db.Variation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVariation indicates an expected call of CreateVariation.
func (mr *MockStoreMockRecorder) CreateVariation(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVariation", reflect.TypeOf((*MockStore)(nil).CreateVariation), ctx, arg)
}

// CreateVariationOption mocks base method.
func (m *MockStore) CreateVariationOption(ctx context.Context, arg db.CreateVariationOptionParams) (db.VariationOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVariationOption", ctx, arg)
	ret0, _ := ret[0].(db.VariationOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVariationOption indicates an expected call of CreateVariationOption.
func (mr *MockStoreMockRecorder) CreateVariationOption(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVariationOption", reflect.TypeOf((*MockStore)(nil).CreateVariationOption), ctx, arg)
}

// CreateVerifyEmail mocks base method.
func (m *MockStore) CreateVerifyEmail(ctx context.Context, arg db.CreateVerifyEmailParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerifyEmail", ctx, arg)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerifyEmail indicates an expected call of CreateVerifyEmail.
func (mr *MockStoreMockRecorder) CreateVerifyEmail(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerifyEmail", reflect.TypeOf((*MockStore)(nil).CreateVerifyEmail), ctx, arg)
}

// CreateWishList mocks base method.
func (m *MockStore) CreateWishList(ctx context.Context, userID int64) (db.WishList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWishList", ctx, userID)
	ret0, _ := ret[0].(db.WishList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWishList indicates an expected call of CreateWishList.
func (mr *MockStoreMockRecorder) CreateWishList(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWishList", reflect.TypeOf((*MockStore)(nil).CreateWishList), ctx, userID)
}

// CreateWishListItem mocks base method.
func (m *MockStore) CreateWishListItem(ctx context.Context, arg db.CreateWishListItemParams) (db.WishListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWishListItem", ctx, arg)
	ret0, _ := ret[0].(db.WishListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWishListItem indicates an expected call of CreateWishListItem.
func (mr *MockStoreMockRecorder) CreateWishListItem(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWishListItem", reflect.TypeOf((*MockStore)(nil).CreateWishListItem), ctx, arg)
}

// DeleteAddress mocks base method.
func (m *MockStore) DeleteAddress(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddress", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddress indicates an expected call of DeleteAddress.
func (mr *MockStoreMockRecorder) DeleteAddress(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddress", reflect.TypeOf((*MockStore)(nil).DeleteAddress), ctx, id)
}

// DeleteAdmin mocks base method.
func (m *MockStore) DeleteAdmin(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdmin", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdmin indicates an expected call of DeleteAdmin.
func (mr *MockStoreMockRecorder) DeleteAdmin(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdmin", reflect.TypeOf((*MockStore)(nil).DeleteAdmin), ctx, id)
}

// DeleteAdminTypeByID mocks base method.
func (m *MockStore) DeleteAdminTypeByID(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdminTypeByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdminTypeByID indicates an expected call of DeleteAdminTypeByID.
func (mr *MockStoreMockRecorder) DeleteAdminTypeByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdminTypeByID", reflect.TypeOf((*MockStore)(nil).DeleteAdminTypeByID), ctx, id)
}

// DeleteAdminTypeByType mocks base method.
func (m *MockStore) DeleteAdminTypeByType(ctx context.Context, adminType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdminTypeByType", ctx, adminType)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdminTypeByType indicates an expected call of DeleteAdminTypeByType.
func (mr *MockStoreMockRecorder) DeleteAdminTypeByType(ctx, adminType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdminTypeByType", reflect.TypeOf((*MockStore)(nil).DeleteAdminTypeByType), ctx, adminType)
}

// DeleteAppPolicy mocks base method.
func (m *MockStore) DeleteAppPolicy(ctx context.Context, arg db.DeleteAppPolicyParams) (db.AppPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppPolicy", ctx, arg)
	ret0, _ := ret[0].(db.AppPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppPolicy indicates an expected call of DeleteAppPolicy.
func (mr *MockStoreMockRecorder) DeleteAppPolicy(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppPolicy", reflect.TypeOf((*MockStore)(nil).DeleteAppPolicy), ctx, arg)
}

// DeleteBrandPromotion mocks base method.
func (m *MockStore) DeleteBrandPromotion(ctx context.Context, arg db.DeleteBrandPromotionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBrandPromotion", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBrandPromotion indicates an expected call of DeleteBrandPromotion.
func (mr *MockStoreMockRecorder) DeleteBrandPromotion(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBrandPromotion", reflect.TypeOf((*MockStore)(nil).DeleteBrandPromotion), ctx, arg)
}

// DeleteCategoryPromotion mocks base method.
func (m *MockStore) DeleteCategoryPromotion(ctx context.Context, arg db.DeleteCategoryPromotionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategoryPromotion", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategoryPromotion indicates an expected call of DeleteCategoryPromotion.
func (mr *MockStoreMockRecorder) DeleteCategoryPromotion(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategoryPromotion", reflect.TypeOf((*MockStore)(nil).DeleteCategoryPromotion), ctx, arg)
}

// DeleteFeaturedProductItem mocks base method.
func (m *MockStore) DeleteFeaturedProductItem(ctx context.Context, arg db.DeleteFeaturedProductItemParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeaturedProductItem", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFeaturedProductItem indicates an expected call of DeleteFeaturedProductItem.
func (mr *MockStoreMockRecorder) DeleteFeaturedProductItem(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeaturedProductItem", reflect.TypeOf((*MockStore)(nil).DeleteFeaturedProductItem), ctx, arg)
}

// DeleteHomePageTextBanner mocks base method.
func (m *MockStore) DeleteHomePageTextBanner(ctx context.Context, arg db.DeleteHomePageTextBannerParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHomePageTextBanner", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHomePageTextBanner indicates an expected call of DeleteHomePageTextBanner.
func (mr *MockStoreMockRecorder) DeleteHomePageTextBanner(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHomePageTextBanner", reflect.TypeOf((*MockStore)(nil).DeleteHomePageTextBanner), ctx, arg)
}

// DeleteNotification mocks base method.
func (m *MockStore) DeleteNotification(ctx context.Context, arg db.DeleteNotificationParams) (db.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotification", ctx, arg)
	ret0, _ := ret[0].(db.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNotification indicates an expected call of DeleteNotification.
func (mr *MockStoreMockRecorder) DeleteNotification(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotification", reflect.TypeOf((*MockStore)(nil).DeleteNotification), ctx, arg)
}

// DeleteNotificationAllByUser mocks base method.
func (m *MockStore) DeleteNotificationAllByUser(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotificationAllByUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNotificationAllByUser indicates an expected call of DeleteNotificationAllByUser.
func (mr *MockStoreMockRecorder) DeleteNotificationAllByUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotificationAllByUser", reflect.TypeOf((*MockStore)(nil).DeleteNotificationAllByUser), ctx, userID)
}

// DeleteOrderStatus mocks base method.
func (m *MockStore) DeleteOrderStatus(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderStatus", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderStatus indicates an expected call of DeleteOrderStatus.
func (mr *MockStoreMockRecorder) DeleteOrderStatus(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderStatus", reflect.TypeOf((*MockStore)(nil).DeleteOrderStatus), ctx, id)
}

// DeletePaymentMethod mocks base method.
func (m *MockStore) DeletePaymentMethod(ctx context.Context, arg db.DeletePaymentMethodParams) (db.PaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePaymentMethod", ctx, arg)
	ret0, _ := ret[0].(db.PaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePaymentMethod indicates an expected call of DeletePaymentMethod.
func (mr *MockStoreMockRecorder) DeletePaymentMethod(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePaymentMethod", reflect.TypeOf((*MockStore)(nil).DeletePaymentMethod), ctx, arg)
}

// DeletePaymentType mocks base method.
func (m *MockStore) DeletePaymentType(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePaymentType", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePaymentType indicates an expected call of DeletePaymentType.
func (mr *MockStoreMockRecorder) DeletePaymentType(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePaymentType", reflect.TypeOf((*MockStore)(nil).DeletePaymentType), ctx, id)
}

// DeleteProduct mocks base method.
func (m *MockStore) DeleteProduct(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockStoreMockRecorder) DeleteProduct(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockStore)(nil).DeleteProduct), ctx, id)
}

// DeleteProductBrand mocks base method.
func (m *MockStore) DeleteProductBrand(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductBrand", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductBrand indicates an expected call of DeleteProductBrand.
func (mr *MockStoreMockRecorder) DeleteProductBrand(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductBrand", reflect.TypeOf((*MockStore)(nil).DeleteProductBrand), ctx, id)
}

// DeleteProductCategory mocks base method.
func (m *MockStore) DeleteProductCategory(ctx context.Context, arg db.DeleteProductCategoryParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductCategory", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductCategory indicates an expected call of DeleteProductCategory.
func (mr *MockStoreMockRecorder) DeleteProductCategory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductCategory", reflect.TypeOf((*MockStore)(nil).DeleteProductCategory), ctx, arg)
}

// DeleteProductColor mocks base method.
func (m *MockStore) DeleteProductColor(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductColor", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductColor indicates an expected call of DeleteProductColor.
func (mr *MockStoreMockRecorder) DeleteProductColor(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductColor", reflect.TypeOf((*MockStore)(nil).DeleteProductColor), ctx, id)
}

// DeleteProductConfiguration mocks base method.
func (m *MockStore) DeleteProductConfiguration(ctx context.Context, arg db.DeleteProductConfigurationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductConfiguration", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductConfiguration indicates an expected call of DeleteProductConfiguration.
func (mr *MockStoreMockRecorder) DeleteProductConfiguration(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductConfiguration", reflect.TypeOf((*MockStore)(nil).DeleteProductConfiguration), ctx, arg)
}

// DeleteProductImage mocks base method.
func (m *MockStore) DeleteProductImage(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductImage", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductImage indicates an expected call of DeleteProductImage.
func (mr *MockStoreMockRecorder) DeleteProductImage(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductImage", reflect.TypeOf((*MockStore)(nil).DeleteProductImage), ctx, id)
}

// DeleteProductItem mocks base method.
func (m *MockStore) DeleteProductItem(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductItem", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductItem indicates an expected call of DeleteProductItem.
func (mr *MockStoreMockRecorder) DeleteProductItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductItem", reflect.TypeOf((*MockStore)(nil).DeleteProductItem), ctx, id)
}

// DeleteProductPromotion mocks base method.
func (m *MockStore) DeleteProductPromotion(ctx context.Context, arg db.DeleteProductPromotionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductPromotion", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductPromotion indicates an expected call of DeleteProductPromotion.
func (mr *MockStoreMockRecorder) DeleteProductPromotion(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductPromotion", reflect.TypeOf((*MockStore)(nil).DeleteProductPromotion), ctx, arg)
}

// DeleteProductSize mocks base method.
func (m *MockStore) DeleteProductSize(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductSize", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductSize indicates an expected call of DeleteProductSize.
func (mr *MockStoreMockRecorder) DeleteProductSize(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductSize", reflect.TypeOf((*MockStore)(nil).DeleteProductSize), ctx, id)
}

// DeleteProductSizeByProductItemID mocks base method.
func (m *MockStore) DeleteProductSizeByProductItemID(ctx context.Context, productItemID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductSizeByProductItemID", ctx, productItemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductSizeByProductItemID indicates an expected call of DeleteProductSizeByProductItemID.
func (mr *MockStoreMockRecorder) DeleteProductSizeByProductItemID(ctx, productItemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductSizeByProductItemID", reflect.TypeOf((*MockStore)(nil).DeleteProductSizeByProductItemID), ctx, productItemID)
}

// DeletePromotion mocks base method.
func (m *MockStore) DeletePromotion(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePromotion", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePromotion indicates an expected call of DeletePromotion.
func (mr *MockStoreMockRecorder) DeletePromotion(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePromotion", reflect.TypeOf((*MockStore)(nil).DeletePromotion), ctx, id)
}

// DeleteShippingMethod mocks base method.
func (m *MockStore) DeleteShippingMethod(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShippingMethod", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShippingMethod indicates an expected call of DeleteShippingMethod.
func (mr *MockStoreMockRecorder) DeleteShippingMethod(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShippingMethod", reflect.TypeOf((*MockStore)(nil).DeleteShippingMethod), ctx, id)
}

// DeleteShopOrder mocks base method.
func (m *MockStore) DeleteShopOrder(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShopOrder", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShopOrder indicates an expected call of DeleteShopOrder.
func (mr *MockStoreMockRecorder) DeleteShopOrder(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShopOrder", reflect.TypeOf((*MockStore)(nil).DeleteShopOrder), ctx, id)
}

// DeleteShopOrderItem mocks base method.
func (m *MockStore) DeleteShopOrderItem(ctx context.Context, arg db.DeleteShopOrderItemParams) (db.ShopOrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShopOrderItem", ctx, arg)
	ret0, _ := ret[0].(db.ShopOrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteShopOrderItem indicates an expected call of DeleteShopOrderItem.
func (mr *MockStoreMockRecorder) DeleteShopOrderItem(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShopOrderItem", reflect.TypeOf((*MockStore)(nil).DeleteShopOrderItem), ctx, arg)
}

// DeleteShopOrderItemTx mocks base method.
func (m *MockStore) DeleteShopOrderItemTx(ctx context.Context, arg db.DeleteShopOrderItemTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShopOrderItemTx", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShopOrderItemTx indicates an expected call of DeleteShopOrderItemTx.
func (mr *MockStoreMockRecorder) DeleteShopOrderItemTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShopOrderItemTx", reflect.TypeOf((*MockStore)(nil).DeleteShopOrderItemTx), ctx, arg)
}

// DeleteShoppingCart mocks base method.
func (m *MockStore) DeleteShoppingCart(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShoppingCart", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShoppingCart indicates an expected call of DeleteShoppingCart.
func (mr *MockStoreMockRecorder) DeleteShoppingCart(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShoppingCart", reflect.TypeOf((*MockStore)(nil).DeleteShoppingCart), ctx, id)
}

// DeleteShoppingCartItem mocks base method.
func (m *MockStore) DeleteShoppingCartItem(ctx context.Context, arg db.DeleteShoppingCartItemParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShoppingCartItem", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShoppingCartItem indicates an expected call of DeleteShoppingCartItem.
func (mr *MockStoreMockRecorder) DeleteShoppingCartItem(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShoppingCartItem", reflect.TypeOf((*MockStore)(nil).DeleteShoppingCartItem), ctx, arg)
}

// DeleteShoppingCartItemAllByUser mocks base method.
func (m *MockStore) DeleteShoppingCartItemAllByUser(ctx context.Context, arg db.DeleteShoppingCartItemAllByUserParams) ([]db.ShoppingCartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShoppingCartItemAllByUser", ctx, arg)
	ret0, _ := ret[0].([]db.ShoppingCartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteShoppingCartItemAllByUser indicates an expected call of DeleteShoppingCartItemAllByUser.
func (mr *MockStoreMockRecorder) DeleteShoppingCartItemAllByUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShoppingCartItemAllByUser", reflect.TypeOf((*MockStore)(nil).DeleteShoppingCartItemAllByUser), ctx, arg)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(ctx context.Context, id int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), ctx, id)
}

// DeleteUserAddress mocks base method.
func (m *MockStore) DeleteUserAddress(ctx context.Context, arg db.DeleteUserAddressParams) (db.UserAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserAddress", ctx, arg)
	ret0, _ := ret[0].(db.UserAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserAddress indicates an expected call of DeleteUserAddress.
func (mr *MockStoreMockRecorder) DeleteUserAddress(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserAddress", reflect.TypeOf((*MockStore)(nil).DeleteUserAddress), ctx, arg)
}

// DeleteUserByEmailNotVerified mocks base method.
func (m *MockStore) DeleteUserByEmailNotVerified(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByEmailNotVerified", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByEmailNotVerified indicates an expected call of DeleteUserByEmailNotVerified.
func (mr *MockStoreMockRecorder) DeleteUserByEmailNotVerified(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByEmailNotVerified", reflect.TypeOf((*MockStore)(nil).DeleteUserByEmailNotVerified), ctx, email)
}

// DeleteUserReview mocks base method.
func (m *MockStore) DeleteUserReview(ctx context.Context, arg db.DeleteUserReviewParams) (db.UserReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserReview", ctx, arg)
	ret0, _ := ret[0].(db.UserReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserReview indicates an expected call of DeleteUserReview.
func (mr *MockStoreMockRecorder) DeleteUserReview(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserReview", reflect.TypeOf((*MockStore)(nil).DeleteUserReview), ctx, arg)
}

// DeleteVariation mocks base method.
func (m *MockStore) DeleteVariation(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVariation", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVariation indicates an expected call of DeleteVariation.
func (mr *MockStoreMockRecorder) DeleteVariation(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVariation", reflect.TypeOf((*MockStore)(nil).DeleteVariation), ctx, id)
}

// DeleteVariationOption mocks base method.
func (m *MockStore) DeleteVariationOption(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVariationOption", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVariationOption indicates an expected call of DeleteVariationOption.
func (mr *MockStoreMockRecorder) DeleteVariationOption(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVariationOption", reflect.TypeOf((*MockStore)(nil).DeleteVariationOption), ctx, id)
}

// DeleteWishList mocks base method.
func (m *MockStore) DeleteWishList(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWishList", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWishList indicates an expected call of DeleteWishList.
func (mr *MockStoreMockRecorder) DeleteWishList(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWishList", reflect.TypeOf((*MockStore)(nil).DeleteWishList), ctx, id)
}

// DeleteWishListItem mocks base method.
func (m *MockStore) DeleteWishListItem(ctx context.Context, arg db.DeleteWishListItemParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWishListItem", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWishListItem indicates an expected call of DeleteWishListItem.
func (mr *MockStoreMockRecorder) DeleteWishListItem(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWishListItem", reflect.TypeOf((*MockStore)(nil).DeleteWishListItem), ctx, arg)
}

// DeleteWishListItemAll mocks base method.
func (m *MockStore) DeleteWishListItemAll(ctx context.Context, wishListID int64) ([]db.WishListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWishListItemAll", ctx, wishListID)
	ret0, _ := ret[0].([]db.WishListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWishListItemAll indicates an expected call of DeleteWishListItemAll.
func (mr *MockStoreMockRecorder) DeleteWishListItemAll(ctx, wishListID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWishListItemAll", reflect.TypeOf((*MockStore)(nil).DeleteWishListItemAll), ctx, wishListID)
}

// FinishedPurchaseTx mocks base method.
func (m *MockStore) FinishedPurchaseTx(ctx context.Context, arg db.FinishedPurchaseTxParams) (db.FinishedPurchaseTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishedPurchaseTx", ctx, arg)
	ret0, _ := ret[0].(db.FinishedPurchaseTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinishedPurchaseTx indicates an expected call of FinishedPurchaseTx.
func (mr *MockStoreMockRecorder) FinishedPurchaseTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishedPurchaseTx", reflect.TypeOf((*MockStore)(nil).FinishedPurchaseTx), ctx, arg)
}

// GetActiveProductItems mocks base method.
func (m *MockStore) GetActiveProductItems(ctx context.Context, adminID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveProductItems", ctx, adminID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveProductItems indicates an expected call of GetActiveProductItems.
func (mr *MockStoreMockRecorder) GetActiveProductItems(ctx, adminID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveProductItems", reflect.TypeOf((*MockStore)(nil).GetActiveProductItems), ctx, adminID)
}

// GetActiveUsersCount mocks base method.
func (m *MockStore) GetActiveUsersCount(ctx context.Context, adminID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveUsersCount", ctx, adminID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveUsersCount indicates an expected call of GetActiveUsersCount.
func (mr *MockStoreMockRecorder) GetActiveUsersCount(ctx, adminID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveUsersCount", reflect.TypeOf((*MockStore)(nil).GetActiveUsersCount), ctx, adminID)
}

// GetAddress mocks base method.
func (m *MockStore) GetAddress(ctx context.Context, id int64) (db.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress", ctx, id)
	ret0, _ := ret[0].(db.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockStoreMockRecorder) GetAddress(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockStore)(nil).GetAddress), ctx, id)
}

// GetAddressByCity mocks base method.
func (m *MockStore) GetAddressByCity(ctx context.Context, city string) (db.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressByCity", ctx, city)
	ret0, _ := ret[0].(db.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressByCity indicates an expected call of GetAddressByCity.
func (mr *MockStoreMockRecorder) GetAddressByCity(ctx, city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressByCity", reflect.TypeOf((*MockStore)(nil).GetAddressByCity), ctx, city)
}

// GetAdmin mocks base method.
func (m *MockStore) GetAdmin(ctx context.Context, id int64) (db.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdmin", ctx, id)
	ret0, _ := ret[0].(db.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdmin indicates an expected call of GetAdmin.
func (mr *MockStoreMockRecorder) GetAdmin(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdmin", reflect.TypeOf((*MockStore)(nil).GetAdmin), ctx, id)
}

// GetAdminByEmail mocks base method.
func (m *MockStore) GetAdminByEmail(ctx context.Context, email string) (db.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminByEmail", ctx, email)
	ret0, _ := ret[0].(db.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminByEmail indicates an expected call of GetAdminByEmail.
func (mr *MockStoreMockRecorder) GetAdminByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminByEmail", reflect.TypeOf((*MockStore)(nil).GetAdminByEmail), ctx, email)
}

// GetAdminSession mocks base method.
func (m *MockStore) GetAdminSession(ctx context.Context, id uuid.UUID) (db.AdminSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminSession", ctx, id)
	ret0, _ := ret[0].(db.AdminSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminSession indicates an expected call of GetAdminSession.
func (mr *MockStoreMockRecorder) GetAdminSession(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminSession", reflect.TypeOf((*MockStore)(nil).GetAdminSession), ctx, id)
}

// GetAdminType mocks base method.
func (m *MockStore) GetAdminType(ctx context.Context, id int64) (db.AdminType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminType", ctx, id)
	ret0, _ := ret[0].(db.AdminType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminType indicates an expected call of GetAdminType.
func (mr *MockStoreMockRecorder) GetAdminType(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminType", reflect.TypeOf((*MockStore)(nil).GetAdminType), ctx, id)
}

// GetAppPolicy mocks base method.
func (m *MockStore) GetAppPolicy(ctx context.Context) (db.AppPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppPolicy", ctx)
	ret0, _ := ret[0].(db.AppPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppPolicy indicates an expected call of GetAppPolicy.
func (mr *MockStoreMockRecorder) GetAppPolicy(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppPolicy", reflect.TypeOf((*MockStore)(nil).GetAppPolicy), ctx)
}

// GetBrandPromotion mocks base method.
func (m *MockStore) GetBrandPromotion(ctx context.Context, arg db.GetBrandPromotionParams) (db.BrandPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBrandPromotion", ctx, arg)
	ret0, _ := ret[0].(db.BrandPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBrandPromotion indicates an expected call of GetBrandPromotion.
func (mr *MockStoreMockRecorder) GetBrandPromotion(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBrandPromotion", reflect.TypeOf((*MockStore)(nil).GetBrandPromotion), ctx, arg)
}

// GetCategoryPromotion mocks base method.
func (m *MockStore) GetCategoryPromotion(ctx context.Context, arg db.GetCategoryPromotionParams) (db.CategoryPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryPromotion", ctx, arg)
	ret0, _ := ret[0].(db.CategoryPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryPromotion indicates an expected call of GetCategoryPromotion.
func (mr *MockStoreMockRecorder) GetCategoryPromotion(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryPromotion", reflect.TypeOf((*MockStore)(nil).GetCategoryPromotion), ctx, arg)
}

// GetCompletedDailyOrderTotal mocks base method.
func (m *MockStore) GetCompletedDailyOrderTotal(ctx context.Context, adminID int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompletedDailyOrderTotal", ctx, adminID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompletedDailyOrderTotal indicates an expected call of GetCompletedDailyOrderTotal.
func (mr *MockStoreMockRecorder) GetCompletedDailyOrderTotal(ctx, adminID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompletedDailyOrderTotal", reflect.TypeOf((*MockStore)(nil).GetCompletedDailyOrderTotal), ctx, adminID)
}

// GetFeaturedProductItem mocks base method.
func (m *MockStore) GetFeaturedProductItem(ctx context.Context, productItemID int64) (db.FeaturedProductItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeaturedProductItem", ctx, productItemID)
	ret0, _ := ret[0].(db.FeaturedProductItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeaturedProductItem indicates an expected call of GetFeaturedProductItem.
func (mr *MockStoreMockRecorder) GetFeaturedProductItem(ctx, productItemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeaturedProductItem", reflect.TypeOf((*MockStore)(nil).GetFeaturedProductItem), ctx, productItemID)
}

// GetHomePageTextBanner mocks base method.
func (m *MockStore) GetHomePageTextBanner(ctx context.Context, id int64) (db.HomePageTextBanner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHomePageTextBanner", ctx, id)
	ret0, _ := ret[0].(db.HomePageTextBanner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHomePageTextBanner indicates an expected call of GetHomePageTextBanner.
func (mr *MockStoreMockRecorder) GetHomePageTextBanner(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHomePageTextBanner", reflect.TypeOf((*MockStore)(nil).GetHomePageTextBanner), ctx, id)
}

// GetLastUsedResetPassword mocks base method.
func (m *MockStore) GetLastUsedResetPassword(ctx context.Context, email string) (db.ResetPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastUsedResetPassword", ctx, email)
	ret0, _ := ret[0].(db.ResetPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastUsedResetPassword indicates an expected call of GetLastUsedResetPassword.
func (mr *MockStoreMockRecorder) GetLastUsedResetPassword(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastUsedResetPassword", reflect.TypeOf((*MockStore)(nil).GetLastUsedResetPassword), ctx, email)
}

// GetNotification mocks base method.
func (m *MockStore) GetNotification(ctx context.Context, arg db.GetNotificationParams) (db.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotification", ctx, arg)
	ret0, _ := ret[0].(db.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotification indicates an expected call of GetNotification.
func (mr *MockStoreMockRecorder) GetNotification(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotification", reflect.TypeOf((*MockStore)(nil).GetNotification), ctx, arg)
}

// GetNotificationV2 mocks base method.
func (m *MockStore) GetNotificationV2(ctx context.Context, userID int64) (db.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationV2", ctx, userID)
	ret0, _ := ret[0].(db.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationV2 indicates an expected call of GetNotificationV2.
func (mr *MockStoreMockRecorder) GetNotificationV2(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationV2", reflect.TypeOf((*MockStore)(nil).GetNotificationV2), ctx, userID)
}

// GetOrderStatus mocks base method.
func (m *MockStore) GetOrderStatus(ctx context.Context, id int64) (db.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderStatus", ctx, id)
	ret0, _ := ret[0].(db.OrderStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderStatus indicates an expected call of GetOrderStatus.
func (mr *MockStoreMockRecorder) GetOrderStatus(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderStatus", reflect.TypeOf((*MockStore)(nil).GetOrderStatus), ctx, id)
}

// GetOrderStatusByUserID mocks base method.
func (m *MockStore) GetOrderStatusByUserID(ctx context.Context, arg db.GetOrderStatusByUserIDParams) (db.GetOrderStatusByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderStatusByUserID", ctx, arg)
	ret0, _ := ret[0].(db.GetOrderStatusByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderStatusByUserID indicates an expected call of GetOrderStatusByUserID.
func (mr *MockStoreMockRecorder) GetOrderStatusByUserID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderStatusByUserID", reflect.TypeOf((*MockStore)(nil).GetOrderStatusByUserID), ctx, arg)
}

// GetPaymentMethod mocks base method.
func (m *MockStore) GetPaymentMethod(ctx context.Context, arg db.GetPaymentMethodParams) (db.PaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentMethod", ctx, arg)
	ret0, _ := ret[0].(db.PaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentMethod indicates an expected call of GetPaymentMethod.
func (mr *MockStoreMockRecorder) GetPaymentMethod(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentMethod", reflect.TypeOf((*MockStore)(nil).GetPaymentMethod), ctx, arg)
}

// GetPaymentType mocks base method.
func (m *MockStore) GetPaymentType(ctx context.Context, id int64) (db.PaymentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentType", ctx, id)
	ret0, _ := ret[0].(db.PaymentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentType indicates an expected call of GetPaymentType.
func (mr *MockStoreMockRecorder) GetPaymentType(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentType", reflect.TypeOf((*MockStore)(nil).GetPaymentType), ctx, id)
}

// GetProduct mocks base method.
func (m *MockStore) GetProduct(ctx context.Context, id int64) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", ctx, id)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockStoreMockRecorder) GetProduct(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockStore)(nil).GetProduct), ctx, id)
}

// GetProductBrand mocks base method.
func (m *MockStore) GetProductBrand(ctx context.Context, id int64) (db.ProductBrand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductBrand", ctx, id)
	ret0, _ := ret[0].(db.ProductBrand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductBrand indicates an expected call of GetProductBrand.
func (mr *MockStoreMockRecorder) GetProductBrand(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductBrand", reflect.TypeOf((*MockStore)(nil).GetProductBrand), ctx, id)
}

// GetProductCategory mocks base method.
func (m *MockStore) GetProductCategory(ctx context.Context, id int64) (db.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductCategory", ctx, id)
	ret0, _ := ret[0].(db.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductCategory indicates an expected call of GetProductCategory.
func (mr *MockStoreMockRecorder) GetProductCategory(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductCategory", reflect.TypeOf((*MockStore)(nil).GetProductCategory), ctx, id)
}

// GetProductCategoryByParent mocks base method.
func (m *MockStore) GetProductCategoryByParent(ctx context.Context, arg db.GetProductCategoryByParentParams) (db.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductCategoryByParent", ctx, arg)
	ret0, _ := ret[0].(db.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductCategoryByParent indicates an expected call of GetProductCategoryByParent.
func (mr *MockStoreMockRecorder) GetProductCategoryByParent(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductCategoryByParent", reflect.TypeOf((*MockStore)(nil).GetProductCategoryByParent), ctx, arg)
}

// GetProductColor mocks base method.
func (m *MockStore) GetProductColor(ctx context.Context, id int64) (db.ProductColor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductColor", ctx, id)
	ret0, _ := ret[0].(db.ProductColor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductColor indicates an expected call of GetProductColor.
func (mr *MockStoreMockRecorder) GetProductColor(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductColor", reflect.TypeOf((*MockStore)(nil).GetProductColor), ctx, id)
}

// GetProductConfiguration mocks base method.
func (m *MockStore) GetProductConfiguration(ctx context.Context, arg db.GetProductConfigurationParams) (db.ProductConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductConfiguration", ctx, arg)
	ret0, _ := ret[0].(db.ProductConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductConfiguration indicates an expected call of GetProductConfiguration.
func (mr *MockStoreMockRecorder) GetProductConfiguration(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductConfiguration", reflect.TypeOf((*MockStore)(nil).GetProductConfiguration), ctx, arg)
}

// GetProductImage mocks base method.
func (m *MockStore) GetProductImage(ctx context.Context, id int64) (db.ProductImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductImage", ctx, id)
	ret0, _ := ret[0].(db.ProductImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductImage indicates an expected call of GetProductImage.
func (mr *MockStoreMockRecorder) GetProductImage(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductImage", reflect.TypeOf((*MockStore)(nil).GetProductImage), ctx, id)
}

// GetProductItem mocks base method.
func (m *MockStore) GetProductItem(ctx context.Context, productItemID int64) (db.GetProductItemRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductItem", ctx, productItemID)
	ret0, _ := ret[0].(db.GetProductItemRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductItem indicates an expected call of GetProductItem.
func (mr *MockStoreMockRecorder) GetProductItem(ctx, productItemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductItem", reflect.TypeOf((*MockStore)(nil).GetProductItem), ctx, productItemID)
}

// GetProductItemForUpdate mocks base method.
func (m *MockStore) GetProductItemForUpdate(ctx context.Context, id int64) (db.ProductItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductItemForUpdate", ctx, id)
	ret0, _ := ret[0].(db.ProductItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductItemForUpdate indicates an expected call of GetProductItemForUpdate.
func (mr *MockStoreMockRecorder) GetProductItemForUpdate(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductItemForUpdate", reflect.TypeOf((*MockStore)(nil).GetProductItemForUpdate), ctx, id)
}

// GetProductItemSizeForUpdate mocks base method.
func (m *MockStore) GetProductItemSizeForUpdate(ctx context.Context, id int64) (db.ProductSize, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductItemSizeForUpdate", ctx, id)
	ret0, _ := ret[0].(db.ProductSize)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductItemSizeForUpdate indicates an expected call of GetProductItemSizeForUpdate.
func (mr *MockStoreMockRecorder) GetProductItemSizeForUpdate(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductItemSizeForUpdate", reflect.TypeOf((*MockStore)(nil).GetProductItemSizeForUpdate), ctx, id)
}

// GetProductItemWithPromotions mocks base method.
func (m *MockStore) GetProductItemWithPromotions(ctx context.Context, id int64) (db.GetProductItemWithPromotionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductItemWithPromotions", ctx, id)
	ret0, _ := ret[0].(db.GetProductItemWithPromotionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductItemWithPromotions indicates an expected call of GetProductItemWithPromotions.
func (mr *MockStoreMockRecorder) GetProductItemWithPromotions(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductItemWithPromotions", reflect.TypeOf((*MockStore)(nil).GetProductItemWithPromotions), ctx, id)
}

// GetProductPromotion mocks base method.
func (m *MockStore) GetProductPromotion(ctx context.Context, arg db.GetProductPromotionParams) (db.ProductPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductPromotion", ctx, arg)
	ret0, _ := ret[0].(db.ProductPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductPromotion indicates an expected call of GetProductPromotion.
func (mr *MockStoreMockRecorder) GetProductPromotion(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductPromotion", reflect.TypeOf((*MockStore)(nil).GetProductPromotion), ctx, arg)
}

// GetProductSize mocks base method.
func (m *MockStore) GetProductSize(ctx context.Context, id int64) (db.ProductSize, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductSize", ctx, id)
	ret0, _ := ret[0].(db.ProductSize)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductSize indicates an expected call of GetProductSize.
func (mr *MockStoreMockRecorder) GetProductSize(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductSize", reflect.TypeOf((*MockStore)(nil).GetProductSize), ctx, id)
}

// GetProductsByIDs mocks base method.
func (m *MockStore) GetProductsByIDs(ctx context.Context, ids []int64) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByIDs", ctx, ids)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByIDs indicates an expected call of GetProductsByIDs.
func (mr *MockStoreMockRecorder) GetProductsByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByIDs", reflect.TypeOf((*MockStore)(nil).GetProductsByIDs), ctx, ids)
}

// GetPromotion mocks base method.
func (m *MockStore) GetPromotion(ctx context.Context, id int64) (db.Promotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromotion", ctx, id)
	ret0, _ := ret[0].(db.Promotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromotion indicates an expected call of GetPromotion.
func (mr *MockStoreMockRecorder) GetPromotion(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromotion", reflect.TypeOf((*MockStore)(nil).GetPromotion), ctx, id)
}

// GetResetPassword mocks base method.
func (m *MockStore) GetResetPassword(ctx context.Context, id int64) (db.ResetPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResetPassword", ctx, id)
	ret0, _ := ret[0].(db.ResetPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResetPassword indicates an expected call of GetResetPassword.
func (mr *MockStoreMockRecorder) GetResetPassword(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResetPassword", reflect.TypeOf((*MockStore)(nil).GetResetPassword), ctx, id)
}

// GetResetPasswordUserIDByID mocks base method.
func (m *MockStore) GetResetPasswordUserIDByID(ctx context.Context, arg db.GetResetPasswordUserIDByIDParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResetPasswordUserIDByID", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResetPasswordUserIDByID indicates an expected call of GetResetPasswordUserIDByID.
func (mr *MockStoreMockRecorder) GetResetPasswordUserIDByID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResetPasswordUserIDByID", reflect.TypeOf((*MockStore)(nil).GetResetPasswordUserIDByID), ctx, arg)
}

// GetResetPasswordsByEmail mocks base method.
func (m *MockStore) GetResetPasswordsByEmail(ctx context.Context, email string) (db.GetResetPasswordsByEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResetPasswordsByEmail", ctx, email)
	ret0, _ := ret[0].(db.GetResetPasswordsByEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResetPasswordsByEmail indicates an expected call of GetResetPasswordsByEmail.
func (mr *MockStoreMockRecorder) GetResetPasswordsByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResetPasswordsByEmail", reflect.TypeOf((*MockStore)(nil).GetResetPasswordsByEmail), ctx, email)
}

// GetShippingMethod mocks base method.
func (m *MockStore) GetShippingMethod(ctx context.Context, id int64) (db.ShippingMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShippingMethod", ctx, id)
	ret0, _ := ret[0].(db.ShippingMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShippingMethod indicates an expected call of GetShippingMethod.
func (mr *MockStoreMockRecorder) GetShippingMethod(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShippingMethod", reflect.TypeOf((*MockStore)(nil).GetShippingMethod), ctx, id)
}

// GetShippingMethodByUserID mocks base method.
func (m *MockStore) GetShippingMethodByUserID(ctx context.Context, arg db.GetShippingMethodByUserIDParams) (db.GetShippingMethodByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShippingMethodByUserID", ctx, arg)
	ret0, _ := ret[0].(db.GetShippingMethodByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShippingMethodByUserID indicates an expected call of GetShippingMethodByUserID.
func (mr *MockStoreMockRecorder) GetShippingMethodByUserID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShippingMethodByUserID", reflect.TypeOf((*MockStore)(nil).GetShippingMethodByUserID), ctx, arg)
}

// GetShopOrder mocks base method.
func (m *MockStore) GetShopOrder(ctx context.Context, id int64) (db.ShopOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShopOrder", ctx, id)
	ret0, _ := ret[0].(db.ShopOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShopOrder indicates an expected call of GetShopOrder.
func (mr *MockStoreMockRecorder) GetShopOrder(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShopOrder", reflect.TypeOf((*MockStore)(nil).GetShopOrder), ctx, id)
}

// GetShopOrderItem mocks base method.
func (m *MockStore) GetShopOrderItem(ctx context.Context, id int64) (db.ShopOrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShopOrderItem", ctx, id)
	ret0, _ := ret[0].(db.ShopOrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShopOrderItem indicates an expected call of GetShopOrderItem.
func (mr *MockStoreMockRecorder) GetShopOrderItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShopOrderItem", reflect.TypeOf((*MockStore)(nil).GetShopOrderItem), ctx, id)
}

// GetShopOrderItemByUserIDOrderID mocks base method.
func (m *MockStore) GetShopOrderItemByUserIDOrderID(ctx context.Context, arg db.GetShopOrderItemByUserIDOrderIDParams) (db.GetShopOrderItemByUserIDOrderIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShopOrderItemByUserIDOrderID", ctx, arg)
	ret0, _ := ret[0].(db.GetShopOrderItemByUserIDOrderIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShopOrderItemByUserIDOrderID indicates an expected call of GetShopOrderItemByUserIDOrderID.
func (mr *MockStoreMockRecorder) GetShopOrderItemByUserIDOrderID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShopOrderItemByUserIDOrderID", reflect.TypeOf((*MockStore)(nil).GetShopOrderItemByUserIDOrderID), ctx, arg)
}

// GetShopOrdersCountByStatusId mocks base method.
func (m *MockStore) GetShopOrdersCountByStatusId(ctx context.Context, arg db.GetShopOrdersCountByStatusIdParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShopOrdersCountByStatusId", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShopOrdersCountByStatusId indicates an expected call of GetShopOrdersCountByStatusId.
func (mr *MockStoreMockRecorder) GetShopOrdersCountByStatusId(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShopOrdersCountByStatusId", reflect.TypeOf((*MockStore)(nil).GetShopOrdersCountByStatusId), ctx, arg)
}

// GetShoppingCart mocks base method.
func (m *MockStore) GetShoppingCart(ctx context.Context, id int64) (db.ShoppingCart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShoppingCart", ctx, id)
	ret0, _ := ret[0].(db.ShoppingCart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShoppingCart indicates an expected call of GetShoppingCart.
func (mr *MockStoreMockRecorder) GetShoppingCart(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShoppingCart", reflect.TypeOf((*MockStore)(nil).GetShoppingCart), ctx, id)
}

// GetShoppingCartByUserIDCartID mocks base method.
func (m *MockStore) GetShoppingCartByUserIDCartID(ctx context.Context, arg db.GetShoppingCartByUserIDCartIDParams) (db.ShoppingCart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShoppingCartByUserIDCartID", ctx, arg)
	ret0, _ := ret[0].(db.ShoppingCart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShoppingCartByUserIDCartID indicates an expected call of GetShoppingCartByUserIDCartID.
func (mr *MockStoreMockRecorder) GetShoppingCartByUserIDCartID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShoppingCartByUserIDCartID", reflect.TypeOf((*MockStore)(nil).GetShoppingCartByUserIDCartID), ctx, arg)
}

// GetShoppingCartItem mocks base method.
func (m *MockStore) GetShoppingCartItem(ctx context.Context, id int64) (db.ShoppingCartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShoppingCartItem", ctx, id)
	ret0, _ := ret[0].(db.ShoppingCartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShoppingCartItem indicates an expected call of GetShoppingCartItem.
func (mr *MockStoreMockRecorder) GetShoppingCartItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShoppingCartItem", reflect.TypeOf((*MockStore)(nil).GetShoppingCartItem), ctx, id)
}

// GetShoppingCartItemByUserIDCartID mocks base method.
func (m *MockStore) GetShoppingCartItemByUserIDCartID(ctx context.Context, arg db.GetShoppingCartItemByUserIDCartIDParams) ([]db.GetShoppingCartItemByUserIDCartIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShoppingCartItemByUserIDCartID", ctx, arg)
	ret0, _ := ret[0].([]db.GetShoppingCartItemByUserIDCartIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShoppingCartItemByUserIDCartID indicates an expected call of GetShoppingCartItemByUserIDCartID.
func (mr *MockStoreMockRecorder) GetShoppingCartItemByUserIDCartID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShoppingCartItemByUserIDCartID", reflect.TypeOf((*MockStore)(nil).GetShoppingCartItemByUserIDCartID), ctx, arg)
}

// GetTotalProductItems mocks base method.
func (m *MockStore) GetTotalProductItems(ctx context.Context, adminID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalProductItems", ctx, adminID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalProductItems indicates an expected call of GetTotalProductItems.
func (mr *MockStoreMockRecorder) GetTotalProductItems(ctx, adminID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalProductItems", reflect.TypeOf((*MockStore)(nil).GetTotalProductItems), ctx, adminID)
}

// GetTotalShopOrder mocks base method.
func (m *MockStore) GetTotalShopOrder(ctx context.Context, adminID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalShopOrder", ctx, adminID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalShopOrder indicates an expected call of GetTotalShopOrder.
func (mr *MockStoreMockRecorder) GetTotalShopOrder(ctx, adminID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalShopOrder", reflect.TypeOf((*MockStore)(nil).GetTotalShopOrder), ctx, adminID)
}

// GetTotalUsersCount mocks base method.
func (m *MockStore) GetTotalUsersCount(ctx context.Context, adminID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalUsersCount", ctx, adminID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalUsersCount indicates an expected call of GetTotalUsersCount.
func (mr *MockStoreMockRecorder) GetTotalUsersCount(ctx, adminID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalUsersCount", reflect.TypeOf((*MockStore)(nil).GetTotalUsersCount), ctx, adminID)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(ctx context.Context, id int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), ctx, id)
}

// GetUserAddress mocks base method.
func (m *MockStore) GetUserAddress(ctx context.Context, arg db.GetUserAddressParams) (db.UserAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAddress", ctx, arg)
	ret0, _ := ret[0].(db.UserAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAddress indicates an expected call of GetUserAddress.
func (mr *MockStoreMockRecorder) GetUserAddress(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAddress", reflect.TypeOf((*MockStore)(nil).GetUserAddress), ctx, arg)
}

// GetUserAddressWithAddress mocks base method.
func (m *MockStore) GetUserAddressWithAddress(ctx context.Context, arg db.GetUserAddressWithAddressParams) (db.GetUserAddressWithAddressRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAddressWithAddress", ctx, arg)
	ret0, _ := ret[0].(db.GetUserAddressWithAddressRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAddressWithAddress indicates an expected call of GetUserAddressWithAddress.
func (mr *MockStoreMockRecorder) GetUserAddressWithAddress(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAddressWithAddress", reflect.TypeOf((*MockStore)(nil).GetUserAddressWithAddress), ctx, arg)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(ctx context.Context, email string) (db.GetUserByEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(db.GetUserByEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), ctx, email)
}

// GetUserReview mocks base method.
func (m *MockStore) GetUserReview(ctx context.Context, arg db.GetUserReviewParams) (db.UserReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserReview", ctx, arg)
	ret0, _ := ret[0].(db.UserReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserReview indicates an expected call of GetUserReview.
func (mr *MockStoreMockRecorder) GetUserReview(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserReview", reflect.TypeOf((*MockStore)(nil).GetUserReview), ctx, arg)
}

// GetUserSession mocks base method.
func (m *MockStore) GetUserSession(ctx context.Context, id uuid.UUID) (db.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSession", ctx, id)
	ret0, _ := ret[0].(db.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSession indicates an expected call of GetUserSession.
func (mr *MockStoreMockRecorder) GetUserSession(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSession", reflect.TypeOf((*MockStore)(nil).GetUserSession), ctx, id)
}

// GetVariation mocks base method.
func (m *MockStore) GetVariation(ctx context.Context, id int64) (db.Variation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVariation", ctx, id)
	ret0, _ := ret[0].(db.Variation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVariation indicates an expected call of GetVariation.
func (mr *MockStoreMockRecorder) GetVariation(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariation", reflect.TypeOf((*MockStore)(nil).GetVariation), ctx, id)
}

// GetVariationOption mocks base method.
func (m *MockStore) GetVariationOption(ctx context.Context, id int64) (db.VariationOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVariationOption", ctx, id)
	ret0, _ := ret[0].(db.VariationOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVariationOption indicates an expected call of GetVariationOption.
func (mr *MockStoreMockRecorder) GetVariationOption(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariationOption", reflect.TypeOf((*MockStore)(nil).GetVariationOption), ctx, id)
}

// GetVerifyEmail mocks base method.
func (m *MockStore) GetVerifyEmail(ctx context.Context, id int64) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerifyEmail", ctx, id)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerifyEmail indicates an expected call of GetVerifyEmail.
func (mr *MockStoreMockRecorder) GetVerifyEmail(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerifyEmail", reflect.TypeOf((*MockStore)(nil).GetVerifyEmail), ctx, id)
}

// GetVerifyEmailByEmail mocks base method.
func (m *MockStore) GetVerifyEmailByEmail(ctx context.Context, email string) (db.GetVerifyEmailByEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerifyEmailByEmail", ctx, email)
	ret0, _ := ret[0].(db.GetVerifyEmailByEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerifyEmailByEmail indicates an expected call of GetVerifyEmailByEmail.
func (mr *MockStoreMockRecorder) GetVerifyEmailByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerifyEmailByEmail", reflect.TypeOf((*MockStore)(nil).GetVerifyEmailByEmail), ctx, email)
}

// GetWishList mocks base method.
func (m *MockStore) GetWishList(ctx context.Context, id int64) (db.WishList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWishList", ctx, id)
	ret0, _ := ret[0].(db.WishList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWishList indicates an expected call of GetWishList.
func (mr *MockStoreMockRecorder) GetWishList(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWishList", reflect.TypeOf((*MockStore)(nil).GetWishList), ctx, id)
}

// GetWishListByUserID mocks base method.
func (m *MockStore) GetWishListByUserID(ctx context.Context, userID int64) (db.WishList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWishListByUserID", ctx, userID)
	ret0, _ := ret[0].(db.WishList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWishListByUserID indicates an expected call of GetWishListByUserID.
func (mr *MockStoreMockRecorder) GetWishListByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWishListByUserID", reflect.TypeOf((*MockStore)(nil).GetWishListByUserID), ctx, userID)
}

// GetWishListItem mocks base method.
func (m *MockStore) GetWishListItem(ctx context.Context, id int64) (db.WishListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWishListItem", ctx, id)
	ret0, _ := ret[0].(db.WishListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWishListItem indicates an expected call of GetWishListItem.
func (mr *MockStoreMockRecorder) GetWishListItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWishListItem", reflect.TypeOf((*MockStore)(nil).GetWishListItem), ctx, id)
}

// GetWishListItemByUserIDCartID mocks base method.
func (m *MockStore) GetWishListItemByUserIDCartID(ctx context.Context, arg db.GetWishListItemByUserIDCartIDParams) (db.WishListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWishListItemByUserIDCartID", ctx, arg)
	ret0, _ := ret[0].(db.WishListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWishListItemByUserIDCartID indicates an expected call of GetWishListItemByUserIDCartID.
func (mr *MockStoreMockRecorder) GetWishListItemByUserIDCartID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWishListItemByUserIDCartID", reflect.TypeOf((*MockStore)(nil).GetWishListItemByUserIDCartID), ctx, arg)
}

// ListAddressesByCity mocks base method.
func (m *MockStore) ListAddressesByCity(ctx context.Context, arg db.ListAddressesByCityParams) ([]db.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAddressesByCity", ctx, arg)
	ret0, _ := ret[0].([]db.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAddressesByCity indicates an expected call of ListAddressesByCity.
func (mr *MockStoreMockRecorder) ListAddressesByCity(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAddressesByCity", reflect.TypeOf((*MockStore)(nil).ListAddressesByCity), ctx, arg)
}

// ListAddressesByID mocks base method.
func (m *MockStore) ListAddressesByID(ctx context.Context, addressesIds []int64) ([]db.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAddressesByID", ctx, addressesIds)
	ret0, _ := ret[0].([]db.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAddressesByID indicates an expected call of ListAddressesByID.
func (mr *MockStoreMockRecorder) ListAddressesByID(ctx, addressesIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAddressesByID", reflect.TypeOf((*MockStore)(nil).ListAddressesByID), ctx, addressesIds)
}

// ListAdminTypes mocks base method.
func (m *MockStore) ListAdminTypes(ctx context.Context, arg db.ListAdminTypesParams) ([]db.AdminType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAdminTypes", ctx, arg)
	ret0, _ := ret[0].([]db.AdminType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAdminTypes indicates an expected call of ListAdminTypes.
func (mr *MockStoreMockRecorder) ListAdminTypes(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdminTypes", reflect.TypeOf((*MockStore)(nil).ListAdminTypes), ctx, arg)
}

// ListAdmins mocks base method.
func (m *MockStore) ListAdmins(ctx context.Context, arg db.ListAdminsParams) ([]db.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAdmins", ctx, arg)
	ret0, _ := ret[0].([]db.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAdmins indicates an expected call of ListAdmins.
func (mr *MockStoreMockRecorder) ListAdmins(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdmins", reflect.TypeOf((*MockStore)(nil).ListAdmins), ctx, arg)
}

// ListBrandPromotions mocks base method.
func (m *MockStore) ListBrandPromotions(ctx context.Context, arg db.ListBrandPromotionsParams) ([]db.BrandPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBrandPromotions", ctx, arg)
	ret0, _ := ret[0].([]db.BrandPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBrandPromotions indicates an expected call of ListBrandPromotions.
func (mr *MockStoreMockRecorder) ListBrandPromotions(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBrandPromotions", reflect.TypeOf((*MockStore)(nil).ListBrandPromotions), ctx, arg)
}

// ListBrandPromotionsWithImages mocks base method.
func (m *MockStore) ListBrandPromotionsWithImages(ctx context.Context) ([]db.ListBrandPromotionsWithImagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBrandPromotionsWithImages", ctx)
	ret0, _ := ret[0].([]db.ListBrandPromotionsWithImagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBrandPromotionsWithImages indicates an expected call of ListBrandPromotionsWithImages.
func (mr *MockStoreMockRecorder) ListBrandPromotionsWithImages(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBrandPromotionsWithImages", reflect.TypeOf((*MockStore)(nil).ListBrandPromotionsWithImages), ctx)
}

// ListCategoryPromotions mocks base method.
func (m *MockStore) ListCategoryPromotions(ctx context.Context, arg db.ListCategoryPromotionsParams) ([]db.CategoryPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategoryPromotions", ctx, arg)
	ret0, _ := ret[0].([]db.CategoryPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategoryPromotions indicates an expected call of ListCategoryPromotions.
func (mr *MockStoreMockRecorder) ListCategoryPromotions(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategoryPromotions", reflect.TypeOf((*MockStore)(nil).ListCategoryPromotions), ctx, arg)
}

// ListCategoryPromotionsWithImages mocks base method.
func (m *MockStore) ListCategoryPromotionsWithImages(ctx context.Context) ([]db.ListCategoryPromotionsWithImagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategoryPromotionsWithImages", ctx)
	ret0, _ := ret[0].([]db.ListCategoryPromotionsWithImagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategoryPromotionsWithImages indicates an expected call of ListCategoryPromotionsWithImages.
func (mr *MockStoreMockRecorder) ListCategoryPromotionsWithImages(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategoryPromotionsWithImages", reflect.TypeOf((*MockStore)(nil).ListCategoryPromotionsWithImages), ctx)
}

// ListFeaturedProductItems mocks base method.
func (m *MockStore) ListFeaturedProductItems(ctx context.Context, arg db.ListFeaturedProductItemsParams) ([]db.FeaturedProductItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeaturedProductItems", ctx, arg)
	ret0, _ := ret[0].([]db.FeaturedProductItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFeaturedProductItems indicates an expected call of ListFeaturedProductItems.
func (mr *MockStoreMockRecorder) ListFeaturedProductItems(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeaturedProductItems", reflect.TypeOf((*MockStore)(nil).ListFeaturedProductItems), ctx, arg)
}

// ListHomePageTextBanners mocks base method.
func (m *MockStore) ListHomePageTextBanners(ctx context.Context) ([]db.HomePageTextBanner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHomePageTextBanners", ctx)
	ret0, _ := ret[0].([]db.HomePageTextBanner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHomePageTextBanners indicates an expected call of ListHomePageTextBanners.
func (mr *MockStoreMockRecorder) ListHomePageTextBanners(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHomePageTextBanners", reflect.TypeOf((*MockStore)(nil).ListHomePageTextBanners), ctx)
}

// ListOrderStatuses mocks base method.
func (m *MockStore) ListOrderStatuses(ctx context.Context) ([]db.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrderStatuses", ctx)
	ret0, _ := ret[0].([]db.OrderStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrderStatuses indicates an expected call of ListOrderStatuses.
func (mr *MockStoreMockRecorder) ListOrderStatuses(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrderStatuses", reflect.TypeOf((*MockStore)(nil).ListOrderStatuses), ctx)
}

// ListOrderStatusesByUserID mocks base method.
func (m *MockStore) ListOrderStatusesByUserID(ctx context.Context, arg db.ListOrderStatusesByUserIDParams) ([]db.ListOrderStatusesByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrderStatusesByUserID", ctx, arg)
	ret0, _ := ret[0].([]db.ListOrderStatusesByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrderStatusesByUserID indicates an expected call of ListOrderStatusesByUserID.
func (mr *MockStoreMockRecorder) ListOrderStatusesByUserID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrderStatusesByUserID", reflect.TypeOf((*MockStore)(nil).ListOrderStatusesByUserID), ctx, arg)
}

// ListPaymentMethods mocks base method.
func (m *MockStore) ListPaymentMethods(ctx context.Context, arg db.ListPaymentMethodsParams) ([]db.PaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaymentMethods", ctx, arg)
	ret0, _ := ret[0].([]db.PaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPaymentMethods indicates an expected call of ListPaymentMethods.
func (mr *MockStoreMockRecorder) ListPaymentMethods(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaymentMethods", reflect.TypeOf((*MockStore)(nil).ListPaymentMethods), ctx, arg)
}

// ListPaymentTypes mocks base method.
func (m *MockStore) ListPaymentTypes(ctx context.Context) ([]db.PaymentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaymentTypes", ctx)
	ret0, _ := ret[0].([]db.PaymentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPaymentTypes indicates an expected call of ListPaymentTypes.
func (mr *MockStoreMockRecorder) ListPaymentTypes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaymentTypes", reflect.TypeOf((*MockStore)(nil).ListPaymentTypes), ctx)
}

// ListProductBrands mocks base method.
func (m *MockStore) ListProductBrands(ctx context.Context) ([]db.ProductBrand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductBrands", ctx)
	ret0, _ := ret[0].([]db.ProductBrand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductBrands indicates an expected call of ListProductBrands.
func (mr *MockStoreMockRecorder) ListProductBrands(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductBrands", reflect.TypeOf((*MockStore)(nil).ListProductBrands), ctx)
}

// ListProductCategories mocks base method.
func (m *MockStore) ListProductCategories(ctx context.Context) ([]db.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductCategories", ctx)
	ret0, _ := ret[0].([]db.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductCategories indicates an expected call of ListProductCategories.
func (mr *MockStoreMockRecorder) ListProductCategories(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductCategories", reflect.TypeOf((*MockStore)(nil).ListProductCategories), ctx)
}

// ListProductCategoriesByParent mocks base method.
func (m *MockStore) ListProductCategoriesByParent(ctx context.Context, parentCategoryID null.Int) ([]db.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductCategoriesByParent", ctx, parentCategoryID)
	ret0, _ := ret[0].([]db.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductCategoriesByParent indicates an expected call of ListProductCategoriesByParent.
func (mr *MockStoreMockRecorder) ListProductCategoriesByParent(ctx, parentCategoryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductCategoriesByParent", reflect.TypeOf((*MockStore)(nil).ListProductCategoriesByParent), ctx, parentCategoryID)
}

// ListProductColors mocks base method.
func (m *MockStore) ListProductColors(ctx context.Context) ([]db.ProductColor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductColors", ctx)
	ret0, _ := ret[0].([]db.ProductColor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductColors indicates an expected call of ListProductColors.
func (mr *MockStoreMockRecorder) ListProductColors(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductColors", reflect.TypeOf((*MockStore)(nil).ListProductColors), ctx)
}

// ListProductConfigurations mocks base method.
func (m *MockStore) ListProductConfigurations(ctx context.Context, arg db.ListProductConfigurationsParams) ([]db.ProductConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductConfigurations", ctx, arg)
	ret0, _ := ret[0].([]db.ProductConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductConfigurations indicates an expected call of ListProductConfigurations.
func (mr *MockStoreMockRecorder) ListProductConfigurations(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductConfigurations", reflect.TypeOf((*MockStore)(nil).ListProductConfigurations), ctx, arg)
}

// ListProductImagesNextPage mocks base method.
func (m *MockStore) ListProductImagesNextPage(ctx context.Context, arg db.ListProductImagesNextPageParams) ([]db.ListProductImagesNextPageRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductImagesNextPage", ctx, arg)
	ret0, _ := ret[0].([]db.ListProductImagesNextPageRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductImagesNextPage indicates an expected call of ListProductImagesNextPage.
func (mr *MockStoreMockRecorder) ListProductImagesNextPage(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductImagesNextPage", reflect.TypeOf((*MockStore)(nil).ListProductImagesNextPage), ctx, arg)
}

// ListProductImagesV2 mocks base method.
func (m *MockStore) ListProductImagesV2(ctx context.Context, limit int32) ([]db.ListProductImagesV2Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductImagesV2", ctx, limit)
	ret0, _ := ret[0].([]db.ListProductImagesV2Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductImagesV2 indicates an expected call of ListProductImagesV2.
func (mr *MockStoreMockRecorder) ListProductImagesV2(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductImagesV2", reflect.TypeOf((*MockStore)(nil).ListProductImagesV2), ctx, limit)
}

// ListProductItems mocks base method.
func (m *MockStore) ListProductItems(ctx context.Context, arg db.ListProductItemsParams) ([]db.ListProductItemsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductItems", ctx, arg)
	ret0, _ := ret[0].([]db.ListProductItemsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductItems indicates an expected call of ListProductItems.
func (mr *MockStoreMockRecorder) ListProductItems(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductItems", reflect.TypeOf((*MockStore)(nil).ListProductItems), ctx, arg)
}

// ListProductItemsByIDs mocks base method.
func (m *MockStore) ListProductItemsByIDs(ctx context.Context, productsIds []int64) ([]db.ListProductItemsByIDsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductItemsByIDs", ctx, productsIds)
	ret0, _ := ret[0].([]db.ListProductItemsByIDsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductItemsByIDs indicates an expected call of ListProductItemsByIDs.
func (mr *MockStoreMockRecorder) ListProductItemsByIDs(ctx, productsIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductItemsByIDs", reflect.TypeOf((*MockStore)(nil).ListProductItemsByIDs), ctx, productsIds)
}

// ListProductItemsNextPage mocks base method.
func (m *MockStore) ListProductItemsNextPage(ctx context.Context, arg db.ListProductItemsNextPageParams) ([]db.ListProductItemsNextPageRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductItemsNextPage", ctx, arg)
	ret0, _ := ret[0].([]db.ListProductItemsNextPageRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductItemsNextPage indicates an expected call of ListProductItemsNextPage.
func (mr *MockStoreMockRecorder) ListProductItemsNextPage(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductItemsNextPage", reflect.TypeOf((*MockStore)(nil).ListProductItemsNextPage), ctx, arg)
}

// ListProductItemsNextPageOld mocks base method.
func (m *MockStore) ListProductItemsNextPageOld(ctx context.Context, arg db.ListProductItemsNextPageOldParams) ([]db.ListProductItemsNextPageOldRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductItemsNextPageOld", ctx, arg)
	ret0, _ := ret[0].([]db.ListProductItemsNextPageOldRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductItemsNextPageOld indicates an expected call of ListProductItemsNextPageOld.
func (mr *MockStoreMockRecorder) ListProductItemsNextPageOld(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductItemsNextPageOld", reflect.TypeOf((*MockStore)(nil).ListProductItemsNextPageOld), ctx, arg)
}

// ListProductItemsV2 mocks base method.
func (m *MockStore) ListProductItemsV2(ctx context.Context, arg db.ListProductItemsV2Params) ([]db.ListProductItemsV2Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductItemsV2", ctx, arg)
	ret0, _ := ret[0].([]db.ListProductItemsV2Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductItemsV2 indicates an expected call of ListProductItemsV2.
func (mr *MockStoreMockRecorder) ListProductItemsV2(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductItemsV2", reflect.TypeOf((*MockStore)(nil).ListProductItemsV2), ctx, arg)
}

// ListProductItemsV2Old mocks base method.
func (m *MockStore) ListProductItemsV2Old(ctx context.Context, arg db.ListProductItemsV2OldParams) ([]db.ListProductItemsV2OldRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductItemsV2Old", ctx, arg)
	ret0, _ := ret[0].([]db.ListProductItemsV2OldRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductItemsV2Old indicates an expected call of ListProductItemsV2Old.
func (mr *MockStoreMockRecorder) ListProductItemsV2Old(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductItemsV2Old", reflect.TypeOf((*MockStore)(nil).ListProductItemsV2Old), ctx, arg)
}

// ListProductItemsWithBestSales mocks base method.
func (m *MockStore) ListProductItemsWithBestSales(ctx context.Context, limit int32) ([]db.ListProductItemsWithBestSalesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductItemsWithBestSales", ctx, limit)
	ret0, _ := ret[0].([]db.ListProductItemsWithBestSalesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductItemsWithBestSales indicates an expected call of ListProductItemsWithBestSales.
func (mr *MockStoreMockRecorder) ListProductItemsWithBestSales(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductItemsWithBestSales", reflect.TypeOf((*MockStore)(nil).ListProductItemsWithBestSales), ctx, limit)
}

// ListProductItemsWithBrandPromotions mocks base method.
func (m *MockStore) ListProductItemsWithBrandPromotions(ctx context.Context, arg db.ListProductItemsWithBrandPromotionsParams) ([]db.ListProductItemsWithBrandPromotionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductItemsWithBrandPromotions", ctx, arg)
	ret0, _ := ret[0].([]db.ListProductItemsWithBrandPromotionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductItemsWithBrandPromotions indicates an expected call of ListProductItemsWithBrandPromotions.
func (mr *MockStoreMockRecorder) ListProductItemsWithBrandPromotions(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductItemsWithBrandPromotions", reflect.TypeOf((*MockStore)(nil).ListProductItemsWithBrandPromotions), ctx, arg)
}

// ListProductItemsWithBrandPromotionsNextPage mocks base method.
func (m *MockStore) ListProductItemsWithBrandPromotionsNextPage(ctx context.Context, arg db.ListProductItemsWithBrandPromotionsNextPageParams) ([]db.ListProductItemsWithBrandPromotionsNextPageRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductItemsWithBrandPromotionsNextPage", ctx, arg)
	ret0, _ := ret[0].([]db.ListProductItemsWithBrandPromotionsNextPageRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductItemsWithBrandPromotionsNextPage indicates an expected call of ListProductItemsWithBrandPromotionsNextPage.
func (mr *MockStoreMockRecorder) ListProductItemsWithBrandPromotionsNextPage(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductItemsWithBrandPromotionsNextPage", reflect.TypeOf((*MockStore)(nil).ListProductItemsWithBrandPromotionsNextPage), ctx, arg)
}

// ListProductItemsWithCategoryPromotions mocks base method.
func (m *MockStore) ListProductItemsWithCategoryPromotions(ctx context.Context, arg db.ListProductItemsWithCategoryPromotionsParams) ([]db.ListProductItemsWithCategoryPromotionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductItemsWithCategoryPromotions", ctx, arg)
	ret0, _ := ret[0].([]db.ListProductItemsWithCategoryPromotionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductItemsWithCategoryPromotions indicates an expected call of ListProductItemsWithCategoryPromotions.
func (mr *MockStoreMockRecorder) ListProductItemsWithCategoryPromotions(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductItemsWithCategoryPromotions", reflect.TypeOf((*MockStore)(nil).ListProductItemsWithCategoryPromotions), ctx, arg)
}

// ListProductItemsWithCategoryPromotionsNextPage mocks base method.
func (m *MockStore) ListProductItemsWithCategoryPromotionsNextPage(ctx context.Context, arg db.ListProductItemsWithCategoryPromotionsNextPageParams) ([]db.ListProductItemsWithCategoryPromotionsNextPageRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductItemsWithCategoryPromotionsNextPage", ctx, arg)
	ret0, _ := ret[0].([]db.ListProductItemsWithCategoryPromotionsNextPageRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductItemsWithCategoryPromotionsNextPage indicates an expected call of ListProductItemsWithCategoryPromotionsNextPage.
func (mr *MockStoreMockRecorder) ListProductItemsWithCategoryPromotionsNextPage(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductItemsWithCategoryPromotionsNextPage", reflect.TypeOf((*MockStore)(nil).ListProductItemsWithCategoryPromotionsNextPage), ctx, arg)
}

// ListProductItemsWithPromotions mocks base method.
func (m *MockStore) ListProductItemsWithPromotions(ctx context.Context, arg db.ListProductItemsWithPromotionsParams) ([]db.ListProductItemsWithPromotionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductItemsWithPromotions", ctx, arg)
	ret0, _ := ret[0].([]db.ListProductItemsWithPromotionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductItemsWithPromotions indicates an expected call of ListProductItemsWithPromotions.
func (mr *MockStoreMockRecorder) ListProductItemsWithPromotions(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductItemsWithPromotions", reflect.TypeOf((*MockStore)(nil).ListProductItemsWithPromotions), ctx, arg)
}

// ListProductItemsWithPromotionsNextPage mocks base method.
func (m *MockStore) ListProductItemsWithPromotionsNextPage(ctx context.Context, arg db.ListProductItemsWithPromotionsNextPageParams) ([]db.ListProductItemsWithPromotionsNextPageRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductItemsWithPromotionsNextPage", ctx, arg)
	ret0, _ := ret[0].([]db.ListProductItemsWithPromotionsNextPageRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductItemsWithPromotionsNextPage indicates an expected call of ListProductItemsWithPromotionsNextPage.
func (mr *MockStoreMockRecorder) ListProductItemsWithPromotionsNextPage(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductItemsWithPromotionsNextPage", reflect.TypeOf((*MockStore)(nil).ListProductItemsWithPromotionsNextPage), ctx, arg)
}

// ListProductPromotions mocks base method.
func (m *MockStore) ListProductPromotions(ctx context.Context, arg db.ListProductPromotionsParams) ([]db.ProductPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductPromotions", ctx, arg)
	ret0, _ := ret[0].([]db.ProductPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductPromotions indicates an expected call of ListProductPromotions.
func (mr *MockStoreMockRecorder) ListProductPromotions(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductPromotions", reflect.TypeOf((*MockStore)(nil).ListProductPromotions), ctx, arg)
}

// ListProductPromotionsWithImages mocks base method.
func (m *MockStore) ListProductPromotionsWithImages(ctx context.Context) ([]db.ListProductPromotionsWithImagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductPromotionsWithImages", ctx)
	ret0, _ := ret[0].([]db.ListProductPromotionsWithImagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductPromotionsWithImages indicates an expected call of ListProductPromotionsWithImages.
func (mr *MockStoreMockRecorder) ListProductPromotionsWithImages(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductPromotionsWithImages", reflect.TypeOf((*MockStore)(nil).ListProductPromotionsWithImages), ctx)
}

// ListProductSizes mocks base method.
func (m *MockStore) ListProductSizes(ctx context.Context) ([]db.ProductSize, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductSizes", ctx)
	ret0, _ := ret[0].([]db.ProductSize)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductSizes indicates an expected call of ListProductSizes.
func (mr *MockStoreMockRecorder) ListProductSizes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductSizes", reflect.TypeOf((*MockStore)(nil).ListProductSizes), ctx)
}

// ListProductSizesByIDs mocks base method.
func (m *MockStore) ListProductSizesByIDs(ctx context.Context, sizesIds []int64) ([]db.ProductSize, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductSizesByIDs", ctx, sizesIds)
	ret0, _ := ret[0].([]db.ProductSize)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductSizesByIDs indicates an expected call of ListProductSizesByIDs.
func (mr *MockStoreMockRecorder) ListProductSizesByIDs(ctx, sizesIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductSizesByIDs", reflect.TypeOf((*MockStore)(nil).ListProductSizesByIDs), ctx, sizesIds)
}

// ListProductSizesByProductItemID mocks base method.
func (m *MockStore) ListProductSizesByProductItemID(ctx context.Context, productItemID int64) ([]db.ProductSize, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductSizesByProductItemID", ctx, productItemID)
	ret0, _ := ret[0].([]db.ProductSize)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductSizesByProductItemID indicates an expected call of ListProductSizesByProductItemID.
func (mr *MockStoreMockRecorder) ListProductSizesByProductItemID(ctx, productItemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductSizesByProductItemID", reflect.TypeOf((*MockStore)(nil).ListProductSizesByProductItemID), ctx, productItemID)
}

// ListProducts mocks base method.
func (m *MockStore) ListProducts(ctx context.Context, arg db.ListProductsParams) ([]db.ListProductsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", ctx, arg)
	ret0, _ := ret[0].([]db.ListProductsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockStoreMockRecorder) ListProducts(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockStore)(nil).ListProducts), ctx, arg)
}

// ListProductsNextPage mocks base method.
func (m *MockStore) ListProductsNextPage(ctx context.Context, arg db.ListProductsNextPageParams) ([]db.ListProductsNextPageRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductsNextPage", ctx, arg)
	ret0, _ := ret[0].([]db.ListProductsNextPageRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductsNextPage indicates an expected call of ListProductsNextPage.
func (mr *MockStoreMockRecorder) ListProductsNextPage(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductsNextPage", reflect.TypeOf((*MockStore)(nil).ListProductsNextPage), ctx, arg)
}

// ListProductsV2 mocks base method.
func (m *MockStore) ListProductsV2(ctx context.Context, limit int32) ([]db.ListProductsV2Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductsV2", ctx, limit)
	ret0, _ := ret[0].([]db.ListProductsV2Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductsV2 indicates an expected call of ListProductsV2.
func (mr *MockStoreMockRecorder) ListProductsV2(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductsV2", reflect.TypeOf((*MockStore)(nil).ListProductsV2), ctx, limit)
}

// ListPromotions mocks base method.
func (m *MockStore) ListPromotions(ctx context.Context) ([]db.Promotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPromotions", ctx)
	ret0, _ := ret[0].([]db.Promotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPromotions indicates an expected call of ListPromotions.
func (mr *MockStoreMockRecorder) ListPromotions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPromotions", reflect.TypeOf((*MockStore)(nil).ListPromotions), ctx)
}

// ListShippingMethods mocks base method.
func (m *MockStore) ListShippingMethods(ctx context.Context) ([]db.ShippingMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShippingMethods", ctx)
	ret0, _ := ret[0].([]db.ShippingMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShippingMethods indicates an expected call of ListShippingMethods.
func (mr *MockStoreMockRecorder) ListShippingMethods(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShippingMethods", reflect.TypeOf((*MockStore)(nil).ListShippingMethods), ctx)
}

// ListShippingMethodsByUserID mocks base method.
func (m *MockStore) ListShippingMethodsByUserID(ctx context.Context, arg db.ListShippingMethodsByUserIDParams) ([]db.ListShippingMethodsByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShippingMethodsByUserID", ctx, arg)
	ret0, _ := ret[0].([]db.ListShippingMethodsByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShippingMethodsByUserID indicates an expected call of ListShippingMethodsByUserID.
func (mr *MockStoreMockRecorder) ListShippingMethodsByUserID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShippingMethodsByUserID", reflect.TypeOf((*MockStore)(nil).ListShippingMethodsByUserID), ctx, arg)
}

// ListShopOrderItems mocks base method.
func (m *MockStore) ListShopOrderItems(ctx context.Context, arg db.ListShopOrderItemsParams) ([]db.ShopOrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShopOrderItems", ctx, arg)
	ret0, _ := ret[0].([]db.ShopOrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShopOrderItems indicates an expected call of ListShopOrderItems.
func (mr *MockStoreMockRecorder) ListShopOrderItems(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShopOrderItems", reflect.TypeOf((*MockStore)(nil).ListShopOrderItems), ctx, arg)
}

// ListShopOrderItemsByUserID mocks base method.
func (m *MockStore) ListShopOrderItemsByUserID(ctx context.Context, arg db.ListShopOrderItemsByUserIDParams) ([]db.ListShopOrderItemsByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShopOrderItemsByUserID", ctx, arg)
	ret0, _ := ret[0].([]db.ListShopOrderItemsByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShopOrderItemsByUserID indicates an expected call of ListShopOrderItemsByUserID.
func (mr *MockStoreMockRecorder) ListShopOrderItemsByUserID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShopOrderItemsByUserID", reflect.TypeOf((*MockStore)(nil).ListShopOrderItemsByUserID), ctx, arg)
}

// ListShopOrderItemsByUserIDOrderID mocks base method.
func (m *MockStore) ListShopOrderItemsByUserIDOrderID(ctx context.Context, arg db.ListShopOrderItemsByUserIDOrderIDParams) ([]db.ListShopOrderItemsByUserIDOrderIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShopOrderItemsByUserIDOrderID", ctx, arg)
	ret0, _ := ret[0].([]db.ListShopOrderItemsByUserIDOrderIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShopOrderItemsByUserIDOrderID indicates an expected call of ListShopOrderItemsByUserIDOrderID.
func (mr *MockStoreMockRecorder) ListShopOrderItemsByUserIDOrderID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShopOrderItemsByUserIDOrderID", reflect.TypeOf((*MockStore)(nil).ListShopOrderItemsByUserIDOrderID), ctx, arg)
}

// ListShopOrders mocks base method.
func (m *MockStore) ListShopOrders(ctx context.Context, arg db.ListShopOrdersParams) ([]db.ShopOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShopOrders", ctx, arg)
	ret0, _ := ret[0].([]db.ShopOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShopOrders indicates an expected call of ListShopOrders.
func (mr *MockStoreMockRecorder) ListShopOrders(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShopOrders", reflect.TypeOf((*MockStore)(nil).ListShopOrders), ctx, arg)
}

// ListShopOrdersByUserID mocks base method.
func (m *MockStore) ListShopOrdersByUserID(ctx context.Context, arg db.ListShopOrdersByUserIDParams) ([]db.ListShopOrdersByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShopOrdersByUserID", ctx, arg)
	ret0, _ := ret[0].([]db.ListShopOrdersByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShopOrdersByUserID indicates an expected call of ListShopOrdersByUserID.
func (mr *MockStoreMockRecorder) ListShopOrdersByUserID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShopOrdersByUserID", reflect.TypeOf((*MockStore)(nil).ListShopOrdersByUserID), ctx, arg)
}

// ListShopOrdersByUserIDNextPage mocks base method.
func (m *MockStore) ListShopOrdersByUserIDNextPage(ctx context.Context, arg db.ListShopOrdersByUserIDNextPageParams) ([]db.ListShopOrdersByUserIDNextPageRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShopOrdersByUserIDNextPage", ctx, arg)
	ret0, _ := ret[0].([]db.ListShopOrdersByUserIDNextPageRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShopOrdersByUserIDNextPage indicates an expected call of ListShopOrdersByUserIDNextPage.
func (mr *MockStoreMockRecorder) ListShopOrdersByUserIDNextPage(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShopOrdersByUserIDNextPage", reflect.TypeOf((*MockStore)(nil).ListShopOrdersByUserIDNextPage), ctx, arg)
}

// ListShopOrdersByUserIDV2 mocks base method.
func (m *MockStore) ListShopOrdersByUserIDV2(ctx context.Context, arg db.ListShopOrdersByUserIDV2Params) ([]db.ListShopOrdersByUserIDV2Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShopOrdersByUserIDV2", ctx, arg)
	ret0, _ := ret[0].([]db.ListShopOrdersByUserIDV2Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShopOrdersByUserIDV2 indicates an expected call of ListShopOrdersByUserIDV2.
func (mr *MockStoreMockRecorder) ListShopOrdersByUserIDV2(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShopOrdersByUserIDV2", reflect.TypeOf((*MockStore)(nil).ListShopOrdersByUserIDV2), ctx, arg)
}

// ListShoppingCartItems mocks base method.
func (m *MockStore) ListShoppingCartItems(ctx context.Context, arg db.ListShoppingCartItemsParams) ([]db.ShoppingCartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShoppingCartItems", ctx, arg)
	ret0, _ := ret[0].([]db.ShoppingCartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShoppingCartItems indicates an expected call of ListShoppingCartItems.
func (mr *MockStoreMockRecorder) ListShoppingCartItems(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShoppingCartItems", reflect.TypeOf((*MockStore)(nil).ListShoppingCartItems), ctx, arg)
}

// ListShoppingCartItemsByCartID mocks base method.
func (m *MockStore) ListShoppingCartItemsByCartID(ctx context.Context, shoppingCartID int64) ([]db.ShoppingCartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShoppingCartItemsByCartID", ctx, shoppingCartID)
	ret0, _ := ret[0].([]db.ShoppingCartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShoppingCartItemsByCartID indicates an expected call of ListShoppingCartItemsByCartID.
func (mr *MockStoreMockRecorder) ListShoppingCartItemsByCartID(ctx, shoppingCartID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShoppingCartItemsByCartID", reflect.TypeOf((*MockStore)(nil).ListShoppingCartItemsByCartID), ctx, shoppingCartID)
}

// ListShoppingCartItemsByUserID mocks base method.
func (m *MockStore) ListShoppingCartItemsByUserID(ctx context.Context, userID int64) ([]db.ListShoppingCartItemsByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShoppingCartItemsByUserID", ctx, userID)
	ret0, _ := ret[0].([]db.ListShoppingCartItemsByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShoppingCartItemsByUserID indicates an expected call of ListShoppingCartItemsByUserID.
func (mr *MockStoreMockRecorder) ListShoppingCartItemsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShoppingCartItemsByUserID", reflect.TypeOf((*MockStore)(nil).ListShoppingCartItemsByUserID), ctx, userID)
}

// ListShoppingCarts mocks base method.
func (m *MockStore) ListShoppingCarts(ctx context.Context, arg db.ListShoppingCartsParams) ([]db.ShoppingCart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShoppingCarts", ctx, arg)
	ret0, _ := ret[0].([]db.ShoppingCart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShoppingCarts indicates an expected call of ListShoppingCarts.
func (mr *MockStoreMockRecorder) ListShoppingCarts(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShoppingCarts", reflect.TypeOf((*MockStore)(nil).ListShoppingCarts), ctx, arg)
}

// ListUserAddresses mocks base method.
func (m *MockStore) ListUserAddresses(ctx context.Context, arg db.ListUserAddressesParams) ([]db.UserAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserAddresses", ctx, arg)
	ret0, _ := ret[0].([]db.UserAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserAddresses indicates an expected call of ListUserAddresses.
func (mr *MockStoreMockRecorder) ListUserAddresses(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserAddresses", reflect.TypeOf((*MockStore)(nil).ListUserAddresses), ctx, arg)
}

// ListUserReviews mocks base method.
func (m *MockStore) ListUserReviews(ctx context.Context, arg db.ListUserReviewsParams) ([]db.UserReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserReviews", ctx, arg)
	ret0, _ := ret[0].([]db.UserReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserReviews indicates an expected call of ListUserReviews.
func (mr *MockStoreMockRecorder) ListUserReviews(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserReviews", reflect.TypeOf((*MockStore)(nil).ListUserReviews), ctx, arg)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(ctx context.Context, arg db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, arg)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), ctx, arg)
}

// ListVariationOptions mocks base method.
func (m *MockStore) ListVariationOptions(ctx context.Context, arg db.ListVariationOptionsParams) ([]db.VariationOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVariationOptions", ctx, arg)
	ret0, _ := ret[0].([]db.VariationOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVariationOptions indicates an expected call of ListVariationOptions.
func (mr *MockStoreMockRecorder) ListVariationOptions(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVariationOptions", reflect.TypeOf((*MockStore)(nil).ListVariationOptions), ctx, arg)
}

// ListVariations mocks base method.
func (m *MockStore) ListVariations(ctx context.Context, arg db.ListVariationsParams) ([]db.Variation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVariations", ctx, arg)
	ret0, _ := ret[0].([]db.Variation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVariations indicates an expected call of ListVariations.
func (mr *MockStoreMockRecorder) ListVariations(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVariations", reflect.TypeOf((*MockStore)(nil).ListVariations), ctx, arg)
}

// ListWishListItems mocks base method.
func (m *MockStore) ListWishListItems(ctx context.Context, arg db.ListWishListItemsParams) ([]db.WishListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWishListItems", ctx, arg)
	ret0, _ := ret[0].([]db.WishListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWishListItems indicates an expected call of ListWishListItems.
func (mr *MockStoreMockRecorder) ListWishListItems(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWishListItems", reflect.TypeOf((*MockStore)(nil).ListWishListItems), ctx, arg)
}

// ListWishListItemsByCartID mocks base method.
func (m *MockStore) ListWishListItemsByCartID(ctx context.Context, wishListID int64) ([]db.WishListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWishListItemsByCartID", ctx, wishListID)
	ret0, _ := ret[0].([]db.WishListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWishListItemsByCartID indicates an expected call of ListWishListItemsByCartID.
func (mr *MockStoreMockRecorder) ListWishListItemsByCartID(ctx, wishListID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWishListItemsByCartID", reflect.TypeOf((*MockStore)(nil).ListWishListItemsByCartID), ctx, wishListID)
}

// ListWishListItemsByUserID mocks base method.
func (m *MockStore) ListWishListItemsByUserID(ctx context.Context, userID int64) ([]db.ListWishListItemsByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWishListItemsByUserID", ctx, userID)
	ret0, _ := ret[0].([]db.ListWishListItemsByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWishListItemsByUserID indicates an expected call of ListWishListItemsByUserID.
func (mr *MockStoreMockRecorder) ListWishListItemsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWishListItemsByUserID", reflect.TypeOf((*MockStore)(nil).ListWishListItemsByUserID), ctx, userID)
}

// ListWishLists mocks base method.
func (m *MockStore) ListWishLists(ctx context.Context, arg db.ListWishListsParams) ([]db.WishList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWishLists", ctx, arg)
	ret0, _ := ret[0].([]db.WishList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWishLists indicates an expected call of ListWishLists.
func (mr *MockStoreMockRecorder) ListWishLists(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWishLists", reflect.TypeOf((*MockStore)(nil).ListWishLists), ctx, arg)
}

// SearchProductItems mocks base method.
func (m *MockStore) SearchProductItems(ctx context.Context, arg db.SearchProductItemsParams) ([]db.SearchProductItemsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProductItems", ctx, arg)
	ret0, _ := ret[0].([]db.SearchProductItemsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProductItems indicates an expected call of SearchProductItems.
func (mr *MockStoreMockRecorder) SearchProductItems(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProductItems", reflect.TypeOf((*MockStore)(nil).SearchProductItems), ctx, arg)
}

// SearchProductItemsNextPage mocks base method.
func (m *MockStore) SearchProductItemsNextPage(ctx context.Context, arg db.SearchProductItemsNextPageParams) ([]db.SearchProductItemsNextPageRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProductItemsNextPage", ctx, arg)
	ret0, _ := ret[0].([]db.SearchProductItemsNextPageRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProductItemsNextPage indicates an expected call of SearchProductItemsNextPage.
func (mr *MockStoreMockRecorder) SearchProductItemsNextPage(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProductItemsNextPage", reflect.TypeOf((*MockStore)(nil).SearchProductItemsNextPage), ctx, arg)
}

// SearchProductItemsNextPageOld mocks base method.
func (m *MockStore) SearchProductItemsNextPageOld(ctx context.Context, arg db.SearchProductItemsNextPageOldParams) ([]db.SearchProductItemsNextPageOldRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProductItemsNextPageOld", ctx, arg)
	ret0, _ := ret[0].([]db.SearchProductItemsNextPageOldRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProductItemsNextPageOld indicates an expected call of SearchProductItemsNextPageOld.
func (mr *MockStoreMockRecorder) SearchProductItemsNextPageOld(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProductItemsNextPageOld", reflect.TypeOf((*MockStore)(nil).SearchProductItemsNextPageOld), ctx, arg)
}

// SearchProductItemsOld mocks base method.
func (m *MockStore) SearchProductItemsOld(ctx context.Context, arg db.SearchProductItemsOldParams) ([]db.SearchProductItemsOldRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProductItemsOld", ctx, arg)
	ret0, _ := ret[0].([]db.SearchProductItemsOldRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProductItemsOld indicates an expected call of SearchProductItemsOld.
func (mr *MockStoreMockRecorder) SearchProductItemsOld(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProductItemsOld", reflect.TypeOf((*MockStore)(nil).SearchProductItemsOld), ctx, arg)
}

// SearchProducts mocks base method.
func (m *MockStore) SearchProducts(ctx context.Context, arg db.SearchProductsParams) ([]db.SearchProductsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProducts", ctx, arg)
	ret0, _ := ret[0].([]db.SearchProductsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProducts indicates an expected call of SearchProducts.
func (mr *MockStoreMockRecorder) SearchProducts(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProducts", reflect.TypeOf((*MockStore)(nil).SearchProducts), ctx, arg)
}

// SearchProductsNextPage mocks base method.
func (m *MockStore) SearchProductsNextPage(ctx context.Context, arg db.SearchProductsNextPageParams) ([]db.SearchProductsNextPageRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProductsNextPage", ctx, arg)
	ret0, _ := ret[0].([]db.SearchProductsNextPageRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProductsNextPage indicates an expected call of SearchProductsNextPage.
func (mr *MockStoreMockRecorder) SearchProductsNextPage(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProductsNextPage", reflect.TypeOf((*MockStore)(nil).SearchProductsNextPage), ctx, arg)
}

// SignUpTx mocks base method.
func (m *MockStore) SignUpTx(ctx context.Context, arg db.SignUpTxParams) (db.SignUpTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpTx", ctx, arg)
	ret0, _ := ret[0].(db.SignUpTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpTx indicates an expected call of SignUpTx.
func (mr *MockStoreMockRecorder) SignUpTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpTx", reflect.TypeOf((*MockStore)(nil).SignUpTx), ctx, arg)
}

// UpdateAddress mocks base method.
func (m *MockStore) UpdateAddress(ctx context.Context, arg db.UpdateAddressParams) (db.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", ctx, arg)
	ret0, _ := ret[0].(db.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockStoreMockRecorder) UpdateAddress(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockStore)(nil).UpdateAddress), ctx, arg)
}

// UpdateAdmin mocks base method.
func (m *MockStore) UpdateAdmin(ctx context.Context, arg db.UpdateAdminParams) (db.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdmin", ctx, arg)
	ret0, _ := ret[0].(db.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAdmin indicates an expected call of UpdateAdmin.
func (mr *MockStoreMockRecorder) UpdateAdmin(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdmin", reflect.TypeOf((*MockStore)(nil).UpdateAdmin), ctx, arg)
}

// UpdateAdminSession mocks base method.
func (m *MockStore) UpdateAdminSession(ctx context.Context, arg db.UpdateAdminSessionParams) (db.AdminSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdminSession", ctx, arg)
	ret0, _ := ret[0].(db.AdminSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAdminSession indicates an expected call of UpdateAdminSession.
func (mr *MockStoreMockRecorder) UpdateAdminSession(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdminSession", reflect.TypeOf((*MockStore)(nil).UpdateAdminSession), ctx, arg)
}

// UpdateAdminType mocks base method.
func (m *MockStore) UpdateAdminType(ctx context.Context, arg db.UpdateAdminTypeParams) (db.AdminType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdminType", ctx, arg)
	ret0, _ := ret[0].(db.AdminType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAdminType indicates an expected call of UpdateAdminType.
func (mr *MockStoreMockRecorder) UpdateAdminType(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdminType", reflect.TypeOf((*MockStore)(nil).UpdateAdminType), ctx, arg)
}

// UpdateAppPolicy mocks base method.
func (m *MockStore) UpdateAppPolicy(ctx context.Context, arg db.UpdateAppPolicyParams) (db.AppPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppPolicy", ctx, arg)
	ret0, _ := ret[0].(db.AppPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppPolicy indicates an expected call of UpdateAppPolicy.
func (mr *MockStoreMockRecorder) UpdateAppPolicy(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppPolicy", reflect.TypeOf((*MockStore)(nil).UpdateAppPolicy), ctx, arg)
}

// UpdateBrandPromotion mocks base method.
func (m *MockStore) UpdateBrandPromotion(ctx context.Context, arg db.UpdateBrandPromotionParams) (db.BrandPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBrandPromotion", ctx, arg)
	ret0, _ := ret[0].(db.BrandPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBrandPromotion indicates an expected call of UpdateBrandPromotion.
func (mr *MockStoreMockRecorder) UpdateBrandPromotion(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBrandPromotion", reflect.TypeOf((*MockStore)(nil).UpdateBrandPromotion), ctx, arg)
}

// UpdateCategoryPromotion mocks base method.
func (m *MockStore) UpdateCategoryPromotion(ctx context.Context, arg db.UpdateCategoryPromotionParams) (db.CategoryPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategoryPromotion", ctx, arg)
	ret0, _ := ret[0].(db.CategoryPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategoryPromotion indicates an expected call of UpdateCategoryPromotion.
func (mr *MockStoreMockRecorder) UpdateCategoryPromotion(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategoryPromotion", reflect.TypeOf((*MockStore)(nil).UpdateCategoryPromotion), ctx, arg)
}

// UpdateHomePageTextBanner mocks base method.
func (m *MockStore) UpdateHomePageTextBanner(ctx context.Context, arg db.UpdateHomePageTextBannerParams) (db.HomePageTextBanner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHomePageTextBanner", ctx, arg)
	ret0, _ := ret[0].(db.HomePageTextBanner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHomePageTextBanner indicates an expected call of UpdateHomePageTextBanner.
func (mr *MockStoreMockRecorder) UpdateHomePageTextBanner(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHomePageTextBanner", reflect.TypeOf((*MockStore)(nil).UpdateHomePageTextBanner), ctx, arg)
}

// UpdateNotification mocks base method.
func (m *MockStore) UpdateNotification(ctx context.Context, arg db.UpdateNotificationParams) (db.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotification", ctx, arg)
	ret0, _ := ret[0].(db.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNotification indicates an expected call of UpdateNotification.
func (mr *MockStoreMockRecorder) UpdateNotification(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotification", reflect.TypeOf((*MockStore)(nil).UpdateNotification), ctx, arg)
}

// UpdateOrderStatus mocks base method.
func (m *MockStore) UpdateOrderStatus(ctx context.Context, arg db.UpdateOrderStatusParams) (db.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, arg)
	ret0, _ := ret[0].(db.OrderStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockStoreMockRecorder) UpdateOrderStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockStore)(nil).UpdateOrderStatus), ctx, arg)
}

// UpdatePaymentMethod mocks base method.
func (m *MockStore) UpdatePaymentMethod(ctx context.Context, arg db.UpdatePaymentMethodParams) (db.PaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentMethod", ctx, arg)
	ret0, _ := ret[0].(db.PaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePaymentMethod indicates an expected call of UpdatePaymentMethod.
func (mr *MockStoreMockRecorder) UpdatePaymentMethod(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentMethod", reflect.TypeOf((*MockStore)(nil).UpdatePaymentMethod), ctx, arg)
}

// UpdatePaymentType mocks base method.
func (m *MockStore) UpdatePaymentType(ctx context.Context, arg db.UpdatePaymentTypeParams) (db.PaymentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentType", ctx, arg)
	ret0, _ := ret[0].(db.PaymentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePaymentType indicates an expected call of UpdatePaymentType.
func (mr *MockStoreMockRecorder) UpdatePaymentType(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentType", reflect.TypeOf((*MockStore)(nil).UpdatePaymentType), ctx, arg)
}

// UpdateProduct mocks base method.
func (m *MockStore) UpdateProduct(ctx context.Context, arg db.UpdateProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, arg)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockStoreMockRecorder) UpdateProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockStore)(nil).UpdateProduct), ctx, arg)
}

// UpdateProductBrand mocks base method.
func (m *MockStore) UpdateProductBrand(ctx context.Context, arg db.UpdateProductBrandParams) (db.ProductBrand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductBrand", ctx, arg)
	ret0, _ := ret[0].(db.ProductBrand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductBrand indicates an expected call of UpdateProductBrand.
func (mr *MockStoreMockRecorder) UpdateProductBrand(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductBrand", reflect.TypeOf((*MockStore)(nil).UpdateProductBrand), ctx, arg)
}

// UpdateProductCategory mocks base method.
func (m *MockStore) UpdateProductCategory(ctx context.Context, arg db.UpdateProductCategoryParams) (db.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductCategory", ctx, arg)
	ret0, _ := ret[0].(db.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductCategory indicates an expected call of UpdateProductCategory.
func (mr *MockStoreMockRecorder) UpdateProductCategory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductCategory", reflect.TypeOf((*MockStore)(nil).UpdateProductCategory), ctx, arg)
}

// UpdateProductColor mocks base method.
func (m *MockStore) UpdateProductColor(ctx context.Context, arg db.UpdateProductColorParams) (db.ProductColor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductColor", ctx, arg)
	ret0, _ := ret[0].(db.ProductColor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductColor indicates an expected call of UpdateProductColor.
func (mr *MockStoreMockRecorder) UpdateProductColor(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductColor", reflect.TypeOf((*MockStore)(nil).UpdateProductColor), ctx, arg)
}

// UpdateProductConfiguration mocks base method.
func (m *MockStore) UpdateProductConfiguration(ctx context.Context, arg db.UpdateProductConfigurationParams) (db.ProductConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductConfiguration", ctx, arg)
	ret0, _ := ret[0].(db.ProductConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductConfiguration indicates an expected call of UpdateProductConfiguration.
func (mr *MockStoreMockRecorder) UpdateProductConfiguration(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductConfiguration", reflect.TypeOf((*MockStore)(nil).UpdateProductConfiguration), ctx, arg)
}

// UpdateProductImage mocks base method.
func (m *MockStore) UpdateProductImage(ctx context.Context, arg db.UpdateProductImageParams) (db.ProductImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductImage", ctx, arg)
	ret0, _ := ret[0].(db.ProductImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductImage indicates an expected call of UpdateProductImage.
func (mr *MockStoreMockRecorder) UpdateProductImage(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductImage", reflect.TypeOf((*MockStore)(nil).UpdateProductImage), ctx, arg)
}

// UpdateProductItem mocks base method.
func (m *MockStore) UpdateProductItem(ctx context.Context, arg db.UpdateProductItemParams) (db.ProductItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductItem", ctx, arg)
	ret0, _ := ret[0].(db.ProductItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductItem indicates an expected call of UpdateProductItem.
func (mr *MockStoreMockRecorder) UpdateProductItem(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductItem", reflect.TypeOf((*MockStore)(nil).UpdateProductItem), ctx, arg)
}

// UpdateProductPromotion mocks base method.
func (m *MockStore) UpdateProductPromotion(ctx context.Context, arg db.UpdateProductPromotionParams) (db.ProductPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductPromotion", ctx, arg)
	ret0, _ := ret[0].(db.ProductPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductPromotion indicates an expected call of UpdateProductPromotion.
func (mr *MockStoreMockRecorder) UpdateProductPromotion(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductPromotion", reflect.TypeOf((*MockStore)(nil).UpdateProductPromotion), ctx, arg)
}

// UpdateProductSize mocks base method.
func (m *MockStore) UpdateProductSize(ctx context.Context, arg db.UpdateProductSizeParams) (db.ProductSize, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductSize", ctx, arg)
	ret0, _ := ret[0].(db.ProductSize)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductSize indicates an expected call of UpdateProductSize.
func (mr *MockStoreMockRecorder) UpdateProductSize(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductSize", reflect.TypeOf((*MockStore)(nil).UpdateProductSize), ctx, arg)
}

// UpdatePromotion mocks base method.
func (m *MockStore) UpdatePromotion(ctx context.Context, arg db.UpdatePromotionParams) (db.Promotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePromotion", ctx, arg)
	ret0, _ := ret[0].(db.Promotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePromotion indicates an expected call of UpdatePromotion.
func (mr *MockStoreMockRecorder) UpdatePromotion(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePromotion", reflect.TypeOf((*MockStore)(nil).UpdatePromotion), ctx, arg)
}

// UpdateResetPassword mocks base method.
func (m *MockStore) UpdateResetPassword(ctx context.Context, arg db.UpdateResetPasswordParams) (db.ResetPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResetPassword", ctx, arg)
	ret0, _ := ret[0].(db.ResetPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResetPassword indicates an expected call of UpdateResetPassword.
func (mr *MockStoreMockRecorder) UpdateResetPassword(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResetPassword", reflect.TypeOf((*MockStore)(nil).UpdateResetPassword), ctx, arg)
}

// UpdateShippingMethod mocks base method.
func (m *MockStore) UpdateShippingMethod(ctx context.Context, arg db.UpdateShippingMethodParams) (db.ShippingMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShippingMethod", ctx, arg)
	ret0, _ := ret[0].(db.ShippingMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShippingMethod indicates an expected call of UpdateShippingMethod.
func (mr *MockStoreMockRecorder) UpdateShippingMethod(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShippingMethod", reflect.TypeOf((*MockStore)(nil).UpdateShippingMethod), ctx, arg)
}

// UpdateShopOrder mocks base method.
func (m *MockStore) UpdateShopOrder(ctx context.Context, arg db.UpdateShopOrderParams) (db.ShopOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShopOrder", ctx, arg)
	ret0, _ := ret[0].(db.ShopOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShopOrder indicates an expected call of UpdateShopOrder.
func (mr *MockStoreMockRecorder) UpdateShopOrder(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShopOrder", reflect.TypeOf((*MockStore)(nil).UpdateShopOrder), ctx, arg)
}

// UpdateShopOrderItem mocks base method.
func (m *MockStore) UpdateShopOrderItem(ctx context.Context, arg db.UpdateShopOrderItemParams) (db.ShopOrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShopOrderItem", ctx, arg)
	ret0, _ := ret[0].(db.ShopOrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShopOrderItem indicates an expected call of UpdateShopOrderItem.
func (mr *MockStoreMockRecorder) UpdateShopOrderItem(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShopOrderItem", reflect.TypeOf((*MockStore)(nil).UpdateShopOrderItem), ctx, arg)
}

// UpdateShoppingCart mocks base method.
func (m *MockStore) UpdateShoppingCart(ctx context.Context, arg db.UpdateShoppingCartParams) (db.ShoppingCart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShoppingCart", ctx, arg)
	ret0, _ := ret[0].(db.ShoppingCart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShoppingCart indicates an expected call of UpdateShoppingCart.
func (mr *MockStoreMockRecorder) UpdateShoppingCart(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShoppingCart", reflect.TypeOf((*MockStore)(nil).UpdateShoppingCart), ctx, arg)
}

// UpdateShoppingCartItem mocks base method.
func (m *MockStore) UpdateShoppingCartItem(ctx context.Context, arg db.UpdateShoppingCartItemParams) (db.UpdateShoppingCartItemRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShoppingCartItem", ctx, arg)
	ret0, _ := ret[0].(db.UpdateShoppingCartItemRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShoppingCartItem indicates an expected call of UpdateShoppingCartItem.
func (mr *MockStoreMockRecorder) UpdateShoppingCartItem(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShoppingCartItem", reflect.TypeOf((*MockStore)(nil).UpdateShoppingCartItem), ctx, arg)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(ctx context.Context, arg db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), ctx, arg)
}

// UpdateUserAddress mocks base method.
func (m *MockStore) UpdateUserAddress(ctx context.Context, arg db.UpdateUserAddressParams) (db.UserAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserAddress", ctx, arg)
	ret0, _ := ret[0].(db.UserAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserAddress indicates an expected call of UpdateUserAddress.
func (mr *MockStoreMockRecorder) UpdateUserAddress(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserAddress", reflect.TypeOf((*MockStore)(nil).UpdateUserAddress), ctx, arg)
}

// UpdateUserEmailisVerifiedForTest mocks base method.
func (m *MockStore) UpdateUserEmailisVerifiedForTest(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserEmailisVerifiedForTest", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserEmailisVerifiedForTest indicates an expected call of UpdateUserEmailisVerifiedForTest.
func (mr *MockStoreMockRecorder) UpdateUserEmailisVerifiedForTest(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserEmailisVerifiedForTest", reflect.TypeOf((*MockStore)(nil).UpdateUserEmailisVerifiedForTest), ctx, id)
}

// UpdateUserPassword mocks base method.
func (m *MockStore) UpdateUserPassword(ctx context.Context, arg db.UpdateUserPasswordParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockStoreMockRecorder) UpdateUserPassword(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockStore)(nil).UpdateUserPassword), ctx, arg)
}

// UpdateUserReview mocks base method.
func (m *MockStore) UpdateUserReview(ctx context.Context, arg db.UpdateUserReviewParams) (db.UserReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserReview", ctx, arg)
	ret0, _ := ret[0].(db.UserReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserReview indicates an expected call of UpdateUserReview.
func (mr *MockStoreMockRecorder) UpdateUserReview(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserReview", reflect.TypeOf((*MockStore)(nil).UpdateUserReview), ctx, arg)
}

// UpdateUserSession mocks base method.
func (m *MockStore) UpdateUserSession(ctx context.Context, arg db.UpdateUserSessionParams) (db.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSession", ctx, arg)
	ret0, _ := ret[0].(db.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserSession indicates an expected call of UpdateUserSession.
func (mr *MockStoreMockRecorder) UpdateUserSession(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSession", reflect.TypeOf((*MockStore)(nil).UpdateUserSession), ctx, arg)
}

// UpdateVariation mocks base method.
func (m *MockStore) UpdateVariation(ctx context.Context, arg db.UpdateVariationParams) (db.Variation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVariation", ctx, arg)
	ret0, _ := ret[0].(db.Variation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVariation indicates an expected call of UpdateVariation.
func (mr *MockStoreMockRecorder) UpdateVariation(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVariation", reflect.TypeOf((*MockStore)(nil).UpdateVariation), ctx, arg)
}

// UpdateVariationOption mocks base method.
func (m *MockStore) UpdateVariationOption(ctx context.Context, arg db.UpdateVariationOptionParams) (db.VariationOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVariationOption", ctx, arg)
	ret0, _ := ret[0].(db.VariationOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVariationOption indicates an expected call of UpdateVariationOption.
func (mr *MockStoreMockRecorder) UpdateVariationOption(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVariationOption", reflect.TypeOf((*MockStore)(nil).UpdateVariationOption), ctx, arg)
}

// UpdateVerifyEmail mocks base method.
func (m *MockStore) UpdateVerifyEmail(ctx context.Context, arg db.UpdateVerifyEmailParams) (db.UpdateVerifyEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerifyEmail", ctx, arg)
	ret0, _ := ret[0].(db.UpdateVerifyEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVerifyEmail indicates an expected call of UpdateVerifyEmail.
func (mr *MockStoreMockRecorder) UpdateVerifyEmail(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerifyEmail", reflect.TypeOf((*MockStore)(nil).UpdateVerifyEmail), ctx, arg)
}

// UpdateWishList mocks base method.
func (m *MockStore) UpdateWishList(ctx context.Context, arg db.UpdateWishListParams) (db.WishList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWishList", ctx, arg)
	ret0, _ := ret[0].(db.WishList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWishList indicates an expected call of UpdateWishList.
func (mr *MockStoreMockRecorder) UpdateWishList(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWishList", reflect.TypeOf((*MockStore)(nil).UpdateWishList), ctx, arg)
}

// UpdateWishListItem mocks base method.
func (m *MockStore) UpdateWishListItem(ctx context.Context, arg db.UpdateWishListItemParams) (db.WishListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWishListItem", ctx, arg)
	ret0, _ := ret[0].(db.WishListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWishListItem indicates an expected call of UpdateWishListItem.
func (mr *MockStoreMockRecorder) UpdateWishListItem(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWishListItem", reflect.TypeOf((*MockStore)(nil).UpdateWishListItem), ctx, arg)
}
