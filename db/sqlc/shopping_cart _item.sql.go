// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: shopping_cart _item.sql

package db

import (
	"context"

	"github.com/guregu/null"
)

const createShoppingCartItem = `-- name: CreateShoppingCartItem :one
INSERT INTO "shopping_cart_item" (
  shopping_cart_id,
  product_item_id,
  qty
) VALUES (
  $1, $2, $3
)
RETURNING id, shopping_cart_id, product_item_id, qty, created_at, updated_at
`

type CreateShoppingCartItemParams struct {
	ShoppingCartID int64 `json:"shopping_cart_id"`
	ProductItemID  int64 `json:"product_item_id"`
	Qty            int32 `json:"qty"`
}

func (q *Queries) CreateShoppingCartItem(ctx context.Context, arg CreateShoppingCartItemParams) (ShoppingCartItem, error) {
	row := q.db.QueryRow(ctx, createShoppingCartItem, arg.ShoppingCartID, arg.ProductItemID, arg.Qty)
	var i ShoppingCartItem
	err := row.Scan(
		&i.ID,
		&i.ShoppingCartID,
		&i.ProductItemID,
		&i.Qty,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteShoppingCartItem = `-- name: DeleteShoppingCartItem :exec
DELETE FROM "shopping_cart_item"
WHERE id = $1
`

func (q *Queries) DeleteShoppingCartItem(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteShoppingCartItem, id)
	return err
}

const getShoppingCartItem = `-- name: GetShoppingCartItem :one
SELECT id, shopping_cart_id, product_item_id, qty, created_at, updated_at FROM "shopping_cart_item"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetShoppingCartItem(ctx context.Context, id int64) (ShoppingCartItem, error) {
	row := q.db.QueryRow(ctx, getShoppingCartItem, id)
	var i ShoppingCartItem
	err := row.Scan(
		&i.ID,
		&i.ShoppingCartID,
		&i.ProductItemID,
		&i.Qty,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listShoppingCartItems = `-- name: ListShoppingCartItems :many
SELECT id, shopping_cart_id, product_item_id, qty, created_at, updated_at FROM "shopping_cart_item"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListShoppingCartItemsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListShoppingCartItems(ctx context.Context, arg ListShoppingCartItemsParams) ([]ShoppingCartItem, error) {
	rows, err := q.db.Query(ctx, listShoppingCartItems, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ShoppingCartItem{}
	for rows.Next() {
		var i ShoppingCartItem
		if err := rows.Scan(
			&i.ID,
			&i.ShoppingCartID,
			&i.ProductItemID,
			&i.Qty,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listShoppingCartItemsByCartID = `-- name: ListShoppingCartItemsByCartID :many
SELECT id, shopping_cart_id, product_item_id, qty, created_at, updated_at FROM "shopping_cart_item"
WHERE shopping_cart_id = $1
ORDER BY id
`

func (q *Queries) ListShoppingCartItemsByCartID(ctx context.Context, shoppingCartID int64) ([]ShoppingCartItem, error) {
	rows, err := q.db.Query(ctx, listShoppingCartItemsByCartID, shoppingCartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ShoppingCartItem{}
	for rows.Next() {
		var i ShoppingCartItem
		if err := rows.Scan(
			&i.ID,
			&i.ShoppingCartID,
			&i.ProductItemID,
			&i.Qty,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShoppingCartItem = `-- name: UpdateShoppingCartItem :one
UPDATE "shopping_cart_item"
SET 
shopping_cart_id = COALESCE($1,shopping_cart_id),
product_item_id = COALESCE($2,product_item_id),
qty = COALESCE($3,qty)
WHERE id = $4
RETURNING id, shopping_cart_id, product_item_id, qty, created_at, updated_at
`

type UpdateShoppingCartItemParams struct {
	ShoppingCartID null.Int `json:"shopping_cart_id"`
	ProductItemID  null.Int `json:"product_item_id"`
	Qty            null.Int `json:"qty"`
	ID             int64    `json:"id"`
}

func (q *Queries) UpdateShoppingCartItem(ctx context.Context, arg UpdateShoppingCartItemParams) (ShoppingCartItem, error) {
	row := q.db.QueryRow(ctx, updateShoppingCartItem,
		arg.ShoppingCartID,
		arg.ProductItemID,
		arg.Qty,
		arg.ID,
	)
	var i ShoppingCartItem
	err := row.Scan(
		&i.ID,
		&i.ShoppingCartID,
		&i.ProductItemID,
		&i.Qty,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
