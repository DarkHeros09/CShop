// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: promotion.sql

package db

import (
	"context"
	"time"

	null "github.com/guregu/null/v5"
)

const adminCreatePromotion = `-- name: AdminCreatePromotion :one
With t1 AS (
SELECT 1 AS is_admin
    FROM "admin"
    WHERE "admin".id = $7
    AND active = TRUE
    )
INSERT INTO "promotion" (
  name,
  description,
  discount_rate,
  active,
  start_date,
  end_date
)
SELECT $1, $2, $3,
$4, $5, $6 FROM t1
WHERE is_admin=1
RETURNING id, name, description, discount_rate, active, start_date, end_date
`

type AdminCreatePromotionParams struct {
	Name         string    `json:"name"`
	Description  string    `json:"description"`
	DiscountRate int64     `json:"discount_rate"`
	Active       bool      `json:"active"`
	StartDate    time.Time `json:"start_date"`
	EndDate      time.Time `json:"end_date"`
	AdminID      int64     `json:"admin_id"`
}

func (q *Queries) AdminCreatePromotion(ctx context.Context, arg AdminCreatePromotionParams) (Promotion, error) {
	row := q.db.QueryRow(ctx, adminCreatePromotion,
		arg.Name,
		arg.Description,
		arg.DiscountRate,
		arg.Active,
		arg.StartDate,
		arg.EndDate,
		arg.AdminID,
	)
	var i Promotion
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DiscountRate,
		&i.Active,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const adminUpdatePromotion = `-- name: AdminUpdatePromotion :one
With t1 AS (
SELECT 1 AS is_admin
    FROM "admin"
    WHERE "admin".id = $8
    AND active = TRUE
    )
UPDATE "promotion"
SET
name = COALESCE($1,name),
description = COALESCE($2,description),
discount_rate = COALESCE($3,discount_rate),
active = COALESCE($4,active),
start_date = COALESCE($5,start_date),
end_date = COALESCE($6,end_date)
WHERE "promotion".id = $7
AND (SELECT is_admin FROM t1) = 1
RETURNING id, name, description, discount_rate, active, start_date, end_date
`

type AdminUpdatePromotionParams struct {
	Name         null.String `json:"name"`
	Description  null.String `json:"description"`
	DiscountRate null.Int    `json:"discount_rate"`
	Active       null.Bool   `json:"active"`
	StartDate    null.Time   `json:"start_date"`
	EndDate      null.Time   `json:"end_date"`
	ID           int64       `json:"id"`
	AdminID      int64       `json:"admin_id"`
}

func (q *Queries) AdminUpdatePromotion(ctx context.Context, arg AdminUpdatePromotionParams) (Promotion, error) {
	row := q.db.QueryRow(ctx, adminUpdatePromotion,
		arg.Name,
		arg.Description,
		arg.DiscountRate,
		arg.Active,
		arg.StartDate,
		arg.EndDate,
		arg.ID,
		arg.AdminID,
	)
	var i Promotion
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DiscountRate,
		&i.Active,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const createPromotion = `-- name: CreatePromotion :one
INSERT INTO "promotion" (
  name,
  description,
  discount_rate,
  active,
  start_date,
  end_date
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, name, description, discount_rate, active, start_date, end_date
`

type CreatePromotionParams struct {
	Name         string    `json:"name"`
	Description  string    `json:"description"`
	DiscountRate int64     `json:"discount_rate"`
	Active       bool      `json:"active"`
	StartDate    time.Time `json:"start_date"`
	EndDate      time.Time `json:"end_date"`
}

func (q *Queries) CreatePromotion(ctx context.Context, arg CreatePromotionParams) (Promotion, error) {
	row := q.db.QueryRow(ctx, createPromotion,
		arg.Name,
		arg.Description,
		arg.DiscountRate,
		arg.Active,
		arg.StartDate,
		arg.EndDate,
	)
	var i Promotion
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DiscountRate,
		&i.Active,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const deletePromotion = `-- name: DeletePromotion :exec
DELETE FROM "promotion"
WHERE id = $1
`

func (q *Queries) DeletePromotion(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePromotion, id)
	return err
}

const getPromotion = `-- name: GetPromotion :one
SELECT id, name, description, discount_rate, active, start_date, end_date FROM "promotion"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPromotion(ctx context.Context, id int64) (Promotion, error) {
	row := q.db.QueryRow(ctx, getPromotion, id)
	var i Promotion
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DiscountRate,
		&i.Active,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const listPromotions = `-- name: ListPromotions :many
SELECT id, name, description, discount_rate, active, start_date, end_date FROM "promotion"
ORDER BY id
`

func (q *Queries) ListPromotions(ctx context.Context) ([]Promotion, error) {
	rows, err := q.db.Query(ctx, listPromotions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Promotion{}
	for rows.Next() {
		var i Promotion
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.DiscountRate,
			&i.Active,
			&i.StartDate,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePromotion = `-- name: UpdatePromotion :one

UPDATE "promotion"
SET
name = COALESCE($1,name),
description = COALESCE($2,description),
discount_rate = COALESCE($3,discount_rate),
active = COALESCE($4,active),
start_date = COALESCE($5,start_date),
end_date = COALESCE($6,end_date)
WHERE id = $7
RETURNING id, name, description, discount_rate, active, start_date, end_date
`

type UpdatePromotionParams struct {
	Name         null.String `json:"name"`
	Description  null.String `json:"description"`
	DiscountRate null.Int    `json:"discount_rate"`
	Active       null.Bool   `json:"active"`
	StartDate    null.Time   `json:"start_date"`
	EndDate      null.Time   `json:"end_date"`
	ID           int64       `json:"id"`
}

// LIMIT $1
// OFFSET $2;
func (q *Queries) UpdatePromotion(ctx context.Context, arg UpdatePromotionParams) (Promotion, error) {
	row := q.db.QueryRow(ctx, updatePromotion,
		arg.Name,
		arg.Description,
		arg.DiscountRate,
		arg.Active,
		arg.StartDate,
		arg.EndDate,
		arg.ID,
	)
	var i Promotion
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DiscountRate,
		&i.Active,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}
