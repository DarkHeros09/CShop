// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: product_category.sql

package db

import (
	"context"
	"database/sql"
)

const createProductCategory = `-- name: CreateProductCategory :one
INSERT INTO "product_category" (
  parent_category_id,
  category_name
) VALUES (
  $1, $2
)
RETURNING id, parent_category_id, category_name
`

type CreateProductCategoryParams struct {
	ParentCategoryID sql.NullInt64 `json:"parent_category_id"`
	CategoryName     string        `json:"category_name"`
}

func (q *Queries) CreateProductCategory(ctx context.Context, arg CreateProductCategoryParams) (ProductCategory, error) {
	row := q.db.QueryRowContext(ctx, createProductCategory, arg.ParentCategoryID, arg.CategoryName)
	var i ProductCategory
	err := row.Scan(&i.ID, &i.ParentCategoryID, &i.CategoryName)
	return i, err
}

const deleteProductCategory = `-- name: DeleteProductCategory :exec
DELETE FROM "product_category"
WHERE id = $1
AND ( parent_category_id is NULL OR parent_category_id = $2 )
`

type DeleteProductCategoryParams struct {
	ID               int64         `json:"id"`
	ParentCategoryID sql.NullInt64 `json:"parent_category_id"`
}

func (q *Queries) DeleteProductCategory(ctx context.Context, arg DeleteProductCategoryParams) error {
	_, err := q.db.ExecContext(ctx, deleteProductCategory, arg.ID, arg.ParentCategoryID)
	return err
}

const getProductCategory = `-- name: GetProductCategory :one
SELECT id, parent_category_id, category_name FROM "product_category"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProductCategory(ctx context.Context, id int64) (ProductCategory, error) {
	row := q.db.QueryRowContext(ctx, getProductCategory, id)
	var i ProductCategory
	err := row.Scan(&i.ID, &i.ParentCategoryID, &i.CategoryName)
	return i, err
}

const getProductCategoryByParent = `-- name: GetProductCategoryByParent :one
SELECT id, parent_category_id, category_name FROM "product_category"
WHERE id = $1
And parent_category_id = $2
LIMIT 1
`

type GetProductCategoryByParentParams struct {
	ID               int64         `json:"id"`
	ParentCategoryID sql.NullInt64 `json:"parent_category_id"`
}

func (q *Queries) GetProductCategoryByParent(ctx context.Context, arg GetProductCategoryByParentParams) (ProductCategory, error) {
	row := q.db.QueryRowContext(ctx, getProductCategoryByParent, arg.ID, arg.ParentCategoryID)
	var i ProductCategory
	err := row.Scan(&i.ID, &i.ParentCategoryID, &i.CategoryName)
	return i, err
}

const listProductCategories = `-- name: ListProductCategories :many
SELECT id, parent_category_id, category_name FROM "product_category"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListProductCategoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProductCategories(ctx context.Context, arg ListProductCategoriesParams) ([]ProductCategory, error) {
	rows, err := q.db.QueryContext(ctx, listProductCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductCategory{}
	for rows.Next() {
		var i ProductCategory
		if err := rows.Scan(&i.ID, &i.ParentCategoryID, &i.CategoryName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductCategoriesByParent = `-- name: ListProductCategoriesByParent :many
SELECT id, parent_category_id, category_name FROM "product_category"
WHERE parent_category_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListProductCategoriesByParentParams struct {
	ParentCategoryID sql.NullInt64 `json:"parent_category_id"`
	Limit            int32         `json:"limit"`
	Offset           int32         `json:"offset"`
}

func (q *Queries) ListProductCategoriesByParent(ctx context.Context, arg ListProductCategoriesByParentParams) ([]ProductCategory, error) {
	rows, err := q.db.QueryContext(ctx, listProductCategoriesByParent, arg.ParentCategoryID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductCategory{}
	for rows.Next() {
		var i ProductCategory
		if err := rows.Scan(&i.ID, &i.ParentCategoryID, &i.CategoryName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductCategory = `-- name: UpdateProductCategory :one
UPDATE "product_category"
SET category_name = $1
WHERE id = $2
And
( parent_category_id is NULL OR parent_category_id = $3 )
RETURNING id, parent_category_id, category_name
`

type UpdateProductCategoryParams struct {
	CategoryName     string        `json:"category_name"`
	ID               int64         `json:"id"`
	ParentCategoryID sql.NullInt64 `json:"parent_category_id"`
}

func (q *Queries) UpdateProductCategory(ctx context.Context, arg UpdateProductCategoryParams) (ProductCategory, error) {
	row := q.db.QueryRowContext(ctx, updateProductCategory, arg.CategoryName, arg.ID, arg.ParentCategoryID)
	var i ProductCategory
	err := row.Scan(&i.ID, &i.ParentCategoryID, &i.CategoryName)
	return i, err
}
