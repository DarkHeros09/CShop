// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reset_passwords.sql

package db

import (
	"context"
)

const createResetPassword = `-- name: CreateResetPassword :one
INSERT INTO "reset_passwords" (
    user_id,
    email,
    secret_code
) VALUES (
    $1, $2, $3
) RETURNING id, user_id, email, secret_code, is_used, created_at, expired_at
`

type CreateResetPasswordParams struct {
	UserID     int64  `json:"user_id"`
	Email      string `json:"email"`
	SecretCode string `json:"secret_code"`
}

func (q *Queries) CreateResetPassword(ctx context.Context, arg CreateResetPasswordParams) (ResetPassword, error) {
	row := q.db.QueryRow(ctx, createResetPassword, arg.UserID, arg.Email, arg.SecretCode)
	var i ResetPassword
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const getResetPasswordUserIDByID = `-- name: GetResetPasswordUserIDByID :one
SELECT user_id FROM "reset_passwords"
WHERE
    id = $1
    AND secret_code = $2
    AND is_used = FALSE
    AND expired_at > now()
LIMIT 1
`

type GetResetPasswordUserIDByIDParams struct {
	ID         int64  `json:"id"`
	SecretCode string `json:"secret_code"`
}

func (q *Queries) GetResetPasswordUserIDByID(ctx context.Context, arg GetResetPasswordUserIDByIDParams) (int64, error) {
	row := q.db.QueryRow(ctx, getResetPasswordUserIDByID, arg.ID, arg.SecretCode)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const updateResetPassword = `-- name: UpdateResetPassword :one
UPDATE "reset_passwords"
SET
    is_used = TRUE
WHERE
    id = $1
    AND secret_code = $2
    AND is_used = FALSE
    AND expired_at > now()
RETURNING id, user_id, email, secret_code, is_used, created_at, expired_at
`

type UpdateResetPasswordParams struct {
	ID         int64  `json:"id"`
	SecretCode string `json:"secret_code"`
}

func (q *Queries) UpdateResetPassword(ctx context.Context, arg UpdateResetPasswordParams) (ResetPassword, error) {
	row := q.db.QueryRow(ctx, updateResetPassword, arg.ID, arg.SecretCode)
	var i ResetPassword
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}
