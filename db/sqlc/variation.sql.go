// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: variation.sql

package db

import (
	"context"

	"github.com/guregu/null"
)

const createVariation = `-- name: CreateVariation :one
INSERT INTO "variation" (
  category_id,
  name
) VALUES (
  $1, $2
)
RETURNING id, category_id, name
`

type CreateVariationParams struct {
	CategoryID int64  `json:"category_id"`
	Name       string `json:"name"`
}

func (q *Queries) CreateVariation(ctx context.Context, arg CreateVariationParams) (Variation, error) {
	row := q.db.QueryRow(ctx, createVariation, arg.CategoryID, arg.Name)
	var i Variation
	err := row.Scan(&i.ID, &i.CategoryID, &i.Name)
	return i, err
}

const deleteVariation = `-- name: DeleteVariation :exec
DELETE FROM "variation"
WHERE id = $1
`

func (q *Queries) DeleteVariation(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteVariation, id)
	return err
}

const getVariation = `-- name: GetVariation :one
SELECT id, category_id, name FROM "variation"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetVariation(ctx context.Context, id int64) (Variation, error) {
	row := q.db.QueryRow(ctx, getVariation, id)
	var i Variation
	err := row.Scan(&i.ID, &i.CategoryID, &i.Name)
	return i, err
}

const listVariations = `-- name: ListVariations :many
SELECT id, category_id, name FROM "variation"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListVariationsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListVariations(ctx context.Context, arg ListVariationsParams) ([]Variation, error) {
	rows, err := q.db.Query(ctx, listVariations, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Variation{}
	for rows.Next() {
		var i Variation
		if err := rows.Scan(&i.ID, &i.CategoryID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVariation = `-- name: UpdateVariation :one
UPDATE "variation"
SET
name = COALESCE($1,name),
category_id = COALESCE($2,category_id)
WHERE id = $3
RETURNING id, category_id, name
`

type UpdateVariationParams struct {
	Name       null.String `json:"name"`
	CategoryID null.Int    `json:"category_id"`
	ID         int64       `json:"id"`
}

func (q *Queries) UpdateVariation(ctx context.Context, arg UpdateVariationParams) (Variation, error) {
	row := q.db.QueryRow(ctx, updateVariation, arg.Name, arg.CategoryID, arg.ID)
	var i Variation
	err := row.Scan(&i.ID, &i.CategoryID, &i.Name)
	return i, err
}
