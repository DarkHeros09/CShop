// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product_size.sql

package db

import (
	"context"

	null "github.com/guregu/null/v5"
)

const adminCreateProductSize = `-- name: AdminCreateProductSize :one
With t1 AS (
SELECT 1 AS is_admin
    FROM "admin"
    WHERE "admin".id = $4
    AND active = TRUE
    )
INSERT INTO "product_size" (
 product_item_id,
  size_value,
  qty
)
SELECT 
$1, 
$2, 
$3 FROM t1
WHERE is_admin=1
RETURNING id, product_item_id, size_value, qty
`

type AdminCreateProductSizeParams struct {
	ProductItemID int64  `json:"product_item_id"`
	SizeValue     string `json:"size_value"`
	Qty           int32  `json:"qty"`
	AdminID       int64  `json:"admin_id"`
}

func (q *Queries) AdminCreateProductSize(ctx context.Context, arg AdminCreateProductSizeParams) (ProductSize, error) {
	row := q.db.QueryRow(ctx, adminCreateProductSize,
		arg.ProductItemID,
		arg.SizeValue,
		arg.Qty,
		arg.AdminID,
	)
	var i ProductSize
	err := row.Scan(
		&i.ID,
		&i.ProductItemID,
		&i.SizeValue,
		&i.Qty,
	)
	return i, err
}

const adminUpdateProductSize = `-- name: AdminUpdateProductSize :one
With t1 AS (
SELECT 1 AS is_admin
    FROM "admin"
    WHERE "admin".id = $5
    AND active = TRUE
    )
UPDATE "product_size"
SET 
size_value = COALESCE($1,size_value),
qty = COALESCE($2,qty)
WHERE "product_size".id = $3
AND product_item_id = $4
AND (SELECT is_admin FROM t1) = 1
RETURNING id, product_item_id, size_value, qty
`

type AdminUpdateProductSizeParams struct {
	SizeValue     null.String `json:"size_value"`
	Qty           null.Int    `json:"qty"`
	ID            int64       `json:"id"`
	ProductItemID int64       `json:"product_item_id"`
	AdminID       int64       `json:"admin_id"`
}

func (q *Queries) AdminUpdateProductSize(ctx context.Context, arg AdminUpdateProductSizeParams) (ProductSize, error) {
	row := q.db.QueryRow(ctx, adminUpdateProductSize,
		arg.SizeValue,
		arg.Qty,
		arg.ID,
		arg.ProductItemID,
		arg.AdminID,
	)
	var i ProductSize
	err := row.Scan(
		&i.ID,
		&i.ProductItemID,
		&i.SizeValue,
		&i.Qty,
	)
	return i, err
}

const createProductSize = `-- name: CreateProductSize :one
INSERT INTO "product_size" (
  product_item_id,
  size_value,
  qty
) VALUES (
  $1, $2, $3
)
RETURNING id, product_item_id, size_value, qty
`

type CreateProductSizeParams struct {
	ProductItemID int64  `json:"product_item_id"`
	SizeValue     string `json:"size_value"`
	Qty           int32  `json:"qty"`
}

func (q *Queries) CreateProductSize(ctx context.Context, arg CreateProductSizeParams) (ProductSize, error) {
	row := q.db.QueryRow(ctx, createProductSize, arg.ProductItemID, arg.SizeValue, arg.Qty)
	var i ProductSize
	err := row.Scan(
		&i.ID,
		&i.ProductItemID,
		&i.SizeValue,
		&i.Qty,
	)
	return i, err
}

const deleteProductSize = `-- name: DeleteProductSize :exec
DELETE FROM "product_size"
WHERE id = $1
`

func (q *Queries) DeleteProductSize(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProductSize, id)
	return err
}

const deleteProductSizeByProductItemID = `-- name: DeleteProductSizeByProductItemID :exec
DELETE FROM "product_size"
WHERE product_item_id = $1
`

func (q *Queries) DeleteProductSizeByProductItemID(ctx context.Context, productItemID int64) error {
	_, err := q.db.Exec(ctx, deleteProductSizeByProductItemID, productItemID)
	return err
}

const getProductItemSizeForUpdate = `-- name: GetProductItemSizeForUpdate :one
SELECT id, product_item_id, size_value, qty FROM "product_size"
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetProductItemSizeForUpdate(ctx context.Context, id int64) (ProductSize, error) {
	row := q.db.QueryRow(ctx, getProductItemSizeForUpdate, id)
	var i ProductSize
	err := row.Scan(
		&i.ID,
		&i.ProductItemID,
		&i.SizeValue,
		&i.Qty,
	)
	return i, err
}

const getProductSize = `-- name: GetProductSize :one
SELECT id, product_item_id, size_value, qty FROM "product_size"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProductSize(ctx context.Context, id int64) (ProductSize, error) {
	row := q.db.QueryRow(ctx, getProductSize, id)
	var i ProductSize
	err := row.Scan(
		&i.ID,
		&i.ProductItemID,
		&i.SizeValue,
		&i.Qty,
	)
	return i, err
}

const listProductSizes = `-- name: ListProductSizes :many
SELECT id, product_item_id, size_value, qty FROM "product_size"
ORDER BY id
`

func (q *Queries) ListProductSizes(ctx context.Context) ([]ProductSize, error) {
	rows, err := q.db.Query(ctx, listProductSizes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductSize{}
	for rows.Next() {
		var i ProductSize
		if err := rows.Scan(
			&i.ID,
			&i.ProductItemID,
			&i.SizeValue,
			&i.Qty,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductSizesByIDs = `-- name: ListProductSizesByIDs :many
SELECT id, product_item_id, size_value, qty FROM "product_size" AS ps
WHERE ps.id = ANY($1::bigint[])
`

// JOIN "shopping_cart_item" AS sci ON sci.size_id = ps.product_item_id
func (q *Queries) ListProductSizesByIDs(ctx context.Context, sizesIds []int64) ([]ProductSize, error) {
	rows, err := q.db.Query(ctx, listProductSizesByIDs, sizesIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductSize{}
	for rows.Next() {
		var i ProductSize
		if err := rows.Scan(
			&i.ID,
			&i.ProductItemID,
			&i.SizeValue,
			&i.Qty,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductSizesByProductItemID = `-- name: ListProductSizesByProductItemID :many
SELECT id, product_item_id, size_value, qty FROM "product_size"
WHERE product_item_id = $1
`

func (q *Queries) ListProductSizesByProductItemID(ctx context.Context, productItemID int64) ([]ProductSize, error) {
	rows, err := q.db.Query(ctx, listProductSizesByProductItemID, productItemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductSize{}
	for rows.Next() {
		var i ProductSize
		if err := rows.Scan(
			&i.ID,
			&i.ProductItemID,
			&i.SizeValue,
			&i.Qty,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductSize = `-- name: UpdateProductSize :one
UPDATE "product_size"
SET 
size_value = COALESCE($1,size_value),
qty = COALESCE($2,qty)
WHERE id = $3
AND product_item_id = $4
RETURNING id, product_item_id, size_value, qty
`

type UpdateProductSizeParams struct {
	SizeValue     null.String `json:"size_value"`
	Qty           null.Int    `json:"qty"`
	ID            int64       `json:"id"`
	ProductItemID int64       `json:"product_item_id"`
}

func (q *Queries) UpdateProductSize(ctx context.Context, arg UpdateProductSizeParams) (ProductSize, error) {
	row := q.db.QueryRow(ctx, updateProductSize,
		arg.SizeValue,
		arg.Qty,
		arg.ID,
		arg.ProductItemID,
	)
	var i ProductSize
	err := row.Scan(
		&i.ID,
		&i.ProductItemID,
		&i.SizeValue,
		&i.Qty,
	)
	return i, err
}
