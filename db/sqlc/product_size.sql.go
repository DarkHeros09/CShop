// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product_size.sql

package db

import (
	"context"

	null "github.com/guregu/null/v5"
)

const adminCreateProductSize = `-- name: AdminCreateProductSize :one
With t1 AS (
SELECT 1 AS is_admin
    FROM "admin"
    WHERE "admin".id = $2
    AND active = TRUE
    )
INSERT INTO "product_size" (
size_value
)
SELECT $1 FROM t1
WHERE is_admin=1
RETURNING id, size_value
`

type AdminCreateProductSizeParams struct {
	SizeValue string `json:"size_value"`
	AdminID   int64  `json:"admin_id"`
}

func (q *Queries) AdminCreateProductSize(ctx context.Context, arg AdminCreateProductSizeParams) (ProductSize, error) {
	row := q.db.QueryRow(ctx, adminCreateProductSize, arg.SizeValue, arg.AdminID)
	var i ProductSize
	err := row.Scan(&i.ID, &i.SizeValue)
	return i, err
}

const adminUpdateProductSize = `-- name: AdminUpdateProductSize :one
With t1 AS (
SELECT 1 AS is_admin
    FROM "admin"
    WHERE "admin".id = $3
    AND active = TRUE
    )
UPDATE "product_size"
SET 
size_value = COALESCE($1,size_value)
WHERE "product_size".id = $2
AND (SELECT is_admin FROM t1) = 1
RETURNING id, size_value
`

type AdminUpdateProductSizeParams struct {
	SizeValue null.String `json:"size_value"`
	ID        int64       `json:"id"`
	AdminID   int64       `json:"admin_id"`
}

func (q *Queries) AdminUpdateProductSize(ctx context.Context, arg AdminUpdateProductSizeParams) (ProductSize, error) {
	row := q.db.QueryRow(ctx, adminUpdateProductSize, arg.SizeValue, arg.ID, arg.AdminID)
	var i ProductSize
	err := row.Scan(&i.ID, &i.SizeValue)
	return i, err
}

const createProductSize = `-- name: CreateProductSize :one
INSERT INTO "product_size" (
  size_value
) VALUES (
  $1
)
RETURNING id, size_value
`

func (q *Queries) CreateProductSize(ctx context.Context, sizeValue string) (ProductSize, error) {
	row := q.db.QueryRow(ctx, createProductSize, sizeValue)
	var i ProductSize
	err := row.Scan(&i.ID, &i.SizeValue)
	return i, err
}

const deleteProductSize = `-- name: DeleteProductSize :exec
DELETE FROM "product_size"
WHERE id = $1
`

func (q *Queries) DeleteProductSize(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProductSize, id)
	return err
}

const getProductSize = `-- name: GetProductSize :one
SELECT id, size_value FROM "product_size"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProductSize(ctx context.Context, id int64) (ProductSize, error) {
	row := q.db.QueryRow(ctx, getProductSize, id)
	var i ProductSize
	err := row.Scan(&i.ID, &i.SizeValue)
	return i, err
}

const listProductSizes = `-- name: ListProductSizes :many
SELECT id, size_value FROM "product_size"
ORDER BY id
`

func (q *Queries) ListProductSizes(ctx context.Context) ([]ProductSize, error) {
	rows, err := q.db.Query(ctx, listProductSizes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductSize{}
	for rows.Next() {
		var i ProductSize
		if err := rows.Scan(&i.ID, &i.SizeValue); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductSize = `-- name: UpdateProductSize :one
UPDATE "product_size"
SET 
size_value = COALESCE($1,size_value)
WHERE id = $2
RETURNING id, size_value
`

type UpdateProductSizeParams struct {
	SizeValue null.String `json:"size_value"`
	ID        int64       `json:"id"`
}

func (q *Queries) UpdateProductSize(ctx context.Context, arg UpdateProductSizeParams) (ProductSize, error) {
	row := q.db.QueryRow(ctx, updateProductSize, arg.SizeValue, arg.ID)
	var i ProductSize
	err := row.Scan(&i.ID, &i.SizeValue)
	return i, err
}
