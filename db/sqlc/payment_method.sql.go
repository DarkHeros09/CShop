// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: payment_method.sql

package db

import (
	"context"
	"database/sql"
)

const createPaymentMethod = `-- name: CreatePaymentMethod :one
INSERT INTO "payment_method" (
  user_id,
  payment_type_id,
  provider,
  is_default
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, user_id, payment_type_id, provider, is_default
`

type CreatePaymentMethodParams struct {
	UserID        int64  `json:"user_id"`
	PaymentTypeID int32  `json:"payment_type_id"`
	Provider      string `json:"provider"`
	IsDefault     bool   `json:"is_default"`
}

func (q *Queries) CreatePaymentMethod(ctx context.Context, arg CreatePaymentMethodParams) (PaymentMethod, error) {
	row := q.db.QueryRowContext(ctx, createPaymentMethod,
		arg.UserID,
		arg.PaymentTypeID,
		arg.Provider,
		arg.IsDefault,
	)
	var i PaymentMethod
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PaymentTypeID,
		&i.Provider,
		&i.IsDefault,
	)
	return i, err
}

const deletePaymentMethod = `-- name: DeletePaymentMethod :exec
DELETE FROM "payment_method"
WHERE id = $1
`

func (q *Queries) DeletePaymentMethod(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePaymentMethod, id)
	return err
}

const getPaymentMethod = `-- name: GetPaymentMethod :one
SELECT id, user_id, payment_type_id, provider, is_default FROM "payment_method"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPaymentMethod(ctx context.Context, id int64) (PaymentMethod, error) {
	row := q.db.QueryRowContext(ctx, getPaymentMethod, id)
	var i PaymentMethod
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PaymentTypeID,
		&i.Provider,
		&i.IsDefault,
	)
	return i, err
}

const listPaymentMethods = `-- name: ListPaymentMethods :many
SELECT id, user_id, payment_type_id, provider, is_default FROM "payment_method"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListPaymentMethodsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPaymentMethods(ctx context.Context, arg ListPaymentMethodsParams) ([]PaymentMethod, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentMethods, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PaymentMethod{}
	for rows.Next() {
		var i PaymentMethod
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PaymentTypeID,
			&i.Provider,
			&i.IsDefault,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentMethod = `-- name: UpdatePaymentMethod :one
UPDATE "payment_method"
SET 
user_id = COALESCE($1,user_id),
payment_type_id = COALESCE($2,payment_type_id),
provider = COALESCE($3,provider),
is_default = COALESCE($4,is_default)
WHERE id = $5
RETURNING id, user_id, payment_type_id, provider, is_default
`

type UpdatePaymentMethodParams struct {
	UserID        sql.NullInt64  `json:"user_id"`
	PaymentTypeID sql.NullInt32  `json:"payment_type_id"`
	Provider      sql.NullString `json:"provider"`
	IsDefault     sql.NullBool   `json:"is_default"`
	ID            int64          `json:"id"`
}

func (q *Queries) UpdatePaymentMethod(ctx context.Context, arg UpdatePaymentMethodParams) (PaymentMethod, error) {
	row := q.db.QueryRowContext(ctx, updatePaymentMethod,
		arg.UserID,
		arg.PaymentTypeID,
		arg.Provider,
		arg.IsDefault,
		arg.ID,
	)
	var i PaymentMethod
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PaymentTypeID,
		&i.Provider,
		&i.IsDefault,
	)
	return i, err
}
