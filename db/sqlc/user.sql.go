// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
	"time"

	null "github.com/guregu/null/v5"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
  username,
  email,
  password,
  -- telephone,
  is_blocked,
  default_payment
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, username, email, password, is_blocked, is_email_verified, default_payment, created_at, updated_at
`

type CreateUserParams struct {
	Username       string   `json:"username"`
	Email          string   `json:"email"`
	Password       string   `json:"password"`
	IsBlocked      bool     `json:"is_blocked"`
	DefaultPayment null.Int `json:"default_payment"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.IsBlocked,
		arg.DefaultPayment,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.IsBlocked,
		&i.IsEmailVerified,
		&i.DefaultPayment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserWithCartAndWishList = `-- name: CreateUserWithCartAndWishList :one
WITH t1 AS(
INSERT INTO "user" (
  username,
  email,
  password,
  -- telephone,
  is_blocked,
  default_payment
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, username, email, password, is_blocked, is_email_verified, default_payment, created_at, updated_at
),
t2 AS(
  INSERT INTO "shopping_cart" (
  user_id
) VALUES ((Select id from t1))
  RETURNING id
),
t3 AS(
  INSERT INTO "wish_list" (
    user_id
) VALUES ((Select id from t1))
  RETURNING id
)

SELECT t1.id, t1.username, t1.email, t1.password, t1.is_blocked, t1.is_email_verified, t1.default_payment, t1.created_at, t1.updated_at, t2.id AS shopping_cart_id, t3.id AS wish_list_id FROM t1, t2, t3
`

type CreateUserWithCartAndWishListParams struct {
	Username       string   `json:"username"`
	Email          string   `json:"email"`
	Password       string   `json:"password"`
	IsBlocked      bool     `json:"is_blocked"`
	DefaultPayment null.Int `json:"default_payment"`
}

type CreateUserWithCartAndWishListRow struct {
	ID              int64     `json:"id"`
	Username        string    `json:"username"`
	Email           string    `json:"email"`
	Password        string    `json:"password"`
	IsBlocked       bool      `json:"is_blocked"`
	IsEmailVerified bool      `json:"is_email_verified"`
	DefaultPayment  null.Int  `json:"default_payment"`
	CreatedAt       time.Time `json:"created_at"`
	UpdatedAt       time.Time `json:"updated_at"`
	ShoppingCartID  int64     `json:"shopping_cart_id"`
	WishListID      int64     `json:"wish_list_id"`
}

func (q *Queries) CreateUserWithCartAndWishList(ctx context.Context, arg CreateUserWithCartAndWishListParams) (CreateUserWithCartAndWishListRow, error) {
	row := q.db.QueryRow(ctx, createUserWithCartAndWishList,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.IsBlocked,
		arg.DefaultPayment,
	)
	var i CreateUserWithCartAndWishListRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.IsBlocked,
		&i.IsEmailVerified,
		&i.DefaultPayment,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ShoppingCartID,
		&i.WishListID,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM "user"
WHERE id = $1
RETURNING id, username, email, password, is_blocked, is_email_verified, default_payment, created_at, updated_at
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.IsBlocked,
		&i.IsEmailVerified,
		&i.DefaultPayment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserByEmailNotVerified = `-- name: DeleteUserByEmailNotVerified :exec
DELETE FROM "user"
WHERE email = $1
AND is_email_verified = false
`

func (q *Queries) DeleteUserByEmailNotVerified(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, deleteUserByEmailNotVerified, email)
	return err
}

const getActiveUsersCount = `-- name: GetActiveUsersCount :one
With t1 AS (
SELECT 1 AS is_admin
    FROM "admin"
    WHERE "admin".id = $1
    AND active = TRUE
    )
SELECT COUNT(id) FROM "user"
WHERE EXISTS(SELECT is_admin FROM t1)
AND is_blocked = false
`

func (q *Queries) GetActiveUsersCount(ctx context.Context, adminID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getActiveUsersCount, adminID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTotalUsersCount = `-- name: GetTotalUsersCount :one
With t1 AS (
SELECT 1 AS is_admin
    FROM "admin"
    WHERE "admin".id = $1
    AND active = TRUE
    )
SELECT COUNT(id) FROM "user"
WHERE EXISTS(SELECT is_admin FROM t1)
`

func (q *Queries) GetTotalUsersCount(ctx context.Context, adminID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalUsersCount, adminID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, password, is_blocked, is_email_verified, default_payment, created_at, updated_at FROM "user"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.IsBlocked,
		&i.IsEmailVerified,
		&i.DefaultPayment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT u.id, u.username, u.email, u.password, u.is_blocked, u.is_email_verified, u.default_payment, u.created_at, u.updated_at, sc.id AS shop_cart_id, wl.id AS wish_list_id FROM "user" AS u
LEFT JOIN shopping_cart AS sc ON sc.user_id = u.id
LEFT JOIN wish_list AS wl ON wl.user_id = u.id
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID              int64     `json:"id"`
	Username        string    `json:"username"`
	Email           string    `json:"email"`
	Password        string    `json:"password"`
	IsBlocked       bool      `json:"is_blocked"`
	IsEmailVerified bool      `json:"is_email_verified"`
	DefaultPayment  null.Int  `json:"default_payment"`
	CreatedAt       time.Time `json:"created_at"`
	UpdatedAt       time.Time `json:"updated_at"`
	ShopCartID      null.Int  `json:"shop_cart_id"`
	WishListID      null.Int  `json:"wish_list_id"`
}

// SELECT * FROM "user"
// WHERE email = $1 LIMIT 1;
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.IsBlocked,
		&i.IsEmailVerified,
		&i.DefaultPayment,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ShopCartID,
		&i.WishListID,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, password, is_blocked, is_email_verified, default_payment, created_at, updated_at FROM "user"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.IsBlocked,
			&i.IsEmailVerified,
			&i.DefaultPayment,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user"
SET 
username = COALESCE($1,username),
email = COALESCE($2,email),
password = COALESCE($3,password),
default_payment = COALESCE($4,default_payment),
updated_at = now()
WHERE id = $5
RETURNING id, username, email, password, is_blocked, is_email_verified, default_payment, created_at, updated_at
`

type UpdateUserParams struct {
	Username       null.String `json:"username"`
	Email          null.String `json:"email"`
	Password       null.String `json:"password"`
	DefaultPayment null.Int    `json:"default_payment"`
	ID             int64       `json:"id"`
}

// telephone = COALESCE(sqlc.narg(telephone),telephone),
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.DefaultPayment,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.IsBlocked,
		&i.IsEmailVerified,
		&i.DefaultPayment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserEmailisVerifiedForTest = `-- name: UpdateUserEmailisVerifiedForTest :exec
UPDATE "user"
SET is_email_verified = TRUE
WHERE id = $1
`

func (q *Queries) UpdateUserEmailisVerifiedForTest(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateUserEmailisVerifiedForTest, id)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE "user"
SET 
password = $1,
updated_at = now()
WHERE id = $2
AND is_email_verified = TRUE
AND is_blocked = FALSE
AND password = $3
AND password != $1
RETURNING id, username, email, password, is_blocked, is_email_verified, default_payment, created_at, updated_at
`

type UpdateUserPasswordParams struct {
	Newpassword string `json:"newpassword"`
	ID          int64  `json:"id"`
	Oldpassword string `json:"oldpassword"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserPassword, arg.Newpassword, arg.ID, arg.Oldpassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.IsBlocked,
		&i.IsEmailVerified,
		&i.DefaultPayment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
