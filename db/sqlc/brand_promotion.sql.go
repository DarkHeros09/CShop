// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: brand_promotion.sql

package db

import (
	"context"

	"github.com/guregu/null"
)

const createBrandPromotion = `-- name: CreateBrandPromotion :one
INSERT INTO "brand_promotion" (
  brand_id,
  promotion_id,
  brand_promotion_image,
  active
) VALUES (
  $1, $2, $3, $4
) ON CONFLICT(brand_id) DO UPDATE SET 
promotion_id = EXCLUDED.promotion_id,
brand_promotion_image = EXCLUDED.brand_promotion_image,
active = EXCLUDED.active
RETURNING brand_id, promotion_id, brand_promotion_image, active
`

type CreateBrandPromotionParams struct {
	BrandID             int64       `json:"brand_id"`
	PromotionID         int64       `json:"promotion_id"`
	BrandPromotionImage null.String `json:"brand_promotion_image"`
	Active              bool        `json:"active"`
}

func (q *Queries) CreateBrandPromotion(ctx context.Context, arg CreateBrandPromotionParams) (BrandPromotion, error) {
	row := q.db.QueryRow(ctx, createBrandPromotion,
		arg.BrandID,
		arg.PromotionID,
		arg.BrandPromotionImage,
		arg.Active,
	)
	var i BrandPromotion
	err := row.Scan(
		&i.BrandID,
		&i.PromotionID,
		&i.BrandPromotionImage,
		&i.Active,
	)
	return i, err
}

const deleteBrandPromotion = `-- name: DeleteBrandPromotion :exec
DELETE FROM "brand_promotion"
WHERE brand_id = $1
AND promotion_id = $2
RETURNING brand_id, promotion_id, brand_promotion_image, active
`

type DeleteBrandPromotionParams struct {
	BrandID     int64 `json:"brand_id"`
	PromotionID int64 `json:"promotion_id"`
}

func (q *Queries) DeleteBrandPromotion(ctx context.Context, arg DeleteBrandPromotionParams) error {
	_, err := q.db.Exec(ctx, deleteBrandPromotion, arg.BrandID, arg.PromotionID)
	return err
}

const getBrandPromotion = `-- name: GetBrandPromotion :one
SELECT brand_id, promotion_id, brand_promotion_image, active FROM "brand_promotion"
WHERE brand_id = $1
AND promotion_id = $2 
LIMIT 1
`

type GetBrandPromotionParams struct {
	BrandID     int64 `json:"brand_id"`
	PromotionID int64 `json:"promotion_id"`
}

func (q *Queries) GetBrandPromotion(ctx context.Context, arg GetBrandPromotionParams) (BrandPromotion, error) {
	row := q.db.QueryRow(ctx, getBrandPromotion, arg.BrandID, arg.PromotionID)
	var i BrandPromotion
	err := row.Scan(
		&i.BrandID,
		&i.PromotionID,
		&i.BrandPromotionImage,
		&i.Active,
	)
	return i, err
}

const listBrandPromotions = `-- name: ListBrandPromotions :many
SELECT brand_id, promotion_id, brand_promotion_image, active FROM "brand_promotion"
ORDER BY brand_id
LIMIT $1
OFFSET $2
`

type ListBrandPromotionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBrandPromotions(ctx context.Context, arg ListBrandPromotionsParams) ([]BrandPromotion, error) {
	rows, err := q.db.Query(ctx, listBrandPromotions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BrandPromotion{}
	for rows.Next() {
		var i BrandPromotion
		if err := rows.Scan(
			&i.BrandID,
			&i.PromotionID,
			&i.BrandPromotionImage,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBrandPromotionsWithImages = `-- name: ListBrandPromotionsWithImages :many
SELECT brand_id, promotion_id, brand_promotion_image, active, id, brand_name, brand_image FROM "brand_promotion" AS bp
LEFT JOIN "product_brand" AS pb ON pb.id = bp.brand_id
WHERE bp.brand_promotion_image IS NOT NULL AND bp.active = true
`

type ListBrandPromotionsWithImagesRow struct {
	BrandID             int64       `json:"brand_id"`
	PromotionID         int64       `json:"promotion_id"`
	BrandPromotionImage null.String `json:"brand_promotion_image"`
	Active              bool        `json:"active"`
	ID                  null.Int    `json:"id"`
	BrandName           null.String `json:"brand_name"`
	BrandImage          null.String `json:"brand_image"`
}

func (q *Queries) ListBrandPromotionsWithImages(ctx context.Context) ([]ListBrandPromotionsWithImagesRow, error) {
	rows, err := q.db.Query(ctx, listBrandPromotionsWithImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListBrandPromotionsWithImagesRow{}
	for rows.Next() {
		var i ListBrandPromotionsWithImagesRow
		if err := rows.Scan(
			&i.BrandID,
			&i.PromotionID,
			&i.BrandPromotionImage,
			&i.Active,
			&i.ID,
			&i.BrandName,
			&i.BrandImage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBrandPromotion = `-- name: UpdateBrandPromotion :one
UPDATE "brand_promotion"
SET
brand_promotion_image = COALESCE($1,brand_promotion_image),
active = COALESCE($2,active)
WHERE brand_id = $3
AND promotion_id = $4
RETURNING brand_id, promotion_id, brand_promotion_image, active
`

type UpdateBrandPromotionParams struct {
	BrandPromotionImage null.String `json:"brand_promotion_image"`
	Active              null.Bool   `json:"active"`
	BrandID             int64       `json:"brand_id"`
	PromotionID         int64       `json:"promotion_id"`
}

func (q *Queries) UpdateBrandPromotion(ctx context.Context, arg UpdateBrandPromotionParams) (BrandPromotion, error) {
	row := q.db.QueryRow(ctx, updateBrandPromotion,
		arg.BrandPromotionImage,
		arg.Active,
		arg.BrandID,
		arg.PromotionID,
	)
	var i BrandPromotion
	err := row.Scan(
		&i.BrandID,
		&i.PromotionID,
		&i.BrandPromotionImage,
		&i.Active,
	)
	return i, err
}
