// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: brand_promotion.sql

package db

import (
	"context"

	"github.com/guregu/null"
)

const createBrandPromotion = `-- name: CreateBrandPromotion :one
INSERT INTO "brand_promotion" (
  brand_id,
  promotion_id,
  active
) VALUES (
  $1, $2, $3
) ON CONFLICT(brand_id) DO UPDATE SET 
promotion_id = EXCLUDED.promotion_id,
active = EXCLUDED.active
RETURNING brand_id, promotion_id, active
`

type CreateBrandPromotionParams struct {
	BrandID     int64 `json:"brand_id"`
	PromotionID int64 `json:"promotion_id"`
	Active      bool  `json:"active"`
}

func (q *Queries) CreateBrandPromotion(ctx context.Context, arg CreateBrandPromotionParams) (BrandPromotion, error) {
	row := q.db.QueryRow(ctx, createBrandPromotion, arg.BrandID, arg.PromotionID, arg.Active)
	var i BrandPromotion
	err := row.Scan(&i.BrandID, &i.PromotionID, &i.Active)
	return i, err
}

const deleteBrandPromotion = `-- name: DeleteBrandPromotion :exec
DELETE FROM "brand_promotion"
WHERE brand_id = $1
AND promotion_id = $2
RETURNING brand_id, promotion_id, active
`

type DeleteBrandPromotionParams struct {
	BrandID     int64 `json:"brand_id"`
	PromotionID int64 `json:"promotion_id"`
}

func (q *Queries) DeleteBrandPromotion(ctx context.Context, arg DeleteBrandPromotionParams) error {
	_, err := q.db.Exec(ctx, deleteBrandPromotion, arg.BrandID, arg.PromotionID)
	return err
}

const getBrandPromotion = `-- name: GetBrandPromotion :one
SELECT brand_id, promotion_id, active FROM "brand_promotion"
WHERE brand_id = $1
AND promotion_id = $2 
LIMIT 1
`

type GetBrandPromotionParams struct {
	BrandID     int64 `json:"brand_id"`
	PromotionID int64 `json:"promotion_id"`
}

func (q *Queries) GetBrandPromotion(ctx context.Context, arg GetBrandPromotionParams) (BrandPromotion, error) {
	row := q.db.QueryRow(ctx, getBrandPromotion, arg.BrandID, arg.PromotionID)
	var i BrandPromotion
	err := row.Scan(&i.BrandID, &i.PromotionID, &i.Active)
	return i, err
}

const listBrandPromotions = `-- name: ListBrandPromotions :many
SELECT brand_id, promotion_id, active FROM "brand_promotion"
ORDER BY brand_id
LIMIT $1
OFFSET $2
`

type ListBrandPromotionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBrandPromotions(ctx context.Context, arg ListBrandPromotionsParams) ([]BrandPromotion, error) {
	rows, err := q.db.Query(ctx, listBrandPromotions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BrandPromotion{}
	for rows.Next() {
		var i BrandPromotion
		if err := rows.Scan(&i.BrandID, &i.PromotionID, &i.Active); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBrandPromotion = `-- name: UpdateBrandPromotion :one
UPDATE "brand_promotion"
SET
active = COALESCE($1,active)
WHERE brand_id = $2
AND promotion_id = $3
RETURNING brand_id, promotion_id, active
`

type UpdateBrandPromotionParams struct {
	Active      null.Bool `json:"active"`
	BrandID     int64     `json:"brand_id"`
	PromotionID int64     `json:"promotion_id"`
}

func (q *Queries) UpdateBrandPromotion(ctx context.Context, arg UpdateBrandPromotionParams) (BrandPromotion, error) {
	row := q.db.QueryRow(ctx, updateBrandPromotion, arg.Active, arg.BrandID, arg.PromotionID)
	var i BrandPromotion
	err := row.Scan(&i.BrandID, &i.PromotionID, &i.Active)
	return i, err
}
