// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: order_status.sql

package db

import (
	"context"
	"database/sql"
)

const createOrderStatus = `-- name: CreateOrderStatus :one
INSERT INTO "order_status" (
  status
) VALUES (
  $1
)
RETURNING id, status, created_at, updated_at
`

func (q *Queries) CreateOrderStatus(ctx context.Context, status string) (OrderStatus, error) {
	row := q.db.QueryRowContext(ctx, createOrderStatus, status)
	var i OrderStatus
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrderStatus = `-- name: DeleteOrderStatus :exec
DELETE FROM "order_status"
WHERE id = $1
`

func (q *Queries) DeleteOrderStatus(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrderStatus, id)
	return err
}

const getOrderStatus = `-- name: GetOrderStatus :one
SELECT id, status, created_at, updated_at FROM "order_status"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrderStatus(ctx context.Context, id int64) (OrderStatus, error) {
	row := q.db.QueryRowContext(ctx, getOrderStatus, id)
	var i OrderStatus
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrderStatuses = `-- name: ListOrderStatuses :many
SELECT id, status, created_at, updated_at FROM "order_status"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListOrderStatusesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrderStatuses(ctx context.Context, arg ListOrderStatusesParams) ([]OrderStatus, error) {
	rows, err := q.db.QueryContext(ctx, listOrderStatuses, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderStatus{}
	for rows.Next() {
		var i OrderStatus
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE "order_status"
SET 
status = COALESCE($1,status)
WHERE id = $2
RETURNING id, status, created_at, updated_at
`

type UpdateOrderStatusParams struct {
	Status sql.NullString `json:"status"`
	ID     int64          `json:"id"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (OrderStatus, error) {
	row := q.db.QueryRowContext(ctx, updateOrderStatus, arg.Status, arg.ID)
	var i OrderStatus
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
