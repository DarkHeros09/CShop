// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: shop_order_item.sql

package db

import (
	"context"
	"time"

	"github.com/guregu/null"
)

const createShopOrderItem = `-- name: CreateShopOrderItem :one
INSERT INTO "shop_order_item" (
  product_item_id,
  order_id,
  quantity,
  price
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, product_item_id, order_id, quantity, price, created_at, updated_at
`

type CreateShopOrderItemParams struct {
	ProductItemID int64  `json:"product_item_id"`
	OrderID       int64  `json:"order_id"`
	Quantity      int32  `json:"quantity"`
	Price         string `json:"price"`
}

func (q *Queries) CreateShopOrderItem(ctx context.Context, arg CreateShopOrderItemParams) (ShopOrderItem, error) {
	row := q.db.QueryRow(ctx, createShopOrderItem,
		arg.ProductItemID,
		arg.OrderID,
		arg.Quantity,
		arg.Price,
	)
	var i ShopOrderItem
	err := row.Scan(
		&i.ID,
		&i.ProductItemID,
		&i.OrderID,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteShopOrderItem = `-- name: DeleteShopOrderItem :exec
DELETE FROM "shop_order_item"
WHERE id = $1
`

func (q *Queries) DeleteShopOrderItem(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteShopOrderItem, id)
	return err
}

const getShopOrderItem = `-- name: GetShopOrderItem :one
SELECT id, product_item_id, order_id, quantity, price, created_at, updated_at FROM "shop_order_item"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetShopOrderItem(ctx context.Context, id int64) (ShopOrderItem, error) {
	row := q.db.QueryRow(ctx, getShopOrderItem, id)
	var i ShopOrderItem
	err := row.Scan(
		&i.ID,
		&i.ProductItemID,
		&i.OrderID,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getShopOrderItemByUserIDOrderID = `-- name: GetShopOrderItemByUserIDOrderID :one
SELECT soi.id, soi.product_item_id, soi.order_id, soi.quantity, soi.price, soi.created_at, soi.updated_at, so.user_id
FROM "shop_order_item" AS soi
LEFT JOIN "shop_order" AS so ON so.id = soi.order_id
WHERE so.user_id = $1
AND soi.order_id = $2 
LIMIT 1
`

type GetShopOrderItemByUserIDOrderIDParams struct {
	UserID  int64 `json:"user_id"`
	OrderID int64 `json:"order_id"`
}

type GetShopOrderItemByUserIDOrderIDRow struct {
	ID            int64     `json:"id"`
	ProductItemID int64     `json:"product_item_id"`
	OrderID       int64     `json:"order_id"`
	Quantity      int32     `json:"quantity"`
	Price         string    `json:"price"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
	UserID        null.Int  `json:"user_id"`
}

func (q *Queries) GetShopOrderItemByUserIDOrderID(ctx context.Context, arg GetShopOrderItemByUserIDOrderIDParams) (GetShopOrderItemByUserIDOrderIDRow, error) {
	row := q.db.QueryRow(ctx, getShopOrderItemByUserIDOrderID, arg.UserID, arg.OrderID)
	var i GetShopOrderItemByUserIDOrderIDRow
	err := row.Scan(
		&i.ID,
		&i.ProductItemID,
		&i.OrderID,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const listShopOrderItems = `-- name: ListShopOrderItems :many
SELECT id, product_item_id, order_id, quantity, price, created_at, updated_at FROM "shop_order_item"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListShopOrderItemsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListShopOrderItems(ctx context.Context, arg ListShopOrderItemsParams) ([]ShopOrderItem, error) {
	rows, err := q.db.Query(ctx, listShopOrderItems, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ShopOrderItem{}
	for rows.Next() {
		var i ShopOrderItem
		if err := rows.Scan(
			&i.ID,
			&i.ProductItemID,
			&i.OrderID,
			&i.Quantity,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listShopOrderItemsByOrderID = `-- name: ListShopOrderItemsByOrderID :many
SELECT id, product_item_id, order_id, quantity, price, created_at, updated_at FROM "shop_order_item"
WHERE order_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListShopOrderItemsByOrderIDParams struct {
	OrderID int64 `json:"order_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListShopOrderItemsByOrderID(ctx context.Context, arg ListShopOrderItemsByOrderIDParams) ([]ShopOrderItem, error) {
	rows, err := q.db.Query(ctx, listShopOrderItemsByOrderID, arg.OrderID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ShopOrderItem{}
	for rows.Next() {
		var i ShopOrderItem
		if err := rows.Scan(
			&i.ID,
			&i.ProductItemID,
			&i.OrderID,
			&i.Quantity,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listShopOrderItemsByUserID = `-- name: ListShopOrderItemsByUserID :many
SELECT so.user_id, soi.id, soi.product_item_id, soi.order_id, soi.quantity, soi.price, soi.created_at, soi.updated_at 
FROM "shop_order" AS so
LEFT JOIN "shop_order_item" AS soi ON soi.order_id = so.id
WHERE so.user_id = $3
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListShopOrderItemsByUserIDParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
	UserID int64 `json:"user_id"`
}

type ListShopOrderItemsByUserIDRow struct {
	UserID        int64       `json:"user_id"`
	ID            null.Int    `json:"id"`
	ProductItemID null.Int    `json:"product_item_id"`
	OrderID       null.Int    `json:"order_id"`
	Quantity      null.Int    `json:"quantity"`
	Price         null.String `json:"price"`
	CreatedAt     null.Time   `json:"created_at"`
	UpdatedAt     null.Time   `json:"updated_at"`
}

func (q *Queries) ListShopOrderItemsByUserID(ctx context.Context, arg ListShopOrderItemsByUserIDParams) ([]ListShopOrderItemsByUserIDRow, error) {
	rows, err := q.db.Query(ctx, listShopOrderItemsByUserID, arg.Limit, arg.Offset, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListShopOrderItemsByUserIDRow{}
	for rows.Next() {
		var i ListShopOrderItemsByUserIDRow
		if err := rows.Scan(
			&i.UserID,
			&i.ID,
			&i.ProductItemID,
			&i.OrderID,
			&i.Quantity,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShopOrderItem = `-- name: UpdateShopOrderItem :one

UPDATE "shop_order_item"
SET 
product_item_id = COALESCE($1,product_item_id),
order_id = COALESCE($2,order_id),
quantity = COALESCE($3,quantity),
price = COALESCE($4,price)
WHERE id = $5
RETURNING id, product_item_id, order_id, quantity, price, created_at, updated_at
`

type UpdateShopOrderItemParams struct {
	ProductItemID null.Int    `json:"product_item_id"`
	OrderID       null.Int    `json:"order_id"`
	Quantity      null.Int    `json:"quantity"`
	Price         null.String `json:"price"`
	ID            int64       `json:"id"`
}

// -- name: ListShopOrderItemsByOrderID :many
// SELECT * FROM "shop_order_item"
// WHERE order_id = $1
// ORDER BY id;
func (q *Queries) UpdateShopOrderItem(ctx context.Context, arg UpdateShopOrderItemParams) (ShopOrderItem, error) {
	row := q.db.QueryRow(ctx, updateShopOrderItem,
		arg.ProductItemID,
		arg.OrderID,
		arg.Quantity,
		arg.Price,
		arg.ID,
	)
	var i ShopOrderItem
	err := row.Scan(
		&i.ID,
		&i.ProductItemID,
		&i.OrderID,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
