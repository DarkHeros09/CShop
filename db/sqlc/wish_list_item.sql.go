// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: wish_list_item.sql

package db

import (
	"context"

	"github.com/guregu/null"
)

const createWishListItem = `-- name: CreateWishListItem :one
INSERT INTO "wish_list_item" (
  wish_list_id,
  product_item_id
) VALUES (
  $1, $2
)
RETURNING id, wish_list_id, product_item_id, created_at, updated_at
`

type CreateWishListItemParams struct {
	WishListID    int64 `json:"wish_list_id"`
	ProductItemID int64 `json:"product_item_id"`
}

func (q *Queries) CreateWishListItem(ctx context.Context, arg CreateWishListItemParams) (WishListItem, error) {
	row := q.db.QueryRow(ctx, createWishListItem, arg.WishListID, arg.ProductItemID)
	var i WishListItem
	err := row.Scan(
		&i.ID,
		&i.WishListID,
		&i.ProductItemID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteWishListItem = `-- name: DeleteWishListItem :exec
DELETE FROM "wish_list_item"
WHERE id = $1
`

func (q *Queries) DeleteWishListItem(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteWishListItem, id)
	return err
}

const getWishListItem = `-- name: GetWishListItem :one
SELECT id, wish_list_id, product_item_id, created_at, updated_at FROM "wish_list_item"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWishListItem(ctx context.Context, id int64) (WishListItem, error) {
	row := q.db.QueryRow(ctx, getWishListItem, id)
	var i WishListItem
	err := row.Scan(
		&i.ID,
		&i.WishListID,
		&i.ProductItemID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listWishListItems = `-- name: ListWishListItems :many
SELECT id, wish_list_id, product_item_id, created_at, updated_at FROM "wish_list_item"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListWishListItemsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListWishListItems(ctx context.Context, arg ListWishListItemsParams) ([]WishListItem, error) {
	rows, err := q.db.Query(ctx, listWishListItems, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WishListItem{}
	for rows.Next() {
		var i WishListItem
		if err := rows.Scan(
			&i.ID,
			&i.WishListID,
			&i.ProductItemID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWishListItemsByCartID = `-- name: ListWishListItemsByCartID :many
SELECT id, wish_list_id, product_item_id, created_at, updated_at FROM "wish_list_item"
WHERE wish_list_id = $1
ORDER BY id
`

func (q *Queries) ListWishListItemsByCartID(ctx context.Context, wishListID int64) ([]WishListItem, error) {
	rows, err := q.db.Query(ctx, listWishListItemsByCartID, wishListID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WishListItem{}
	for rows.Next() {
		var i WishListItem
		if err := rows.Scan(
			&i.ID,
			&i.WishListID,
			&i.ProductItemID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWishListItem = `-- name: UpdateWishListItem :one
UPDATE "wish_list_item"
SET 
wish_list_id = COALESCE($1,wish_list_id),
product_item_id = COALESCE($2,product_item_id)
WHERE id = $3
RETURNING id, wish_list_id, product_item_id, created_at, updated_at
`

type UpdateWishListItemParams struct {
	WishListID    null.Int `json:"wish_list_id"`
	ProductItemID null.Int `json:"product_item_id"`
	ID            int64    `json:"id"`
}

func (q *Queries) UpdateWishListItem(ctx context.Context, arg UpdateWishListItemParams) (WishListItem, error) {
	row := q.db.QueryRow(ctx, updateWishListItem, arg.WishListID, arg.ProductItemID, arg.ID)
	var i WishListItem
	err := row.Scan(
		&i.ID,
		&i.WishListID,
		&i.ProductItemID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
