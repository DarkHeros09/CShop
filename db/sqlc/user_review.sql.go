// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user_review.sql

package db

import (
	"context"
	"database/sql"
)

const createUserReview = `-- name: CreateUserReview :one
INSERT INTO "user_review" (
  user_id,
  ordered_product_id,
  rating_value
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, ordered_product_id, rating_value, created_at, updated_at
`

type CreateUserReviewParams struct {
	UserID           int64 `json:"user_id"`
	OrderedProductID int64 `json:"ordered_product_id"`
	RatingValue      int32 `json:"rating_value"`
}

func (q *Queries) CreateUserReview(ctx context.Context, arg CreateUserReviewParams) (UserReview, error) {
	row := q.db.QueryRowContext(ctx, createUserReview, arg.UserID, arg.OrderedProductID, arg.RatingValue)
	var i UserReview
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrderedProductID,
		&i.RatingValue,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserReview = `-- name: DeleteUserReview :exec
DELETE FROM "user_review"
WHERE id = $1
`

func (q *Queries) DeleteUserReview(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserReview, id)
	return err
}

const getUserReview = `-- name: GetUserReview :one
SELECT id, user_id, ordered_product_id, rating_value, created_at, updated_at FROM "user_review"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserReview(ctx context.Context, id int64) (UserReview, error) {
	row := q.db.QueryRowContext(ctx, getUserReview, id)
	var i UserReview
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrderedProductID,
		&i.RatingValue,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUserReviews = `-- name: ListUserReviews :many
SELECT id, user_id, ordered_product_id, rating_value, created_at, updated_at FROM "user_review"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUserReviewsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUserReviews(ctx context.Context, arg ListUserReviewsParams) ([]UserReview, error) {
	rows, err := q.db.QueryContext(ctx, listUserReviews, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserReview{}
	for rows.Next() {
		var i UserReview
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrderedProductID,
			&i.RatingValue,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserReview = `-- name: UpdateUserReview :one
UPDATE "user_review"
SET 
user_id = COALESCE($1,user_id),
ordered_product_id = COALESCE($2,ordered_product_id),
rating_value = COALESCE($3,rating_value)
WHERE id = $4
RETURNING id, user_id, ordered_product_id, rating_value, created_at, updated_at
`

type UpdateUserReviewParams struct {
	UserID           sql.NullInt64 `json:"user_id"`
	OrderedProductID sql.NullInt64 `json:"ordered_product_id"`
	RatingValue      sql.NullInt32 `json:"rating_value"`
	ID               int64         `json:"id"`
}

func (q *Queries) UpdateUserReview(ctx context.Context, arg UpdateUserReviewParams) (UserReview, error) {
	row := q.db.QueryRowContext(ctx, updateUserReview,
		arg.UserID,
		arg.OrderedProductID,
		arg.RatingValue,
		arg.ID,
	)
	var i UserReview
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrderedProductID,
		&i.RatingValue,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
