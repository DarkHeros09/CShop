// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user_address.sql

package db

import (
	"context"
)

const createUserAddress = `-- name: CreateUserAddress :one
INSERT INTO "user_address" (
  user_id,
  address_id,
  is_default
) VALUES (
  $1, $2, $3
)
RETURNING user_id, address_id, is_default, created_at, updated_at
`

type CreateUserAddressParams struct {
	UserID    int64 `json:"user_id"`
	AddressID int64 `json:"address_id"`
	IsDefault bool  `json:"is_default"`
}

func (q *Queries) CreateUserAddress(ctx context.Context, arg CreateUserAddressParams) (UserAddress, error) {
	row := q.db.QueryRowContext(ctx, createUserAddress, arg.UserID, arg.AddressID, arg.IsDefault)
	var i UserAddress
	err := row.Scan(
		&i.UserID,
		&i.AddressID,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserAddress = `-- name: DeleteUserAddress :exec
DELETE FROM "user_address"
WHERE user_id = $1
And address_id = $2
`

type DeleteUserAddressParams struct {
	UserID    int64 `json:"user_id"`
	AddressID int64 `json:"address_id"`
}

func (q *Queries) DeleteUserAddress(ctx context.Context, arg DeleteUserAddressParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserAddress, arg.UserID, arg.AddressID)
	return err
}

const getUserAddress = `-- name: GetUserAddress :one
SELECT user_id, address_id, is_default, created_at, updated_at FROM "user_address"
WHERE user_id = $1
And address_id = $2
LIMIT 1
`

type GetUserAddressParams struct {
	UserID    int64 `json:"user_id"`
	AddressID int64 `json:"address_id"`
}

func (q *Queries) GetUserAddress(ctx context.Context, arg GetUserAddressParams) (UserAddress, error) {
	row := q.db.QueryRowContext(ctx, getUserAddress, arg.UserID, arg.AddressID)
	var i UserAddress
	err := row.Scan(
		&i.UserID,
		&i.AddressID,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUserAddresses = `-- name: ListUserAddresses :many
SELECT user_id, address_id, is_default, created_at, updated_at FROM "user_address"
WHERE user_id = $1
ORDER BY address_id
LIMIT $2
OFFSET $3
`

type ListUserAddressesParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUserAddresses(ctx context.Context, arg ListUserAddressesParams) ([]UserAddress, error) {
	rows, err := q.db.QueryContext(ctx, listUserAddresses, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserAddress{}
	for rows.Next() {
		var i UserAddress
		if err := rows.Scan(
			&i.UserID,
			&i.AddressID,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserAddress = `-- name: UpdateUserAddress :one
UPDATE "user_address"
SET 
is_default = $1
WHERE user_id = $2
And address_id = $3
RETURNING user_id, address_id, is_default, created_at, updated_at
`

type UpdateUserAddressParams struct {
	IsDefault bool  `json:"is_default"`
	UserID    int64 `json:"user_id"`
	AddressID int64 `json:"address_id"`
}

func (q *Queries) UpdateUserAddress(ctx context.Context, arg UpdateUserAddressParams) (UserAddress, error) {
	row := q.db.QueryRowContext(ctx, updateUserAddress, arg.IsDefault, arg.UserID, arg.AddressID)
	var i UserAddress
	err := row.Scan(
		&i.UserID,
		&i.AddressID,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
