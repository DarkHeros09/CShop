// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product_item.sql

package db

import (
	"context"
	"time"

	null "github.com/guregu/null/v5"
)

const adminCreateProductItem = `-- name: AdminCreateProductItem :one
With t1 AS (
SELECT 1 AS is_admin
    FROM "admin"
    WHERE "admin".id = $9
    AND active = TRUE
    )
INSERT INTO "product_item" (
  product_id,
  size_id,
  image_id,
  color_id,
  product_sku,
  qty_in_stock,
  -- product_image,
  price,
  active
)
SELECT $1, $2, $3, $4, $5, $6, $7, $8 FROM t1
WHERE is_admin=1
RETURNING id, product_id, size_id, image_id, color_id, product_sku, qty_in_stock, price, active, created_at, updated_at
`

type AdminCreateProductItemParams struct {
	ProductID  int64  `json:"product_id"`
	SizeID     int64  `json:"size_id"`
	ImageID    int64  `json:"image_id"`
	ColorID    int64  `json:"color_id"`
	ProductSku int64  `json:"product_sku"`
	QtyInStock int32  `json:"qty_in_stock"`
	Price      string `json:"price"`
	Active     bool   `json:"active"`
	AdminID    int64  `json:"admin_id"`
}

func (q *Queries) AdminCreateProductItem(ctx context.Context, arg AdminCreateProductItemParams) (ProductItem, error) {
	row := q.db.QueryRow(ctx, adminCreateProductItem,
		arg.ProductID,
		arg.SizeID,
		arg.ImageID,
		arg.ColorID,
		arg.ProductSku,
		arg.QtyInStock,
		arg.Price,
		arg.Active,
		arg.AdminID,
	)
	var i ProductItem
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.SizeID,
		&i.ImageID,
		&i.ColorID,
		&i.ProductSku,
		&i.QtyInStock,
		&i.Price,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const adminUpdateProductItem = `-- name: AdminUpdateProductItem :one
With t1 AS (
SELECT 1 AS is_admin
    FROM "admin"
    WHERE "admin".id = $10
    AND active = TRUE
    )
UPDATE "product_item"
SET
product_sku = COALESCE($1,product_sku),
qty_in_stock = COALESCE($2,qty_in_stock),
size_id = COALESCE($3,size_id),
image_id = COALESCE($4,image_id),
color_id = COALESCE($5,color_id),
price = COALESCE($6,price),
active = COALESCE($7,active),
updated_at = now()
WHERE "product_item".id = $8
AND product_id = $9
AND (SELECT is_admin FROM t1) = 1
RETURNING id, product_id, size_id, image_id, color_id, product_sku, qty_in_stock, price, active, created_at, updated_at
`

type AdminUpdateProductItemParams struct {
	ProductSku null.Int    `json:"product_sku"`
	QtyInStock null.Int    `json:"qty_in_stock"`
	SizeID     null.Int    `json:"size_id"`
	ImageID    null.Int    `json:"image_id"`
	ColorID    null.Int    `json:"color_id"`
	Price      null.String `json:"price"`
	Active     null.Bool   `json:"active"`
	ID         int64       `json:"id"`
	ProductID  int64       `json:"product_id"`
	AdminID    int64       `json:"admin_id"`
}

func (q *Queries) AdminUpdateProductItem(ctx context.Context, arg AdminUpdateProductItemParams) (ProductItem, error) {
	row := q.db.QueryRow(ctx, adminUpdateProductItem,
		arg.ProductSku,
		arg.QtyInStock,
		arg.SizeID,
		arg.ImageID,
		arg.ColorID,
		arg.Price,
		arg.Active,
		arg.ID,
		arg.ProductID,
		arg.AdminID,
	)
	var i ProductItem
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.SizeID,
		&i.ImageID,
		&i.ColorID,
		&i.ProductSku,
		&i.QtyInStock,
		&i.Price,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createProductItem = `-- name: CreateProductItem :one
INSERT INTO "product_item" (
  product_id,
  size_id,
  image_id,
  color_id,
  product_sku,
  qty_in_stock,
  -- product_image,
  price,
  active
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, product_id, size_id, image_id, color_id, product_sku, qty_in_stock, price, active, created_at, updated_at
`

type CreateProductItemParams struct {
	ProductID  int64  `json:"product_id"`
	SizeID     int64  `json:"size_id"`
	ImageID    int64  `json:"image_id"`
	ColorID    int64  `json:"color_id"`
	ProductSku int64  `json:"product_sku"`
	QtyInStock int32  `json:"qty_in_stock"`
	Price      string `json:"price"`
	Active     bool   `json:"active"`
}

func (q *Queries) CreateProductItem(ctx context.Context, arg CreateProductItemParams) (ProductItem, error) {
	row := q.db.QueryRow(ctx, createProductItem,
		arg.ProductID,
		arg.SizeID,
		arg.ImageID,
		arg.ColorID,
		arg.ProductSku,
		arg.QtyInStock,
		arg.Price,
		arg.Active,
	)
	var i ProductItem
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.SizeID,
		&i.ImageID,
		&i.ColorID,
		&i.ProductSku,
		&i.QtyInStock,
		&i.Price,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProductItem = `-- name: DeleteProductItem :exec
DELETE FROM "product_item"
WHERE id = $1
`

func (q *Queries) DeleteProductItem(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProductItem, id)
	return err
}

const getActiveProductItems = `-- name: GetActiveProductItems :one
With t1 AS (
SELECT 1 AS is_admin
    FROM "admin"
    WHERE "admin".id = $1
    AND active = TRUE
    )
SELECT COUNT(pi.id) FROM product_item AS pi
JOIN product AS p ON p.id = pi.product_id
WHERE p.active = TRUE AND pi.active = TRUE
AND EXISTS(SELECT is_admin FROM t1)
`

func (q *Queries) GetActiveProductItems(ctx context.Context, adminID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getActiveProductItems, adminID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getProductItem = `-- name: GetProductItem :one
SELECT id, product_id, size_id, image_id, color_id, product_sku, qty_in_stock, price, active, created_at, updated_at FROM "product_item"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProductItem(ctx context.Context, id int64) (ProductItem, error) {
	row := q.db.QueryRow(ctx, getProductItem, id)
	var i ProductItem
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.SizeID,
		&i.ImageID,
		&i.ColorID,
		&i.ProductSku,
		&i.QtyInStock,
		&i.Price,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductItemForUpdate = `-- name: GetProductItemForUpdate :one
SELECT id, product_id, size_id, image_id, color_id, product_sku, qty_in_stock, price, active, created_at, updated_at FROM "product_item"
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetProductItemForUpdate(ctx context.Context, id int64) (ProductItem, error) {
	row := q.db.QueryRow(ctx, getProductItemForUpdate, id)
	var i ProductItem
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.SizeID,
		&i.ImageID,
		&i.ColorID,
		&i.ProductSku,
		&i.QtyInStock,
		&i.Price,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTotalProductItems = `-- name: GetTotalProductItems :one
With t1 AS (
SELECT 1 AS is_admin
    FROM "admin"
    WHERE "admin".id = $1
    AND active = TRUE
    )
SELECT COUNT(pi.id) FROM product_item AS pi
JOIN product AS p ON p.id = pi.product_id
WHERE EXISTS(SELECT is_admin FROM t1)
`

func (q *Queries) GetTotalProductItems(ctx context.Context, adminID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalProductItems, adminID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listProductItems = `-- name: ListProductItems :many
SELECT pi.id, pi.product_id, pi.size_id, pi.image_id, pi.color_id, pi.product_sku, pi.qty_in_stock, pi.price, pi.active, pi.created_at, pi.updated_at, p.id, p.category_id, p.brand_id, p.name, p.description, p.active, p.created_at, p.updated_at, p.search, ps.size_value, pimg.product_image_1,
pimg.product_image_2, pimg.product_image_3, pclr.color_value,
COUNT(*) OVER() AS total_count
FROM "product_item" AS pi
LEFT JOIN "product" AS p ON p.id = pi.product_id
LEFT JOIN "product_size" AS ps ON ps.id = pi.size_id
LEFT JOIN "product_image" AS pimg ON pimg.id = pi.image_id
LEFT JOIN "product_color" AS pclr ON pclr.id = pi.color_id
ORDER BY pi.id
LIMIT $1
OFFSET $2
`

type ListProductItemsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListProductItemsRow struct {
	ID            int64       `json:"id"`
	ProductID     int64       `json:"product_id"`
	SizeID        int64       `json:"size_id"`
	ImageID       int64       `json:"image_id"`
	ColorID       int64       `json:"color_id"`
	ProductSku    int64       `json:"product_sku"`
	QtyInStock    int32       `json:"qty_in_stock"`
	Price         string      `json:"price"`
	Active        bool        `json:"active"`
	CreatedAt     time.Time   `json:"created_at"`
	UpdatedAt     time.Time   `json:"updated_at"`
	ID_2          null.Int    `json:"id_2"`
	CategoryID    null.Int    `json:"category_id"`
	BrandID       null.Int    `json:"brand_id"`
	Name          null.String `json:"name"`
	Description   null.String `json:"description"`
	Active_2      null.Bool   `json:"active_2"`
	CreatedAt_2   null.Time   `json:"created_at_2"`
	UpdatedAt_2   null.Time   `json:"updated_at_2"`
	Search        null.String `json:"search"`
	SizeValue     null.String `json:"size_value"`
	ProductImage1 null.String `json:"product_image_1"`
	ProductImage2 null.String `json:"product_image_2"`
	ProductImage3 null.String `json:"product_image_3"`
	ColorValue    null.String `json:"color_value"`
	TotalCount    int64       `json:"total_count"`
}

func (q *Queries) ListProductItems(ctx context.Context, arg ListProductItemsParams) ([]ListProductItemsRow, error) {
	rows, err := q.db.Query(ctx, listProductItems, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProductItemsRow{}
	for rows.Next() {
		var i ListProductItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.SizeID,
			&i.ImageID,
			&i.ColorID,
			&i.ProductSku,
			&i.QtyInStock,
			&i.Price,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.CategoryID,
			&i.BrandID,
			&i.Name,
			&i.Description,
			&i.Active_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.Search,
			&i.SizeValue,
			&i.ProductImage1,
			&i.ProductImage2,
			&i.ProductImage3,
			&i.ColorValue,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductItemsByIDs = `-- name: ListProductItemsByIDs :many
SELECT pi.id, p.name, pi.product_id, 
pi.price, pi.active, ps.size_value, pimg.product_image_1,
pimg.product_image_2, pimg.product_image_3, pclr.color_value
FROM "product_item" AS pi
LEFT JOIN "product" AS p ON p.id = pi.product_id
LEFT JOIN "product_size" AS ps ON ps.id = pi.size_id
LEFT JOIN "product_image" AS pimg ON pimg.id = pi.image_id
LEFT JOIN "product_color" AS pclr ON pclr.id = pi.color_id
WHERE pi.id = ANY($1::bigint[])
`

type ListProductItemsByIDsRow struct {
	ID            int64       `json:"id"`
	Name          null.String `json:"name"`
	ProductID     int64       `json:"product_id"`
	Price         string      `json:"price"`
	Active        bool        `json:"active"`
	SizeValue     null.String `json:"size_value"`
	ProductImage1 null.String `json:"product_image_1"`
	ProductImage2 null.String `json:"product_image_2"`
	ProductImage3 null.String `json:"product_image_3"`
	ColorValue    null.String `json:"color_value"`
}

func (q *Queries) ListProductItemsByIDs(ctx context.Context, productsIds []int64) ([]ListProductItemsByIDsRow, error) {
	rows, err := q.db.Query(ctx, listProductItemsByIDs, productsIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProductItemsByIDsRow{}
	for rows.Next() {
		var i ListProductItemsByIDsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ProductID,
			&i.Price,
			&i.Active,
			&i.SizeValue,
			&i.ProductImage1,
			&i.ProductImage2,
			&i.ProductImage3,
			&i.ColorValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductItemsNextPage = `-- name: ListProductItemsNextPage :many
WITH t1 AS(
SELECT 
 pi.id, pi.product_id, pi.size_id, pi.image_id, pi.color_id, pi.product_sku, pi.qty_in_stock, pi.price, pi.active, pi.created_at, pi.updated_at, p.name, p.description, p.category_id, p.brand_id, pc.category_name, pc.parent_category_id,
 pc.category_image, pb.brand_name, pb.brand_image, p.active AS parent_product_active, ps.size_value,
 pimg.product_image_1, pimg.product_image_2, pimg.product_image_3, pclr.color_value,
 cpromo.id AS category_promo_id, cpromo.name AS category_promo_name, cpromo.description AS category_promo_description,
 cpromo.discount_rate AS category_promo_discount_rate, COALESCE(cpromo.active, FALSE) AS category_promo_active,
 cpromo.start_date AS category_promo_start_date, cpromo.end_date AS category_promo_end_date,
 bpromo.id AS brand_promo_id, bpromo.name AS brand_promo_name, bpromo.description AS brand_promo_description,
 bpromo.discount_rate AS brand_promo_discount_rate, COALESCE(bpromo.active, FALSE) AS brand_promo_active,
 bpromo.start_date AS brand_promo_start_date, bpromo.end_date AS brand_promo_end_date,
 ppromo.id AS product_promo_id, ppromo.name AS product_promo_name, ppromo.description AS product_promo_description,
 ppromo.discount_rate AS product_promo_discount_rate, COALESCE(ppromo.active, FALSE) AS product_promo_active,
 ppromo.start_date AS product_promo_start_date, ppromo.end_date AS product_promo_end_date
FROM "product_item" AS pi
INNER JOIN "product" AS p ON p.id = pi.product_id
LEFT JOIN "product_size" AS ps ON ps.id = pi.size_id
LEFT JOIN "product_image" AS pimg ON pimg.id = pi.image_id
LEFT JOIN "product_color" AS pclr ON pclr.id = pi.color_id
LEFT JOIN "product_promotion" AS pp ON pp.product_id = p.id 
LEFT JOIN "promotion" AS ppromo ON ppromo.id = pp.promotion_id  
LEFT JOIN "product_category" AS pc ON pc.id = p.category_id
LEFT JOIN "category_promotion" AS cp ON cp.category_id = p.category_id 
LEFT JOIN "promotion" AS cpromo ON cpromo.id = cp.promotion_id  
LEFT JOIN "product_brand" AS pb ON pb.id = p.brand_id
LEFT JOIN "brand_promotion" AS bp ON bp.brand_id = p.brand_id 
LEFT JOIN "promotion" AS bpromo ON bpromo.id = bp.promotion_id  
WHERE
(
    CASE
    WHEN COALESCE($2, FALSE) = TRUE
	THEN (
        (pi.price < $3) OR
         (pi.price = $3 AND  pi.id < $4) OR
         CASE WHEN ($5::INTEGER,$6::INTEGER) IS NOT NULL
         THEN (pi.price = $3 AND  pi.id = $4 AND pi.product_id < $7)
         ELSE 1=1
         END
         )
    WHEN COALESCE($8, FALSE) = TRUE
	THEN (
        (pi.price > $3) OR
         (pi.price = $3 AND  pi.id > $4) OR
         CASE WHEN ($5::INTEGER,$6::INTEGER) IS NOT NULL
         THEN (pi.price = $3 AND  pi.id = $4 AND pi.product_id > $7)
         ELSE 1=1
         END
         )
	ELSE pi.id < $4 AND
        CASE WHEN ($5::INTEGER,$6::INTEGER) IS NOT NULL
        THEN pi.product_id < $7
        ELSE 1=1
        END
END ) AND
pi.active = TRUE AND
p.active =TRUE AND
CASE
WHEN COALESCE($9, FALSE) = TRUE
THEN 
((pp.active = TRUE
AND ppromo.active = TRUE
AND ppromo.start_date <= CURRENT_DATE 
AND ppromo.end_date >= CURRENT_DATE)
OR (cp.active = TRUE
AND cpromo.active =TRUE 
AND cpromo.start_date <= CURRENT_DATE 
AND cpromo.end_date >= CURRENT_DATE)
OR (bp.active = TRUE
AND bpromo.active =TRUE 
AND bpromo.start_date <= CURRENT_DATE 
AND bpromo.end_date >= CURRENT_DATE))=TRUE 
ELSE TRUE
END 
AND
CASE
WHEN COALESCE($10, FALSE) = TRUE
THEN pi.created_at >= CURRENT_DATE - INTERVAL '5 days'
ELSE 1=1
END
AND CASE
    WHEN COALESCE($5, 0) > 0 
    THEN pc.id = $5
    ELSE 1=1
END 
AND CASE
    WHEN COALESCE($6, 0) > 0 
    THEN pb.id = $6
    ELSE 1=1
END 
AND CASE
    WHEN COALESCE($11, 0) > 0 
    THEN pi.color_id = $11
    ELSE 1=1
END
AND CASE
    WHEN COALESCE($12, 0) > 0 
    THEN pi.size_id = $12
    ELSE 1=1
END
ORDER BY 
CASE
	WHEN COALESCE($8, FALSE) = TRUE
		THEN pi.price
	ELSE ''
END ASC,
CASE
	WHEN COALESCE($2, FALSE) = TRUE
		THEN pi.price
	ELSE ''
END DESC,
CASE
    WHEN $8::BOOLEAN IS NOT NULL
    THEN pi.id END ASC,
CASE
	WHEN ($8::BOOLEAN,$5::INTEGER,$6::INTEGER) IS NOT NULL
	THEN pi.product_id
    END ASC,
CASE WHEN $8::BOOLEAN IS NULL
	THEN pi.id END DESC,
    CASE
	WHEN $8::BOOLEAN IS NULL AND ($5::INTEGER,$6::INTEGER) IS NOT NULL
	THEN pi.product_id
    END DESC
LIMIT $1 +1
)

SELECT id, product_id, size_id, image_id, color_id, product_sku, qty_in_stock, price, active, created_at, updated_at, name, description, category_id, brand_id, category_name, parent_category_id, category_image, brand_name, brand_image, parent_product_active, size_value, product_image_1, product_image_2, product_image_3, color_value, category_promo_id, category_promo_name, category_promo_description, category_promo_discount_rate, category_promo_active, category_promo_start_date, category_promo_end_date, brand_promo_id, brand_promo_name, brand_promo_description, brand_promo_discount_rate, brand_promo_active, brand_promo_start_date, brand_promo_end_date, product_promo_id, product_promo_name, product_promo_description, product_promo_discount_rate, product_promo_active, product_promo_start_date, product_promo_end_date,COUNT(*) OVER()>10 AS next_available FROM t1 
LIMIT $1
`

type ListProductItemsNextPageParams struct {
	Limit            int32       `json:"limit"`
	OrderByHighPrice interface{} `json:"order_by_high_price"`
	Price            null.String `json:"price"`
	ProductItemID    int64       `json:"product_item_id"`
	CategoryID       null.Int    `json:"category_id"`
	BrandID          null.Int    `json:"brand_id"`
	ProductID        int64       `json:"product_id"`
	OrderByLowPrice  interface{} `json:"order_by_low_price"`
	IsPromoted       interface{} `json:"is_promoted"`
	IsNew            interface{} `json:"is_new"`
	ColorID          interface{} `json:"color_id"`
	SizeID           interface{} `json:"size_id"`
}

type ListProductItemsNextPageRow struct {
	ID                        int64       `json:"id"`
	ProductID                 int64       `json:"product_id"`
	SizeID                    int64       `json:"size_id"`
	ImageID                   int64       `json:"image_id"`
	ColorID                   int64       `json:"color_id"`
	ProductSku                int64       `json:"product_sku"`
	QtyInStock                int32       `json:"qty_in_stock"`
	Price                     string      `json:"price"`
	Active                    bool        `json:"active"`
	CreatedAt                 time.Time   `json:"created_at"`
	UpdatedAt                 time.Time   `json:"updated_at"`
	Name                      string      `json:"name"`
	Description               string      `json:"description"`
	CategoryID                int64       `json:"category_id"`
	BrandID                   int64       `json:"brand_id"`
	CategoryName              null.String `json:"category_name"`
	ParentCategoryID          null.Int    `json:"parent_category_id"`
	CategoryImage             null.String `json:"category_image"`
	BrandName                 null.String `json:"brand_name"`
	BrandImage                null.String `json:"brand_image"`
	ParentProductActive       bool        `json:"parent_product_active"`
	SizeValue                 null.String `json:"size_value"`
	ProductImage1             null.String `json:"product_image_1"`
	ProductImage2             null.String `json:"product_image_2"`
	ProductImage3             null.String `json:"product_image_3"`
	ColorValue                null.String `json:"color_value"`
	CategoryPromoID           null.Int    `json:"category_promo_id"`
	CategoryPromoName         null.String `json:"category_promo_name"`
	CategoryPromoDescription  null.String `json:"category_promo_description"`
	CategoryPromoDiscountRate null.Int    `json:"category_promo_discount_rate"`
	CategoryPromoActive       bool        `json:"category_promo_active"`
	CategoryPromoStartDate    null.Time   `json:"category_promo_start_date"`
	CategoryPromoEndDate      null.Time   `json:"category_promo_end_date"`
	BrandPromoID              null.Int    `json:"brand_promo_id"`
	BrandPromoName            null.String `json:"brand_promo_name"`
	BrandPromoDescription     null.String `json:"brand_promo_description"`
	BrandPromoDiscountRate    null.Int    `json:"brand_promo_discount_rate"`
	BrandPromoActive          bool        `json:"brand_promo_active"`
	BrandPromoStartDate       null.Time   `json:"brand_promo_start_date"`
	BrandPromoEndDate         null.Time   `json:"brand_promo_end_date"`
	ProductPromoID            null.Int    `json:"product_promo_id"`
	ProductPromoName          null.String `json:"product_promo_name"`
	ProductPromoDescription   null.String `json:"product_promo_description"`
	ProductPromoDiscountRate  null.Int    `json:"product_promo_discount_rate"`
	ProductPromoActive        bool        `json:"product_promo_active"`
	ProductPromoStartDate     null.Time   `json:"product_promo_start_date"`
	ProductPromoEndDate       null.Time   `json:"product_promo_end_date"`
	NextAvailable             bool        `json:"next_available"`
}

func (q *Queries) ListProductItemsNextPage(ctx context.Context, arg ListProductItemsNextPageParams) ([]ListProductItemsNextPageRow, error) {
	rows, err := q.db.Query(ctx, listProductItemsNextPage,
		arg.Limit,
		arg.OrderByHighPrice,
		arg.Price,
		arg.ProductItemID,
		arg.CategoryID,
		arg.BrandID,
		arg.ProductID,
		arg.OrderByLowPrice,
		arg.IsPromoted,
		arg.IsNew,
		arg.ColorID,
		arg.SizeID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProductItemsNextPageRow{}
	for rows.Next() {
		var i ListProductItemsNextPageRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.SizeID,
			&i.ImageID,
			&i.ColorID,
			&i.ProductSku,
			&i.QtyInStock,
			&i.Price,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.CategoryID,
			&i.BrandID,
			&i.CategoryName,
			&i.ParentCategoryID,
			&i.CategoryImage,
			&i.BrandName,
			&i.BrandImage,
			&i.ParentProductActive,
			&i.SizeValue,
			&i.ProductImage1,
			&i.ProductImage2,
			&i.ProductImage3,
			&i.ColorValue,
			&i.CategoryPromoID,
			&i.CategoryPromoName,
			&i.CategoryPromoDescription,
			&i.CategoryPromoDiscountRate,
			&i.CategoryPromoActive,
			&i.CategoryPromoStartDate,
			&i.CategoryPromoEndDate,
			&i.BrandPromoID,
			&i.BrandPromoName,
			&i.BrandPromoDescription,
			&i.BrandPromoDiscountRate,
			&i.BrandPromoActive,
			&i.BrandPromoStartDate,
			&i.BrandPromoEndDate,
			&i.ProductPromoID,
			&i.ProductPromoName,
			&i.ProductPromoDescription,
			&i.ProductPromoDiscountRate,
			&i.ProductPromoActive,
			&i.ProductPromoStartDate,
			&i.ProductPromoEndDate,
			&i.NextAvailable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductItemsNextPageOld = `-- name: ListProductItemsNextPageOld :many
SELECT pi.id, pi.product_id, pi.size_id, pi.image_id, pi.color_id, pi.product_sku, pi.qty_in_stock, pi.price, pi.active, pi.created_at, pi.updated_at, p.name, p.description, p.category_id, p.brand_id, pc.category_name, pc.parent_category_id,
 pc.category_image, pb.brand_name, pb.brand_image, p.active as parent_product_active, ps.size_value,
 pimg.product_image_1, pimg.product_image_2, pimg.product_image_3, pclr.color_value, COUNT(*) OVER() AS total_count,
 cpromo.id as category_promo_id, cpromo.name as category_promo_name, cpromo.description as category_promo_description,
 cpromo.discount_rate as category_promo_discount_rate, COALESCE(cpromo.active, false) as category_promo_active,
 cpromo.start_date as category_promo_start_date, cpromo.end_date as category_promo_end_date,
 bpromo.id as brand_promo_id, bpromo.name as brand_promo_name, bpromo.description as brand_promo_description,
 bpromo.discount_rate as brand_promo_discount_rate, COALESCE(bpromo.active, false) as brand_promo_active,
 bpromo.start_date as brand_promo_start_date, bpromo.end_date as brand_promo_end_date,
 ppromo.id as product_promo_id, ppromo.name as product_promo_name, ppromo.description as product_promo_description,
 ppromo.discount_rate as product_promo_discount_rate, COALESCE(ppromo.active, false) as product_promo_active,
 ppromo.start_date as product_promo_start_date, ppromo.end_date as product_promo_end_date
FROM "product_item" AS pi
LEFT JOIN "product" AS p ON p.id = pi.product_id AND p.active = TRUE
LEFT JOIN "product_size" AS ps ON ps.id = pi.size_id
LEFT JOIN "product_image" AS pimg ON pimg.id = pi.image_id
LEFT JOIN "product_color" AS pclr ON pclr.id = pi.color_id
LEFT JOIN "product_category" AS pc ON pc.id = p.category_id
LEFT JOIN "category_promotion" AS cp ON cp.category_id = p.category_id AND cp.active = true
LEFT JOIN "promotion" AS cpromo ON cpromo.id = cp.promotion_id AND cpromo.active =true AND cpromo.start_date <= CURRENT_DATE AND cpromo.end_date >= CURRENT_DATE
LEFT JOIN "product_brand" AS pb ON pb.id = p.brand_id
LEFT JOIN "brand_promotion" AS bp ON bp.brand_id = p.brand_id AND bp.active = true
LEFT JOIN "promotion" AS bpromo ON bpromo.id = bp.promotion_id AND bpromo.active =true AND bpromo.start_date <= CURRENT_DATE AND bpromo.end_date >= CURRENT_DATE
LEFT JOIN "product_promotion" AS pp ON pp.product_id = p.id AND pp.active = true
LEFT JOIN "promotion" AS ppromo ON ppromo.id = pp.promotion_id AND ppromo.active = true AND ppromo.start_date <= CURRENT_DATE AND ppromo.end_date >= CURRENT_DATE

WHERE pi.id < $2
AND pi.active = TRUE

AND CASE
WHEN COALESCE($3, false) = TRUE
THEN (cpromo.active = true OR
	bpromo.active = true OR
	ppromo.active = true)
ELSE 1=1
END
AND CASE
WHEN COALESCE($4, false) = TRUE
THEN pi.created_at >= CURRENT_DATE - INTERVAL '5 days'
ELSE 1=1
END
AND CASE
    WHEN COALESCE($5, 0) > 0 
    THEN pc.id = $5
    ELSE 1=1
END
AND CASE
    WHEN COALESCE($6, 0) > 0 
    THEN pb.id = $6
    ELSE 1=1
END
AND CASE
    WHEN COALESCE($7, 0) > 0 
    THEN pclr.id = $7
    ELSE 1=1
END
AND CASE
    WHEN COALESCE($8, 0) > 0 
    THEN ps.id = $8
    ELSE 1=1
END
ORDER BY pi.id DESC
LIMIT $1
`

type ListProductItemsNextPageOldParams struct {
	Limit      int32       `json:"limit"`
	ID         int64       `json:"id"`
	IsPromoted interface{} `json:"is_promoted"`
	IsNew      interface{} `json:"is_new"`
	CategoryID interface{} `json:"category_id"`
	BrandID    interface{} `json:"brand_id"`
	ColorID    interface{} `json:"color_id"`
	SizeID     interface{} `json:"size_id"`
}

type ListProductItemsNextPageOldRow struct {
	ID                        int64       `json:"id"`
	ProductID                 int64       `json:"product_id"`
	SizeID                    int64       `json:"size_id"`
	ImageID                   int64       `json:"image_id"`
	ColorID                   int64       `json:"color_id"`
	ProductSku                int64       `json:"product_sku"`
	QtyInStock                int32       `json:"qty_in_stock"`
	Price                     string      `json:"price"`
	Active                    bool        `json:"active"`
	CreatedAt                 time.Time   `json:"created_at"`
	UpdatedAt                 time.Time   `json:"updated_at"`
	Name                      null.String `json:"name"`
	Description               null.String `json:"description"`
	CategoryID                null.Int    `json:"category_id"`
	BrandID                   null.Int    `json:"brand_id"`
	CategoryName              null.String `json:"category_name"`
	ParentCategoryID          null.Int    `json:"parent_category_id"`
	CategoryImage             null.String `json:"category_image"`
	BrandName                 null.String `json:"brand_name"`
	BrandImage                null.String `json:"brand_image"`
	ParentProductActive       null.Bool   `json:"parent_product_active"`
	SizeValue                 null.String `json:"size_value"`
	ProductImage1             null.String `json:"product_image_1"`
	ProductImage2             null.String `json:"product_image_2"`
	ProductImage3             null.String `json:"product_image_3"`
	ColorValue                null.String `json:"color_value"`
	TotalCount                int64       `json:"total_count"`
	CategoryPromoID           null.Int    `json:"category_promo_id"`
	CategoryPromoName         null.String `json:"category_promo_name"`
	CategoryPromoDescription  null.String `json:"category_promo_description"`
	CategoryPromoDiscountRate null.Int    `json:"category_promo_discount_rate"`
	CategoryPromoActive       bool        `json:"category_promo_active"`
	CategoryPromoStartDate    null.Time   `json:"category_promo_start_date"`
	CategoryPromoEndDate      null.Time   `json:"category_promo_end_date"`
	BrandPromoID              null.Int    `json:"brand_promo_id"`
	BrandPromoName            null.String `json:"brand_promo_name"`
	BrandPromoDescription     null.String `json:"brand_promo_description"`
	BrandPromoDiscountRate    null.Int    `json:"brand_promo_discount_rate"`
	BrandPromoActive          bool        `json:"brand_promo_active"`
	BrandPromoStartDate       null.Time   `json:"brand_promo_start_date"`
	BrandPromoEndDate         null.Time   `json:"brand_promo_end_date"`
	ProductPromoID            null.Int    `json:"product_promo_id"`
	ProductPromoName          null.String `json:"product_promo_name"`
	ProductPromoDescription   null.String `json:"product_promo_description"`
	ProductPromoDiscountRate  null.Int    `json:"product_promo_discount_rate"`
	ProductPromoActive        bool        `json:"product_promo_active"`
	ProductPromoStartDate     null.Time   `json:"product_promo_start_date"`
	ProductPromoEndDate       null.Time   `json:"product_promo_end_date"`
}

// WITH t1 AS (
// SELECT COUNT(*) OVER() AS total_count
// FROM "product_item" AS pi
// WHERE pi.active = TRUE
// LIMIT 1
// )
func (q *Queries) ListProductItemsNextPageOld(ctx context.Context, arg ListProductItemsNextPageOldParams) ([]ListProductItemsNextPageOldRow, error) {
	rows, err := q.db.Query(ctx, listProductItemsNextPageOld,
		arg.Limit,
		arg.ID,
		arg.IsPromoted,
		arg.IsNew,
		arg.CategoryID,
		arg.BrandID,
		arg.ColorID,
		arg.SizeID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProductItemsNextPageOldRow{}
	for rows.Next() {
		var i ListProductItemsNextPageOldRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.SizeID,
			&i.ImageID,
			&i.ColorID,
			&i.ProductSku,
			&i.QtyInStock,
			&i.Price,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.CategoryID,
			&i.BrandID,
			&i.CategoryName,
			&i.ParentCategoryID,
			&i.CategoryImage,
			&i.BrandName,
			&i.BrandImage,
			&i.ParentProductActive,
			&i.SizeValue,
			&i.ProductImage1,
			&i.ProductImage2,
			&i.ProductImage3,
			&i.ColorValue,
			&i.TotalCount,
			&i.CategoryPromoID,
			&i.CategoryPromoName,
			&i.CategoryPromoDescription,
			&i.CategoryPromoDiscountRate,
			&i.CategoryPromoActive,
			&i.CategoryPromoStartDate,
			&i.CategoryPromoEndDate,
			&i.BrandPromoID,
			&i.BrandPromoName,
			&i.BrandPromoDescription,
			&i.BrandPromoDiscountRate,
			&i.BrandPromoActive,
			&i.BrandPromoStartDate,
			&i.BrandPromoEndDate,
			&i.ProductPromoID,
			&i.ProductPromoName,
			&i.ProductPromoDescription,
			&i.ProductPromoDiscountRate,
			&i.ProductPromoActive,
			&i.ProductPromoStartDate,
			&i.ProductPromoEndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductItemsV2 = `-- name: ListProductItemsV2 :many
WITH t1 AS(
SELECT 
 pi.id, pi.product_id, pi.size_id, pi.image_id, pi.color_id, pi.product_sku, pi.qty_in_stock, pi.price, pi.active, pi.created_at, pi.updated_at, p.name, p.description, p.category_id, p.brand_id, pc.category_name, pc.parent_category_id,
 pc.category_image, pb.brand_name, pb.brand_image, p.active AS parent_product_active, ps.size_value,
 pimg.product_image_1, pimg.product_image_2, pimg.product_image_3, pclr.color_value,
 cpromo.id AS category_promo_id, cpromo.name AS category_promo_name, cpromo.description AS category_promo_description,
 cpromo.discount_rate AS category_promo_discount_rate, COALESCE(cpromo.active, FALSE) AS category_promo_active,
 cpromo.start_date AS category_promo_start_date, cpromo.end_date AS category_promo_end_date,
 bpromo.id AS brand_promo_id, bpromo.name AS brand_promo_name, bpromo.description AS brand_promo_description,
 bpromo.discount_rate AS brand_promo_discount_rate, COALESCE(bpromo.active, FALSE) AS brand_promo_active,
 bpromo.start_date AS brand_promo_start_date, bpromo.end_date AS brand_promo_end_date,
 ppromo.id AS product_promo_id, ppromo.name AS product_promo_name, ppromo.description AS product_promo_description,
 ppromo.discount_rate AS product_promo_discount_rate, COALESCE(ppromo.active, FALSE) AS product_promo_active,
 ppromo.start_date AS product_promo_start_date, ppromo.end_date AS product_promo_end_date
FROM "product_item" AS pi
INNER JOIN "product" AS p ON p.id = pi.product_id
LEFT JOIN "product_size" AS ps ON ps.id = pi.size_id
LEFT JOIN "product_image" AS pimg ON pimg.id = pi.image_id
LEFT JOIN "product_color" AS pclr ON pclr.id = pi.color_id
LEFT JOIN "product_promotion" AS pp ON pp.product_id = p.id 
LEFT JOIN "promotion" AS ppromo ON ppromo.id = pp.promotion_id  
LEFT JOIN "product_category" AS pc ON pc.id = p.category_id
LEFT JOIN "category_promotion" AS cp ON cp.category_id = p.category_id 
LEFT JOIN "promotion" AS cpromo ON cpromo.id = cp.promotion_id  
LEFT JOIN "product_brand" AS pb ON pb.id = p.brand_id
LEFT JOIN "brand_promotion" AS bp ON bp.brand_id = p.brand_id 
LEFT JOIN "promotion" AS bpromo ON bpromo.id = bp.promotion_id  
WHERE 
pi.active = TRUE AND
p.active =TRUE AND
CASE
WHEN COALESCE($2, FALSE) = TRUE
THEN 
((pp.active = TRUE
AND ppromo.active = TRUE
AND ppromo.start_date <= CURRENT_DATE 
AND ppromo.end_date >= CURRENT_DATE)
OR (cp.active = TRUE
AND cpromo.active =TRUE 
AND cpromo.start_date <= CURRENT_DATE 
AND cpromo.end_date >= CURRENT_DATE)
OR (bp.active = TRUE
AND bpromo.active =TRUE 
AND bpromo.start_date <= CURRENT_DATE 
AND bpromo.end_date >= CURRENT_DATE))=TRUE 
ELSE TRUE
END 
AND
CASE
WHEN COALESCE($3, FALSE) = TRUE
THEN pi.created_at >= CURRENT_DATE - INTERVAL '5 days'
ELSE 1=1
END
AND CASE
    WHEN COALESCE($4, 0) > 0 
    THEN pc.id = $4
    ELSE 1=1
END 
AND CASE
    WHEN COALESCE($5, 0) > 0 
    THEN pb.id = $5
    ELSE 1=1
END 
AND CASE
    WHEN COALESCE($6, 0) > 0 
    THEN pi.color_id = $6
    ELSE 1=1
END
AND CASE
    WHEN COALESCE($7, 0) > 0 
    THEN pi.size_id = $7
    ELSE 1=1
END
ORDER BY 
CASE
	WHEN COALESCE($8, FALSE) = TRUE
		THEN pi.price
	ELSE ''
END ASC,
CASE
	WHEN COALESCE($9, FALSE) = TRUE
		THEN pi.price
	ELSE ''
END DESC,
CASE
    WHEN $8 IS NOT NULL
    THEN pi.id END ASC,
CASE
	WHEN ($8,$4,$5) IS NOT NULL
	THEN pi.product_id
    END ASC,
CASE WHEN $8 IS NULL
	THEN pi.id END DESC,
    CASE
	WHEN $8 IS NULL AND ($4,$5) IS NOT NULL
	THEN pi.product_id
    END DESC
LIMIT $1 +1
)

SELECT id, product_id, size_id, image_id, color_id, product_sku, qty_in_stock, price, active, created_at, updated_at, name, description, category_id, brand_id, category_name, parent_category_id, category_image, brand_name, brand_image, parent_product_active, size_value, product_image_1, product_image_2, product_image_3, color_value, category_promo_id, category_promo_name, category_promo_description, category_promo_discount_rate, category_promo_active, category_promo_start_date, category_promo_end_date, brand_promo_id, brand_promo_name, brand_promo_description, brand_promo_discount_rate, brand_promo_active, brand_promo_start_date, brand_promo_end_date, product_promo_id, product_promo_name, product_promo_description, product_promo_discount_rate, product_promo_active, product_promo_start_date, product_promo_end_date,COUNT(*) OVER()>10 AS next_available FROM t1 
LIMIT $1
`

type ListProductItemsV2Params struct {
	Limit            int32       `json:"limit"`
	IsPromoted       interface{} `json:"is_promoted"`
	IsNew            interface{} `json:"is_new"`
	CategoryID       interface{} `json:"category_id"`
	BrandID          interface{} `json:"brand_id"`
	ColorID          interface{} `json:"color_id"`
	SizeID           interface{} `json:"size_id"`
	OrderByLowPrice  interface{} `json:"order_by_low_price"`
	OrderByHighPrice interface{} `json:"order_by_high_price"`
}

type ListProductItemsV2Row struct {
	ID                        int64       `json:"id"`
	ProductID                 int64       `json:"product_id"`
	SizeID                    int64       `json:"size_id"`
	ImageID                   int64       `json:"image_id"`
	ColorID                   int64       `json:"color_id"`
	ProductSku                int64       `json:"product_sku"`
	QtyInStock                int32       `json:"qty_in_stock"`
	Price                     string      `json:"price"`
	Active                    bool        `json:"active"`
	CreatedAt                 time.Time   `json:"created_at"`
	UpdatedAt                 time.Time   `json:"updated_at"`
	Name                      string      `json:"name"`
	Description               string      `json:"description"`
	CategoryID                int64       `json:"category_id"`
	BrandID                   int64       `json:"brand_id"`
	CategoryName              null.String `json:"category_name"`
	ParentCategoryID          null.Int    `json:"parent_category_id"`
	CategoryImage             null.String `json:"category_image"`
	BrandName                 null.String `json:"brand_name"`
	BrandImage                null.String `json:"brand_image"`
	ParentProductActive       bool        `json:"parent_product_active"`
	SizeValue                 null.String `json:"size_value"`
	ProductImage1             null.String `json:"product_image_1"`
	ProductImage2             null.String `json:"product_image_2"`
	ProductImage3             null.String `json:"product_image_3"`
	ColorValue                null.String `json:"color_value"`
	CategoryPromoID           null.Int    `json:"category_promo_id"`
	CategoryPromoName         null.String `json:"category_promo_name"`
	CategoryPromoDescription  null.String `json:"category_promo_description"`
	CategoryPromoDiscountRate null.Int    `json:"category_promo_discount_rate"`
	CategoryPromoActive       bool        `json:"category_promo_active"`
	CategoryPromoStartDate    null.Time   `json:"category_promo_start_date"`
	CategoryPromoEndDate      null.Time   `json:"category_promo_end_date"`
	BrandPromoID              null.Int    `json:"brand_promo_id"`
	BrandPromoName            null.String `json:"brand_promo_name"`
	BrandPromoDescription     null.String `json:"brand_promo_description"`
	BrandPromoDiscountRate    null.Int    `json:"brand_promo_discount_rate"`
	BrandPromoActive          bool        `json:"brand_promo_active"`
	BrandPromoStartDate       null.Time   `json:"brand_promo_start_date"`
	BrandPromoEndDate         null.Time   `json:"brand_promo_end_date"`
	ProductPromoID            null.Int    `json:"product_promo_id"`
	ProductPromoName          null.String `json:"product_promo_name"`
	ProductPromoDescription   null.String `json:"product_promo_description"`
	ProductPromoDiscountRate  null.Int    `json:"product_promo_discount_rate"`
	ProductPromoActive        bool        `json:"product_promo_active"`
	ProductPromoStartDate     null.Time   `json:"product_promo_start_date"`
	ProductPromoEndDate       null.Time   `json:"product_promo_end_date"`
	NextAvailable             bool        `json:"next_available"`
}

func (q *Queries) ListProductItemsV2(ctx context.Context, arg ListProductItemsV2Params) ([]ListProductItemsV2Row, error) {
	rows, err := q.db.Query(ctx, listProductItemsV2,
		arg.Limit,
		arg.IsPromoted,
		arg.IsNew,
		arg.CategoryID,
		arg.BrandID,
		arg.ColorID,
		arg.SizeID,
		arg.OrderByLowPrice,
		arg.OrderByHighPrice,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProductItemsV2Row{}
	for rows.Next() {
		var i ListProductItemsV2Row
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.SizeID,
			&i.ImageID,
			&i.ColorID,
			&i.ProductSku,
			&i.QtyInStock,
			&i.Price,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.CategoryID,
			&i.BrandID,
			&i.CategoryName,
			&i.ParentCategoryID,
			&i.CategoryImage,
			&i.BrandName,
			&i.BrandImage,
			&i.ParentProductActive,
			&i.SizeValue,
			&i.ProductImage1,
			&i.ProductImage2,
			&i.ProductImage3,
			&i.ColorValue,
			&i.CategoryPromoID,
			&i.CategoryPromoName,
			&i.CategoryPromoDescription,
			&i.CategoryPromoDiscountRate,
			&i.CategoryPromoActive,
			&i.CategoryPromoStartDate,
			&i.CategoryPromoEndDate,
			&i.BrandPromoID,
			&i.BrandPromoName,
			&i.BrandPromoDescription,
			&i.BrandPromoDiscountRate,
			&i.BrandPromoActive,
			&i.BrandPromoStartDate,
			&i.BrandPromoEndDate,
			&i.ProductPromoID,
			&i.ProductPromoName,
			&i.ProductPromoDescription,
			&i.ProductPromoDiscountRate,
			&i.ProductPromoActive,
			&i.ProductPromoStartDate,
			&i.ProductPromoEndDate,
			&i.NextAvailable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductItemsV2Old = `-- name: ListProductItemsV2Old :many
SELECT pi.id, pi.product_id, pi.size_id, pi.image_id, pi.color_id, pi.product_sku, pi.qty_in_stock, pi.price, pi.active, pi.created_at, pi.updated_at, p.name, p.description, p.category_id, p.brand_id, pc.category_name, pc.parent_category_id,
 pc.category_image, pb.brand_name, pb.brand_image, p.active as parent_product_active, ps.size_value,
 pimg.product_image_1, pimg.product_image_2, pimg.product_image_3, pclr.color_value, COUNT(*) OVER() AS total_count,
 cpromo.id as category_promo_id, cpromo.name as category_promo_name, cpromo.description as category_promo_description,
 cpromo.discount_rate as category_promo_discount_rate, COALESCE(cpromo.active, false) as category_promo_active,
 cpromo.start_date as category_promo_start_date, cpromo.end_date as category_promo_end_date,
 bpromo.id as brand_promo_id, bpromo.name as brand_promo_name, bpromo.description as brand_promo_description,
 bpromo.discount_rate as brand_promo_discount_rate, COALESCE(bpromo.active, false) as brand_promo_active,
 bpromo.start_date as brand_promo_start_date, bpromo.end_date as brand_promo_end_date,
 ppromo.id as product_promo_id, ppromo.name as product_promo_name, ppromo.description as product_promo_description,
 ppromo.discount_rate as product_promo_discount_rate, COALESCE(ppromo.active, false) as product_promo_active,
 ppromo.start_date as product_promo_start_date, ppromo.end_date as product_promo_end_date
FROM "product_item" AS pi
LEFT JOIN "product" AS p ON p.id = pi.product_id AND p.active = TRUE
LEFT JOIN "product_size" AS ps ON ps.id = pi.size_id
LEFT JOIN "product_image" AS pimg ON pimg.id = pi.image_id
LEFT JOIN "product_color" AS pclr ON pclr.id = pi.color_id
LEFT JOIN "product_category" AS pc ON pc.id = p.category_id
LEFT JOIN "category_promotion" AS cp ON cp.category_id = p.category_id AND cp.active = true
LEFT JOIN "promotion" AS cpromo ON cpromo.id = cp.promotion_id AND cpromo.active =true AND cpromo.start_date <= CURRENT_DATE AND cpromo.end_date >= CURRENT_DATE
LEFT JOIN "product_brand" AS pb ON pb.id = p.brand_id
LEFT JOIN "brand_promotion" AS bp ON bp.brand_id = p.brand_id AND bp.active = true
LEFT JOIN "promotion" AS bpromo ON bpromo.id = bp.promotion_id AND bpromo.active =true AND bpromo.start_date <= CURRENT_DATE AND bpromo.end_date >= CURRENT_DATE
LEFT JOIN "product_promotion" AS pp ON pp.product_id = p.id AND pp.active = true
LEFT JOIN "promotion" AS ppromo ON ppromo.id = pp.promotion_id AND ppromo.active = true AND ppromo.start_date <= CURRENT_DATE AND ppromo.end_date >= CURRENT_DATE

WHERE pi.active = TRUE

AND CASE
WHEN COALESCE($2, false) = TRUE
THEN (cpromo.active = true OR
	bpromo.active = true OR
	ppromo.active = true)
ELSE 1=1
END
AND CASE
WHEN COALESCE($3, false) = TRUE
THEN pi.created_at >= CURRENT_DATE - INTERVAL '5 days'
ELSE 1=1
END
AND CASE
    WHEN COALESCE($4, 0) > 0 
    THEN pc.id = $4
    ELSE 1=1
END
AND CASE
    WHEN COALESCE($5, 0) > 0 
    THEN pb.id = $5
    ELSE 1=1
END
AND CASE
    WHEN COALESCE($6, 0) > 0 
    THEN pclr.id = $6
    ELSE 1=1
END
AND CASE
    WHEN COALESCE($7, 0) > 0 
    THEN ps.id = $7
    ELSE 1=1
END
ORDER BY pi.id DESC
LIMIT $1
`

type ListProductItemsV2OldParams struct {
	Limit      int32       `json:"limit"`
	IsPromoted interface{} `json:"is_promoted"`
	IsNew      interface{} `json:"is_new"`
	CategoryID interface{} `json:"category_id"`
	BrandID    interface{} `json:"brand_id"`
	ColorID    interface{} `json:"color_id"`
	SizeID     interface{} `json:"size_id"`
}

type ListProductItemsV2OldRow struct {
	ID                        int64       `json:"id"`
	ProductID                 int64       `json:"product_id"`
	SizeID                    int64       `json:"size_id"`
	ImageID                   int64       `json:"image_id"`
	ColorID                   int64       `json:"color_id"`
	ProductSku                int64       `json:"product_sku"`
	QtyInStock                int32       `json:"qty_in_stock"`
	Price                     string      `json:"price"`
	Active                    bool        `json:"active"`
	CreatedAt                 time.Time   `json:"created_at"`
	UpdatedAt                 time.Time   `json:"updated_at"`
	Name                      null.String `json:"name"`
	Description               null.String `json:"description"`
	CategoryID                null.Int    `json:"category_id"`
	BrandID                   null.Int    `json:"brand_id"`
	CategoryName              null.String `json:"category_name"`
	ParentCategoryID          null.Int    `json:"parent_category_id"`
	CategoryImage             null.String `json:"category_image"`
	BrandName                 null.String `json:"brand_name"`
	BrandImage                null.String `json:"brand_image"`
	ParentProductActive       null.Bool   `json:"parent_product_active"`
	SizeValue                 null.String `json:"size_value"`
	ProductImage1             null.String `json:"product_image_1"`
	ProductImage2             null.String `json:"product_image_2"`
	ProductImage3             null.String `json:"product_image_3"`
	ColorValue                null.String `json:"color_value"`
	TotalCount                int64       `json:"total_count"`
	CategoryPromoID           null.Int    `json:"category_promo_id"`
	CategoryPromoName         null.String `json:"category_promo_name"`
	CategoryPromoDescription  null.String `json:"category_promo_description"`
	CategoryPromoDiscountRate null.Int    `json:"category_promo_discount_rate"`
	CategoryPromoActive       bool        `json:"category_promo_active"`
	CategoryPromoStartDate    null.Time   `json:"category_promo_start_date"`
	CategoryPromoEndDate      null.Time   `json:"category_promo_end_date"`
	BrandPromoID              null.Int    `json:"brand_promo_id"`
	BrandPromoName            null.String `json:"brand_promo_name"`
	BrandPromoDescription     null.String `json:"brand_promo_description"`
	BrandPromoDiscountRate    null.Int    `json:"brand_promo_discount_rate"`
	BrandPromoActive          bool        `json:"brand_promo_active"`
	BrandPromoStartDate       null.Time   `json:"brand_promo_start_date"`
	BrandPromoEndDate         null.Time   `json:"brand_promo_end_date"`
	ProductPromoID            null.Int    `json:"product_promo_id"`
	ProductPromoName          null.String `json:"product_promo_name"`
	ProductPromoDescription   null.String `json:"product_promo_description"`
	ProductPromoDiscountRate  null.Int    `json:"product_promo_discount_rate"`
	ProductPromoActive        bool        `json:"product_promo_active"`
	ProductPromoStartDate     null.Time   `json:"product_promo_start_date"`
	ProductPromoEndDate       null.Time   `json:"product_promo_end_date"`
}

// WITH t1 (total_count) AS (
// SELECT COUNT(*) OVER() AS total_count
// FROM "product_item" AS pi
// WHERE pi.active = TRUE
// LIMIT 1
// )
func (q *Queries) ListProductItemsV2Old(ctx context.Context, arg ListProductItemsV2OldParams) ([]ListProductItemsV2OldRow, error) {
	rows, err := q.db.Query(ctx, listProductItemsV2Old,
		arg.Limit,
		arg.IsPromoted,
		arg.IsNew,
		arg.CategoryID,
		arg.BrandID,
		arg.ColorID,
		arg.SizeID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProductItemsV2OldRow{}
	for rows.Next() {
		var i ListProductItemsV2OldRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.SizeID,
			&i.ImageID,
			&i.ColorID,
			&i.ProductSku,
			&i.QtyInStock,
			&i.Price,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.CategoryID,
			&i.BrandID,
			&i.CategoryName,
			&i.ParentCategoryID,
			&i.CategoryImage,
			&i.BrandName,
			&i.BrandImage,
			&i.ParentProductActive,
			&i.SizeValue,
			&i.ProductImage1,
			&i.ProductImage2,
			&i.ProductImage3,
			&i.ColorValue,
			&i.TotalCount,
			&i.CategoryPromoID,
			&i.CategoryPromoName,
			&i.CategoryPromoDescription,
			&i.CategoryPromoDiscountRate,
			&i.CategoryPromoActive,
			&i.CategoryPromoStartDate,
			&i.CategoryPromoEndDate,
			&i.BrandPromoID,
			&i.BrandPromoName,
			&i.BrandPromoDescription,
			&i.BrandPromoDiscountRate,
			&i.BrandPromoActive,
			&i.BrandPromoStartDate,
			&i.BrandPromoEndDate,
			&i.ProductPromoID,
			&i.ProductPromoName,
			&i.ProductPromoDescription,
			&i.ProductPromoDiscountRate,
			&i.ProductPromoActive,
			&i.ProductPromoStartDate,
			&i.ProductPromoEndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductItemsWithBrandPromotions = `-- name: ListProductItemsWithBrandPromotions :many
WITH t1 AS(
SELECT 
 pi.id, pi.product_id, pi.size_id, pi.image_id, pi.color_id, pi.product_sku, pi.qty_in_stock, pi.price, pi.active, pi.created_at, pi.updated_at, p.name, p.description, p.category_id, p.brand_id, pc.category_name, pc.parent_category_id,
 pc.category_image, pb.brand_name, pb.brand_image, p.active AS parent_product_active, ps.size_value,
 pimg.product_image_1, pimg.product_image_2, pimg.product_image_3, pclr.color_value,
 bpromo.id AS brand_promo_id, bpromo.name AS brand_promo_name, bpromo.description AS brand_promo_description,
 bpromo.discount_rate AS brand_promo_discount_rate, COALESCE(bpromo.active, FALSE) AS brand_promo_active,
 bpromo.start_date AS brand_promo_start_date, bpromo.end_date AS brand_promo_end_date
FROM "product_item" AS pi
INNER JOIN "product" AS p ON p.id = pi.product_id
LEFT JOIN "product_size" AS ps ON ps.id = pi.size_id
LEFT JOIN "product_image" AS pimg ON pimg.id = pi.image_id
LEFT JOIN "product_color" AS pclr ON pclr.id = pi.color_id
LEFT JOIN "product_category" AS pc ON pc.id = p.category_id
LEFT JOIN "product_brand" AS pb ON pb.id = p.brand_id
INNER JOIN "brand_promotion" AS bp ON bp.brand_id = p.brand_id 
INNER JOIN "promotion" AS bpromo ON bpromo.id = bp.promotion_id  
 
WHERE 
pb.id = $2 AND
pi.active = TRUE AND
p.active =TRUE AND
((bp.active = TRUE
AND bpromo.active = TRUE
AND bpromo.start_date <= CURRENT_DATE 
AND bpromo.end_date >= CURRENT_DATE))
ORDER BY 
pi.id DESC,
p.id DESC
LIMIT $1 +1
)

SELECT id, product_id, size_id, image_id, color_id, product_sku, qty_in_stock, price, active, created_at, updated_at, name, description, category_id, brand_id, category_name, parent_category_id, category_image, brand_name, brand_image, parent_product_active, size_value, product_image_1, product_image_2, product_image_3, color_value, brand_promo_id, brand_promo_name, brand_promo_description, brand_promo_discount_rate, brand_promo_active, brand_promo_start_date, brand_promo_end_date,COUNT(*) OVER()>10 AS next_available FROM t1 
LIMIT $1
`

type ListProductItemsWithBrandPromotionsParams struct {
	Limit   int32 `json:"limit"`
	BrandID int64 `json:"brand_id"`
}

type ListProductItemsWithBrandPromotionsRow struct {
	ID                     int64       `json:"id"`
	ProductID              int64       `json:"product_id"`
	SizeID                 int64       `json:"size_id"`
	ImageID                int64       `json:"image_id"`
	ColorID                int64       `json:"color_id"`
	ProductSku             int64       `json:"product_sku"`
	QtyInStock             int32       `json:"qty_in_stock"`
	Price                  string      `json:"price"`
	Active                 bool        `json:"active"`
	CreatedAt              time.Time   `json:"created_at"`
	UpdatedAt              time.Time   `json:"updated_at"`
	Name                   string      `json:"name"`
	Description            string      `json:"description"`
	CategoryID             int64       `json:"category_id"`
	BrandID                int64       `json:"brand_id"`
	CategoryName           null.String `json:"category_name"`
	ParentCategoryID       null.Int    `json:"parent_category_id"`
	CategoryImage          null.String `json:"category_image"`
	BrandName              null.String `json:"brand_name"`
	BrandImage             null.String `json:"brand_image"`
	ParentProductActive    bool        `json:"parent_product_active"`
	SizeValue              null.String `json:"size_value"`
	ProductImage1          null.String `json:"product_image_1"`
	ProductImage2          null.String `json:"product_image_2"`
	ProductImage3          null.String `json:"product_image_3"`
	ColorValue             null.String `json:"color_value"`
	BrandPromoID           int64       `json:"brand_promo_id"`
	BrandPromoName         string      `json:"brand_promo_name"`
	BrandPromoDescription  string      `json:"brand_promo_description"`
	BrandPromoDiscountRate int64       `json:"brand_promo_discount_rate"`
	BrandPromoActive       bool        `json:"brand_promo_active"`
	BrandPromoStartDate    time.Time   `json:"brand_promo_start_date"`
	BrandPromoEndDate      time.Time   `json:"brand_promo_end_date"`
	NextAvailable          bool        `json:"next_available"`
}

func (q *Queries) ListProductItemsWithBrandPromotions(ctx context.Context, arg ListProductItemsWithBrandPromotionsParams) ([]ListProductItemsWithBrandPromotionsRow, error) {
	rows, err := q.db.Query(ctx, listProductItemsWithBrandPromotions, arg.Limit, arg.BrandID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProductItemsWithBrandPromotionsRow{}
	for rows.Next() {
		var i ListProductItemsWithBrandPromotionsRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.SizeID,
			&i.ImageID,
			&i.ColorID,
			&i.ProductSku,
			&i.QtyInStock,
			&i.Price,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.CategoryID,
			&i.BrandID,
			&i.CategoryName,
			&i.ParentCategoryID,
			&i.CategoryImage,
			&i.BrandName,
			&i.BrandImage,
			&i.ParentProductActive,
			&i.SizeValue,
			&i.ProductImage1,
			&i.ProductImage2,
			&i.ProductImage3,
			&i.ColorValue,
			&i.BrandPromoID,
			&i.BrandPromoName,
			&i.BrandPromoDescription,
			&i.BrandPromoDiscountRate,
			&i.BrandPromoActive,
			&i.BrandPromoStartDate,
			&i.BrandPromoEndDate,
			&i.NextAvailable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductItemsWithBrandPromotionsNextPage = `-- name: ListProductItemsWithBrandPromotionsNextPage :many
WITH t1 AS(
SELECT 
 pi.id, pi.product_id, pi.size_id, pi.image_id, pi.color_id, pi.product_sku, pi.qty_in_stock, pi.price, pi.active, pi.created_at, pi.updated_at, p.name, p.description, p.category_id, p.brand_id, pc.category_name, pc.parent_category_id,
 pc.category_image, pb.brand_name, pb.brand_image, p.active AS parent_product_active, ps.size_value,
 pimg.product_image_1, pimg.product_image_2, pimg.product_image_3, pclr.color_value,
 bpromo.id AS brand_promo_id, bpromo.name AS brand_promo_name, bpromo.description AS brand_promo_description,
 bpromo.discount_rate AS brand_promo_discount_rate, COALESCE(bpromo.active, FALSE) AS brand_promo_active,
 bpromo.start_date AS brand_promo_start_date, bpromo.end_date AS brand_promo_end_date
FROM "product_item" AS pi
INNER JOIN "product" AS p ON p.id = pi.product_id
LEFT JOIN "product_size" AS ps ON ps.id = pi.size_id
LEFT JOIN "product_image" AS pimg ON pimg.id = pi.image_id
LEFT JOIN "product_color" AS pclr ON pclr.id = pi.color_id
LEFT JOIN "product_category" AS pc ON pc.id = p.category_id
LEFT JOIN "product_brand" AS pb ON pb.id = p.brand_id
INNER JOIN "brand_promotion" AS bp ON bp.brand_id = p.brand_id 
INNER JOIN "promotion" AS bpromo ON bpromo.id = bp.promotion_id  
 
WHERE 
pb.id = $2 AND
pi.id < $3 AND
p.id < $4 AND
pi.active = TRUE AND
p.active =TRUE AND
((bp.active = TRUE
AND bpromo.active = TRUE
AND bpromo.start_date <= CURRENT_DATE 
AND bpromo.end_date >= CURRENT_DATE))
ORDER BY 
pi.id DESC,
p.id DESC
LIMIT $1 +1
)

SELECT id, product_id, size_id, image_id, color_id, product_sku, qty_in_stock, price, active, created_at, updated_at, name, description, category_id, brand_id, category_name, parent_category_id, category_image, brand_name, brand_image, parent_product_active, size_value, product_image_1, product_image_2, product_image_3, color_value, brand_promo_id, brand_promo_name, brand_promo_description, brand_promo_discount_rate, brand_promo_active, brand_promo_start_date, brand_promo_end_date,COUNT(*) OVER()>10 AS next_available FROM t1 
LIMIT $1
`

type ListProductItemsWithBrandPromotionsNextPageParams struct {
	Limit         int32 `json:"limit"`
	BrandID       int64 `json:"brand_id"`
	ProductItemID int64 `json:"product_item_id"`
	ProductID     int64 `json:"product_id"`
}

type ListProductItemsWithBrandPromotionsNextPageRow struct {
	ID                     int64       `json:"id"`
	ProductID              int64       `json:"product_id"`
	SizeID                 int64       `json:"size_id"`
	ImageID                int64       `json:"image_id"`
	ColorID                int64       `json:"color_id"`
	ProductSku             int64       `json:"product_sku"`
	QtyInStock             int32       `json:"qty_in_stock"`
	Price                  string      `json:"price"`
	Active                 bool        `json:"active"`
	CreatedAt              time.Time   `json:"created_at"`
	UpdatedAt              time.Time   `json:"updated_at"`
	Name                   string      `json:"name"`
	Description            string      `json:"description"`
	CategoryID             int64       `json:"category_id"`
	BrandID                int64       `json:"brand_id"`
	CategoryName           null.String `json:"category_name"`
	ParentCategoryID       null.Int    `json:"parent_category_id"`
	CategoryImage          null.String `json:"category_image"`
	BrandName              null.String `json:"brand_name"`
	BrandImage             null.String `json:"brand_image"`
	ParentProductActive    bool        `json:"parent_product_active"`
	SizeValue              null.String `json:"size_value"`
	ProductImage1          null.String `json:"product_image_1"`
	ProductImage2          null.String `json:"product_image_2"`
	ProductImage3          null.String `json:"product_image_3"`
	ColorValue             null.String `json:"color_value"`
	BrandPromoID           int64       `json:"brand_promo_id"`
	BrandPromoName         string      `json:"brand_promo_name"`
	BrandPromoDescription  string      `json:"brand_promo_description"`
	BrandPromoDiscountRate int64       `json:"brand_promo_discount_rate"`
	BrandPromoActive       bool        `json:"brand_promo_active"`
	BrandPromoStartDate    time.Time   `json:"brand_promo_start_date"`
	BrandPromoEndDate      time.Time   `json:"brand_promo_end_date"`
	NextAvailable          bool        `json:"next_available"`
}

func (q *Queries) ListProductItemsWithBrandPromotionsNextPage(ctx context.Context, arg ListProductItemsWithBrandPromotionsNextPageParams) ([]ListProductItemsWithBrandPromotionsNextPageRow, error) {
	rows, err := q.db.Query(ctx, listProductItemsWithBrandPromotionsNextPage,
		arg.Limit,
		arg.BrandID,
		arg.ProductItemID,
		arg.ProductID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProductItemsWithBrandPromotionsNextPageRow{}
	for rows.Next() {
		var i ListProductItemsWithBrandPromotionsNextPageRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.SizeID,
			&i.ImageID,
			&i.ColorID,
			&i.ProductSku,
			&i.QtyInStock,
			&i.Price,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.CategoryID,
			&i.BrandID,
			&i.CategoryName,
			&i.ParentCategoryID,
			&i.CategoryImage,
			&i.BrandName,
			&i.BrandImage,
			&i.ParentProductActive,
			&i.SizeValue,
			&i.ProductImage1,
			&i.ProductImage2,
			&i.ProductImage3,
			&i.ColorValue,
			&i.BrandPromoID,
			&i.BrandPromoName,
			&i.BrandPromoDescription,
			&i.BrandPromoDiscountRate,
			&i.BrandPromoActive,
			&i.BrandPromoStartDate,
			&i.BrandPromoEndDate,
			&i.NextAvailable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductItemsWithCategoryPromotions = `-- name: ListProductItemsWithCategoryPromotions :many
WITH t1 AS(
SELECT 
 pi.id, pi.product_id, pi.size_id, pi.image_id, pi.color_id, pi.product_sku, pi.qty_in_stock, pi.price, pi.active, pi.created_at, pi.updated_at, p.name, p.description, p.category_id, p.brand_id, pc.category_name, pc.parent_category_id,
 pc.category_image, pb.brand_name, pb.brand_image, p.active AS parent_product_active, ps.size_value,
 pimg.product_image_1, pimg.product_image_2, pimg.product_image_3, pclr.color_value,
cpromo.id AS category_promo_id, cpromo.name AS category_promo_name, cpromo.description AS category_promo_description,
 cpromo.discount_rate AS category_promo_discount_rate, COALESCE(cpromo.active, FALSE) AS category_promo_active,
 cpromo.start_date AS category_promo_start_date, cpromo.end_date AS category_promo_end_date
FROM "product_item" AS pi
INNER JOIN "product" AS p ON p.id = pi.product_id
LEFT JOIN "product_size" AS ps ON ps.id = pi.size_id
LEFT JOIN "product_image" AS pimg ON pimg.id = pi.image_id
LEFT JOIN "product_color" AS pclr ON pclr.id = pi.color_id
LEFT JOIN "product_category" AS pc ON pc.id = p.category_id
INNER JOIN "category_promotion" AS cp ON cp.category_id = p.category_id 
INNER JOIN "promotion" AS cpromo ON cpromo.id = cp.promotion_id  
LEFT JOIN "product_brand" AS pb ON pb.id = p.brand_id 
 
WHERE 
pc.id = $2 AND
pi.active = TRUE AND
p.active =TRUE AND
((cp.active = TRUE
AND cpromo.active = TRUE
AND cpromo.start_date <= CURRENT_DATE 
AND cpromo.end_date >= CURRENT_DATE))
ORDER BY 
pi.id DESC,
p.id DESC
LIMIT $1 +1
)

SELECT id, product_id, size_id, image_id, color_id, product_sku, qty_in_stock, price, active, created_at, updated_at, name, description, category_id, brand_id, category_name, parent_category_id, category_image, brand_name, brand_image, parent_product_active, size_value, product_image_1, product_image_2, product_image_3, color_value, category_promo_id, category_promo_name, category_promo_description, category_promo_discount_rate, category_promo_active, category_promo_start_date, category_promo_end_date,COUNT(*) OVER()>10 AS next_available FROM t1 
LIMIT $1
`

type ListProductItemsWithCategoryPromotionsParams struct {
	Limit      int32 `json:"limit"`
	CategoryID int64 `json:"category_id"`
}

type ListProductItemsWithCategoryPromotionsRow struct {
	ID                        int64       `json:"id"`
	ProductID                 int64       `json:"product_id"`
	SizeID                    int64       `json:"size_id"`
	ImageID                   int64       `json:"image_id"`
	ColorID                   int64       `json:"color_id"`
	ProductSku                int64       `json:"product_sku"`
	QtyInStock                int32       `json:"qty_in_stock"`
	Price                     string      `json:"price"`
	Active                    bool        `json:"active"`
	CreatedAt                 time.Time   `json:"created_at"`
	UpdatedAt                 time.Time   `json:"updated_at"`
	Name                      string      `json:"name"`
	Description               string      `json:"description"`
	CategoryID                int64       `json:"category_id"`
	BrandID                   int64       `json:"brand_id"`
	CategoryName              null.String `json:"category_name"`
	ParentCategoryID          null.Int    `json:"parent_category_id"`
	CategoryImage             null.String `json:"category_image"`
	BrandName                 null.String `json:"brand_name"`
	BrandImage                null.String `json:"brand_image"`
	ParentProductActive       bool        `json:"parent_product_active"`
	SizeValue                 null.String `json:"size_value"`
	ProductImage1             null.String `json:"product_image_1"`
	ProductImage2             null.String `json:"product_image_2"`
	ProductImage3             null.String `json:"product_image_3"`
	ColorValue                null.String `json:"color_value"`
	CategoryPromoID           int64       `json:"category_promo_id"`
	CategoryPromoName         string      `json:"category_promo_name"`
	CategoryPromoDescription  string      `json:"category_promo_description"`
	CategoryPromoDiscountRate int64       `json:"category_promo_discount_rate"`
	CategoryPromoActive       bool        `json:"category_promo_active"`
	CategoryPromoStartDate    time.Time   `json:"category_promo_start_date"`
	CategoryPromoEndDate      time.Time   `json:"category_promo_end_date"`
	NextAvailable             bool        `json:"next_available"`
}

func (q *Queries) ListProductItemsWithCategoryPromotions(ctx context.Context, arg ListProductItemsWithCategoryPromotionsParams) ([]ListProductItemsWithCategoryPromotionsRow, error) {
	rows, err := q.db.Query(ctx, listProductItemsWithCategoryPromotions, arg.Limit, arg.CategoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProductItemsWithCategoryPromotionsRow{}
	for rows.Next() {
		var i ListProductItemsWithCategoryPromotionsRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.SizeID,
			&i.ImageID,
			&i.ColorID,
			&i.ProductSku,
			&i.QtyInStock,
			&i.Price,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.CategoryID,
			&i.BrandID,
			&i.CategoryName,
			&i.ParentCategoryID,
			&i.CategoryImage,
			&i.BrandName,
			&i.BrandImage,
			&i.ParentProductActive,
			&i.SizeValue,
			&i.ProductImage1,
			&i.ProductImage2,
			&i.ProductImage3,
			&i.ColorValue,
			&i.CategoryPromoID,
			&i.CategoryPromoName,
			&i.CategoryPromoDescription,
			&i.CategoryPromoDiscountRate,
			&i.CategoryPromoActive,
			&i.CategoryPromoStartDate,
			&i.CategoryPromoEndDate,
			&i.NextAvailable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductItemsWithCategoryPromotionsNextPage = `-- name: ListProductItemsWithCategoryPromotionsNextPage :many
WITH t1 AS(
SELECT 
 pi.id, pi.product_id, pi.size_id, pi.image_id, pi.color_id, pi.product_sku, pi.qty_in_stock, pi.price, pi.active, pi.created_at, pi.updated_at, p.name, p.description, p.category_id, p.brand_id, pc.category_name, pc.parent_category_id,
 pc.category_image, pb.brand_name, pb.brand_image, p.active AS parent_product_active, ps.size_value,
 pimg.product_image_1, pimg.product_image_2, pimg.product_image_3, pclr.color_value,
cpromo.id AS category_promo_id, cpromo.name AS category_promo_name, cpromo.description AS category_promo_description,
 cpromo.discount_rate AS category_promo_discount_rate, COALESCE(cpromo.active, FALSE) AS category_promo_active,
 cpromo.start_date AS category_promo_start_date, cpromo.end_date AS category_promo_end_date
FROM "product_item" AS pi
INNER JOIN "product" AS p ON p.id = pi.product_id
LEFT JOIN "product_size" AS ps ON ps.id = pi.size_id
LEFT JOIN "product_image" AS pimg ON pimg.id = pi.image_id
LEFT JOIN "product_color" AS pclr ON pclr.id = pi.color_id
LEFT JOIN "product_category" AS pc ON pc.id = p.category_id
INNER JOIN "category_promotion" AS cp ON cp.category_id = p.category_id 
INNER JOIN "promotion" AS cpromo ON cpromo.id = cp.promotion_id  
LEFT JOIN "product_brand" AS pb ON pb.id = p.brand_id
 
WHERE 
pc.id = $2 AND
pi.id < $3 AND
p.id < $4 AND
pi.active = TRUE AND
p.active =TRUE AND
((cp.active = TRUE
AND cpromo.active = TRUE
AND cpromo.start_date <= CURRENT_DATE 
AND cpromo.end_date >= CURRENT_DATE))
ORDER BY 
pi.id DESC,
p.id DESC
LIMIT $1 +1
)

SELECT id, product_id, size_id, image_id, color_id, product_sku, qty_in_stock, price, active, created_at, updated_at, name, description, category_id, brand_id, category_name, parent_category_id, category_image, brand_name, brand_image, parent_product_active, size_value, product_image_1, product_image_2, product_image_3, color_value, category_promo_id, category_promo_name, category_promo_description, category_promo_discount_rate, category_promo_active, category_promo_start_date, category_promo_end_date,COUNT(*) OVER()>10 AS next_available FROM t1 
LIMIT $1
`

type ListProductItemsWithCategoryPromotionsNextPageParams struct {
	Limit         int32 `json:"limit"`
	CategoryID    int64 `json:"category_id"`
	ProductItemID int64 `json:"product_item_id"`
	ProductID     int64 `json:"product_id"`
}

type ListProductItemsWithCategoryPromotionsNextPageRow struct {
	ID                        int64       `json:"id"`
	ProductID                 int64       `json:"product_id"`
	SizeID                    int64       `json:"size_id"`
	ImageID                   int64       `json:"image_id"`
	ColorID                   int64       `json:"color_id"`
	ProductSku                int64       `json:"product_sku"`
	QtyInStock                int32       `json:"qty_in_stock"`
	Price                     string      `json:"price"`
	Active                    bool        `json:"active"`
	CreatedAt                 time.Time   `json:"created_at"`
	UpdatedAt                 time.Time   `json:"updated_at"`
	Name                      string      `json:"name"`
	Description               string      `json:"description"`
	CategoryID                int64       `json:"category_id"`
	BrandID                   int64       `json:"brand_id"`
	CategoryName              null.String `json:"category_name"`
	ParentCategoryID          null.Int    `json:"parent_category_id"`
	CategoryImage             null.String `json:"category_image"`
	BrandName                 null.String `json:"brand_name"`
	BrandImage                null.String `json:"brand_image"`
	ParentProductActive       bool        `json:"parent_product_active"`
	SizeValue                 null.String `json:"size_value"`
	ProductImage1             null.String `json:"product_image_1"`
	ProductImage2             null.String `json:"product_image_2"`
	ProductImage3             null.String `json:"product_image_3"`
	ColorValue                null.String `json:"color_value"`
	CategoryPromoID           int64       `json:"category_promo_id"`
	CategoryPromoName         string      `json:"category_promo_name"`
	CategoryPromoDescription  string      `json:"category_promo_description"`
	CategoryPromoDiscountRate int64       `json:"category_promo_discount_rate"`
	CategoryPromoActive       bool        `json:"category_promo_active"`
	CategoryPromoStartDate    time.Time   `json:"category_promo_start_date"`
	CategoryPromoEndDate      time.Time   `json:"category_promo_end_date"`
	NextAvailable             bool        `json:"next_available"`
}

func (q *Queries) ListProductItemsWithCategoryPromotionsNextPage(ctx context.Context, arg ListProductItemsWithCategoryPromotionsNextPageParams) ([]ListProductItemsWithCategoryPromotionsNextPageRow, error) {
	rows, err := q.db.Query(ctx, listProductItemsWithCategoryPromotionsNextPage,
		arg.Limit,
		arg.CategoryID,
		arg.ProductItemID,
		arg.ProductID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProductItemsWithCategoryPromotionsNextPageRow{}
	for rows.Next() {
		var i ListProductItemsWithCategoryPromotionsNextPageRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.SizeID,
			&i.ImageID,
			&i.ColorID,
			&i.ProductSku,
			&i.QtyInStock,
			&i.Price,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.CategoryID,
			&i.BrandID,
			&i.CategoryName,
			&i.ParentCategoryID,
			&i.CategoryImage,
			&i.BrandName,
			&i.BrandImage,
			&i.ParentProductActive,
			&i.SizeValue,
			&i.ProductImage1,
			&i.ProductImage2,
			&i.ProductImage3,
			&i.ColorValue,
			&i.CategoryPromoID,
			&i.CategoryPromoName,
			&i.CategoryPromoDescription,
			&i.CategoryPromoDiscountRate,
			&i.CategoryPromoActive,
			&i.CategoryPromoStartDate,
			&i.CategoryPromoEndDate,
			&i.NextAvailable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductItemsWithPromotions = `-- name: ListProductItemsWithPromotions :many
WITH t1 AS(
SELECT 
 pi.id, pi.product_id, pi.size_id, pi.image_id, pi.color_id, pi.product_sku, pi.qty_in_stock, pi.price, pi.active, pi.created_at, pi.updated_at, p.name, p.description, p.category_id, p.brand_id, pc.category_name, pc.parent_category_id,
 pc.category_image, pb.brand_name, pb.brand_image, p.active AS parent_product_active, ps.size_value,
 pimg.product_image_1, pimg.product_image_2, pimg.product_image_3, pclr.color_value,
 ppromo.id AS product_promo_id, ppromo.name AS product_promo_name, ppromo.description AS product_promo_description,
 ppromo.discount_rate AS product_promo_discount_rate, COALESCE(ppromo.active, FALSE) AS product_promo_active,
 ppromo.start_date AS product_promo_start_date, ppromo.end_date AS product_promo_end_date
FROM "product_item" AS pi
INNER JOIN "product" AS p ON p.id = pi.product_id
LEFT JOIN "product_size" AS ps ON ps.id = pi.size_id
LEFT JOIN "product_image" AS pimg ON pimg.id = pi.image_id
LEFT JOIN "product_color" AS pclr ON pclr.id = pi.color_id
INNER JOIN "product_promotion" AS pp ON pp.product_id = p.id 
INNER JOIN "promotion" AS ppromo ON ppromo.id = pp.promotion_id 
LEFT JOIN "product_category" AS pc ON pc.id = p.category_id
LEFT JOIN "product_brand" AS pb ON pb.id = p.brand_id
 
WHERE 
p.id = $2 AND
pi.active = TRUE AND
p.active = TRUE AND
((pp.active = TRUE
AND ppromo.active = TRUE
AND ppromo.start_date <= CURRENT_DATE 
AND ppromo.end_date >= CURRENT_DATE))
ORDER BY 
pi.id DESC,
p.id DESC
LIMIT $1 +1
)

SELECT id, product_id, size_id, image_id, color_id, product_sku, qty_in_stock, price, active, created_at, updated_at, name, description, category_id, brand_id, category_name, parent_category_id, category_image, brand_name, brand_image, parent_product_active, size_value, product_image_1, product_image_2, product_image_3, color_value, product_promo_id, product_promo_name, product_promo_description, product_promo_discount_rate, product_promo_active, product_promo_start_date, product_promo_end_date,COUNT(*) OVER()>10 AS next_available FROM t1 
LIMIT $1
`

type ListProductItemsWithPromotionsParams struct {
	Limit     int32 `json:"limit"`
	ProductID int64 `json:"product_id"`
}

type ListProductItemsWithPromotionsRow struct {
	ID                       int64       `json:"id"`
	ProductID                int64       `json:"product_id"`
	SizeID                   int64       `json:"size_id"`
	ImageID                  int64       `json:"image_id"`
	ColorID                  int64       `json:"color_id"`
	ProductSku               int64       `json:"product_sku"`
	QtyInStock               int32       `json:"qty_in_stock"`
	Price                    string      `json:"price"`
	Active                   bool        `json:"active"`
	CreatedAt                time.Time   `json:"created_at"`
	UpdatedAt                time.Time   `json:"updated_at"`
	Name                     string      `json:"name"`
	Description              string      `json:"description"`
	CategoryID               int64       `json:"category_id"`
	BrandID                  int64       `json:"brand_id"`
	CategoryName             null.String `json:"category_name"`
	ParentCategoryID         null.Int    `json:"parent_category_id"`
	CategoryImage            null.String `json:"category_image"`
	BrandName                null.String `json:"brand_name"`
	BrandImage               null.String `json:"brand_image"`
	ParentProductActive      bool        `json:"parent_product_active"`
	SizeValue                null.String `json:"size_value"`
	ProductImage1            null.String `json:"product_image_1"`
	ProductImage2            null.String `json:"product_image_2"`
	ProductImage3            null.String `json:"product_image_3"`
	ColorValue               null.String `json:"color_value"`
	ProductPromoID           int64       `json:"product_promo_id"`
	ProductPromoName         string      `json:"product_promo_name"`
	ProductPromoDescription  string      `json:"product_promo_description"`
	ProductPromoDiscountRate int64       `json:"product_promo_discount_rate"`
	ProductPromoActive       bool        `json:"product_promo_active"`
	ProductPromoStartDate    time.Time   `json:"product_promo_start_date"`
	ProductPromoEndDate      time.Time   `json:"product_promo_end_date"`
	NextAvailable            bool        `json:"next_available"`
}

func (q *Queries) ListProductItemsWithPromotions(ctx context.Context, arg ListProductItemsWithPromotionsParams) ([]ListProductItemsWithPromotionsRow, error) {
	rows, err := q.db.Query(ctx, listProductItemsWithPromotions, arg.Limit, arg.ProductID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProductItemsWithPromotionsRow{}
	for rows.Next() {
		var i ListProductItemsWithPromotionsRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.SizeID,
			&i.ImageID,
			&i.ColorID,
			&i.ProductSku,
			&i.QtyInStock,
			&i.Price,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.CategoryID,
			&i.BrandID,
			&i.CategoryName,
			&i.ParentCategoryID,
			&i.CategoryImage,
			&i.BrandName,
			&i.BrandImage,
			&i.ParentProductActive,
			&i.SizeValue,
			&i.ProductImage1,
			&i.ProductImage2,
			&i.ProductImage3,
			&i.ColorValue,
			&i.ProductPromoID,
			&i.ProductPromoName,
			&i.ProductPromoDescription,
			&i.ProductPromoDiscountRate,
			&i.ProductPromoActive,
			&i.ProductPromoStartDate,
			&i.ProductPromoEndDate,
			&i.NextAvailable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductItemsWithPromotionsNextPage = `-- name: ListProductItemsWithPromotionsNextPage :many
WITH t1 AS(
SELECT 
 pi.id, pi.product_id, pi.size_id, pi.image_id, pi.color_id, pi.product_sku, pi.qty_in_stock, pi.price, pi.active, pi.created_at, pi.updated_at, p.name, p.description, p.category_id, p.brand_id, pc.category_name, pc.parent_category_id,
 pc.category_image, pb.brand_name, pb.brand_image, p.active AS parent_product_active, ps.size_value,
 pimg.product_image_1, pimg.product_image_2, pimg.product_image_3, pclr.color_value,
 ppromo.id AS product_promo_id, ppromo.name AS product_promo_name, ppromo.description AS product_promo_description,
 ppromo.discount_rate AS product_promo_discount_rate, COALESCE(ppromo.active, FALSE) AS product_promo_active,
 ppromo.start_date AS product_promo_start_date, ppromo.end_date AS product_promo_end_date
FROM "product_item" AS pi
INNER JOIN "product" AS p ON p.id = pi.product_id
LEFT JOIN "product_size" AS ps ON ps.id = pi.size_id
LEFT JOIN "product_image" AS pimg ON pimg.id = pi.image_id
LEFT JOIN "product_color" AS pclr ON pclr.id = pi.color_id
INNER JOIN "product_promotion" AS pp ON pp.product_id = p.id 
INNER JOIN "promotion" AS ppromo ON ppromo.id = pp.promotion_id 
LEFT JOIN "product_category" AS pc ON pc.id = p.category_id
LEFT JOIN "product_brand" AS pb ON pb.id = p.brand_id
 
WHERE 
p.id = $2 AND
pi.id < $3 AND
pi.active = TRUE AND
p.active =TRUE AND
((pp.active = TRUE
AND ppromo.active = TRUE
AND ppromo.start_date <= CURRENT_DATE 
AND ppromo.end_date >= CURRENT_DATE))
ORDER BY 
pi.id DESC,
p.id DESC
LIMIT $1 +1
)

SELECT id, product_id, size_id, image_id, color_id, product_sku, qty_in_stock, price, active, created_at, updated_at, name, description, category_id, brand_id, category_name, parent_category_id, category_image, brand_name, brand_image, parent_product_active, size_value, product_image_1, product_image_2, product_image_3, color_value, product_promo_id, product_promo_name, product_promo_description, product_promo_discount_rate, product_promo_active, product_promo_start_date, product_promo_end_date,COUNT(*) OVER()>10 AS next_available FROM t1 
LIMIT $1
`

type ListProductItemsWithPromotionsNextPageParams struct {
	Limit         int32 `json:"limit"`
	ProductID     int64 `json:"product_id"`
	ProductItemID int64 `json:"product_item_id"`
}

type ListProductItemsWithPromotionsNextPageRow struct {
	ID                       int64       `json:"id"`
	ProductID                int64       `json:"product_id"`
	SizeID                   int64       `json:"size_id"`
	ImageID                  int64       `json:"image_id"`
	ColorID                  int64       `json:"color_id"`
	ProductSku               int64       `json:"product_sku"`
	QtyInStock               int32       `json:"qty_in_stock"`
	Price                    string      `json:"price"`
	Active                   bool        `json:"active"`
	CreatedAt                time.Time   `json:"created_at"`
	UpdatedAt                time.Time   `json:"updated_at"`
	Name                     string      `json:"name"`
	Description              string      `json:"description"`
	CategoryID               int64       `json:"category_id"`
	BrandID                  int64       `json:"brand_id"`
	CategoryName             null.String `json:"category_name"`
	ParentCategoryID         null.Int    `json:"parent_category_id"`
	CategoryImage            null.String `json:"category_image"`
	BrandName                null.String `json:"brand_name"`
	BrandImage               null.String `json:"brand_image"`
	ParentProductActive      bool        `json:"parent_product_active"`
	SizeValue                null.String `json:"size_value"`
	ProductImage1            null.String `json:"product_image_1"`
	ProductImage2            null.String `json:"product_image_2"`
	ProductImage3            null.String `json:"product_image_3"`
	ColorValue               null.String `json:"color_value"`
	ProductPromoID           int64       `json:"product_promo_id"`
	ProductPromoName         string      `json:"product_promo_name"`
	ProductPromoDescription  string      `json:"product_promo_description"`
	ProductPromoDiscountRate int64       `json:"product_promo_discount_rate"`
	ProductPromoActive       bool        `json:"product_promo_active"`
	ProductPromoStartDate    time.Time   `json:"product_promo_start_date"`
	ProductPromoEndDate      time.Time   `json:"product_promo_end_date"`
	NextAvailable            bool        `json:"next_available"`
}

func (q *Queries) ListProductItemsWithPromotionsNextPage(ctx context.Context, arg ListProductItemsWithPromotionsNextPageParams) ([]ListProductItemsWithPromotionsNextPageRow, error) {
	rows, err := q.db.Query(ctx, listProductItemsWithPromotionsNextPage, arg.Limit, arg.ProductID, arg.ProductItemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProductItemsWithPromotionsNextPageRow{}
	for rows.Next() {
		var i ListProductItemsWithPromotionsNextPageRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.SizeID,
			&i.ImageID,
			&i.ColorID,
			&i.ProductSku,
			&i.QtyInStock,
			&i.Price,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.CategoryID,
			&i.BrandID,
			&i.CategoryName,
			&i.ParentCategoryID,
			&i.CategoryImage,
			&i.BrandName,
			&i.BrandImage,
			&i.ParentProductActive,
			&i.SizeValue,
			&i.ProductImage1,
			&i.ProductImage2,
			&i.ProductImage3,
			&i.ColorValue,
			&i.ProductPromoID,
			&i.ProductPromoName,
			&i.ProductPromoDescription,
			&i.ProductPromoDiscountRate,
			&i.ProductPromoActive,
			&i.ProductPromoStartDate,
			&i.ProductPromoEndDate,
			&i.NextAvailable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchProductItems = `-- name: SearchProductItems :many
WITH t1 AS(
SELECT 
 pi.id, pi.product_id, pi.size_id, pi.image_id, pi.color_id, pi.product_sku, pi.qty_in_stock, pi.price, pi.active, pi.created_at, pi.updated_at, p.name, p.description, p.category_id, p.brand_id, pc.category_name, pc.parent_category_id,
 pc.category_image, pb.brand_name, pb.brand_image, p.active AS parent_product_active, ps.size_value,
 pimg.product_image_1, pimg.product_image_2, pimg.product_image_3, pclr.color_value,
 cpromo.id AS category_promo_id, cpromo.name AS category_promo_name, cpromo.description AS category_promo_description,
 cpromo.discount_rate AS category_promo_discount_rate, COALESCE(cpromo.active, FALSE) AS category_promo_active,
 cpromo.start_date AS category_promo_start_date, cpromo.end_date AS category_promo_end_date,
 bpromo.id AS brand_promo_id, bpromo.name AS brand_promo_name, bpromo.description AS brand_promo_description,
 bpromo.discount_rate AS brand_promo_discount_rate, COALESCE(bpromo.active, FALSE) AS brand_promo_active,
 bpromo.start_date AS brand_promo_start_date, bpromo.end_date AS brand_promo_end_date,
 ppromo.id AS product_promo_id, ppromo.name AS product_promo_name, ppromo.description AS product_promo_description,
 ppromo.discount_rate AS product_promo_discount_rate, COALESCE(ppromo.active, FALSE) AS product_promo_active,
 ppromo.start_date AS product_promo_start_date, ppromo.end_date AS product_promo_end_date
FROM "product_item" AS pi
INNER JOIN "product" AS p ON p.id = pi.product_id
LEFT JOIN "product_size" AS ps ON ps.id = pi.size_id
LEFT JOIN "product_image" AS pimg ON pimg.id = pi.image_id
LEFT JOIN "product_color" AS pclr ON pclr.id = pi.color_id
LEFT JOIN "product_promotion" AS pp ON pp.product_id = p.id 
LEFT JOIN "promotion" AS ppromo ON ppromo.id = pp.promotion_id  
LEFT JOIN "product_category" AS pc ON pc.id = p.category_id
LEFT JOIN "category_promotion" AS cp ON cp.category_id = p.category_id 
LEFT JOIN "promotion" AS cpromo ON cpromo.id = cp.promotion_id  
LEFT JOIN "product_brand" AS pb ON pb.id = p.brand_id
LEFT JOIN "brand_promotion" AS bp ON bp.brand_id = p.brand_id 
LEFT JOIN "promotion" AS bpromo ON bpromo.id = bp.promotion_id  
WHERE 
pi.active = TRUE AND
p.active =TRUE AND
p.search @@ 
CASE
    WHEN char_length($2) > 0 THEN to_tsquery(concat($2, ':*'))
    ELSE to_tsquery($2)
END
ORDER BY 
pi.id DESC,
p.id DESC,
ts_rank(p.search, 
CASE
    WHEN char_length($2) > 0 THEN to_tsquery(concat($2, ':*'))
    ELSE to_tsquery($2)
END
) DESC
LIMIT $1 +1
)

SELECT id, product_id, size_id, image_id, color_id, product_sku, qty_in_stock, price, active, created_at, updated_at, name, description, category_id, brand_id, category_name, parent_category_id, category_image, brand_name, brand_image, parent_product_active, size_value, product_image_1, product_image_2, product_image_3, color_value, category_promo_id, category_promo_name, category_promo_description, category_promo_discount_rate, category_promo_active, category_promo_start_date, category_promo_end_date, brand_promo_id, brand_promo_name, brand_promo_description, brand_promo_discount_rate, brand_promo_active, brand_promo_start_date, brand_promo_end_date, product_promo_id, product_promo_name, product_promo_description, product_promo_discount_rate, product_promo_active, product_promo_start_date, product_promo_end_date,COUNT(*) OVER()>10 AS next_available FROM t1 
LIMIT $1
`

type SearchProductItemsParams struct {
	Limit int32       `json:"limit"`
	Query interface{} `json:"query"`
}

type SearchProductItemsRow struct {
	ID                        int64       `json:"id"`
	ProductID                 int64       `json:"product_id"`
	SizeID                    int64       `json:"size_id"`
	ImageID                   int64       `json:"image_id"`
	ColorID                   int64       `json:"color_id"`
	ProductSku                int64       `json:"product_sku"`
	QtyInStock                int32       `json:"qty_in_stock"`
	Price                     string      `json:"price"`
	Active                    bool        `json:"active"`
	CreatedAt                 time.Time   `json:"created_at"`
	UpdatedAt                 time.Time   `json:"updated_at"`
	Name                      string      `json:"name"`
	Description               string      `json:"description"`
	CategoryID                int64       `json:"category_id"`
	BrandID                   int64       `json:"brand_id"`
	CategoryName              null.String `json:"category_name"`
	ParentCategoryID          null.Int    `json:"parent_category_id"`
	CategoryImage             null.String `json:"category_image"`
	BrandName                 null.String `json:"brand_name"`
	BrandImage                null.String `json:"brand_image"`
	ParentProductActive       bool        `json:"parent_product_active"`
	SizeValue                 null.String `json:"size_value"`
	ProductImage1             null.String `json:"product_image_1"`
	ProductImage2             null.String `json:"product_image_2"`
	ProductImage3             null.String `json:"product_image_3"`
	ColorValue                null.String `json:"color_value"`
	CategoryPromoID           null.Int    `json:"category_promo_id"`
	CategoryPromoName         null.String `json:"category_promo_name"`
	CategoryPromoDescription  null.String `json:"category_promo_description"`
	CategoryPromoDiscountRate null.Int    `json:"category_promo_discount_rate"`
	CategoryPromoActive       bool        `json:"category_promo_active"`
	CategoryPromoStartDate    null.Time   `json:"category_promo_start_date"`
	CategoryPromoEndDate      null.Time   `json:"category_promo_end_date"`
	BrandPromoID              null.Int    `json:"brand_promo_id"`
	BrandPromoName            null.String `json:"brand_promo_name"`
	BrandPromoDescription     null.String `json:"brand_promo_description"`
	BrandPromoDiscountRate    null.Int    `json:"brand_promo_discount_rate"`
	BrandPromoActive          bool        `json:"brand_promo_active"`
	BrandPromoStartDate       null.Time   `json:"brand_promo_start_date"`
	BrandPromoEndDate         null.Time   `json:"brand_promo_end_date"`
	ProductPromoID            null.Int    `json:"product_promo_id"`
	ProductPromoName          null.String `json:"product_promo_name"`
	ProductPromoDescription   null.String `json:"product_promo_description"`
	ProductPromoDiscountRate  null.Int    `json:"product_promo_discount_rate"`
	ProductPromoActive        bool        `json:"product_promo_active"`
	ProductPromoStartDate     null.Time   `json:"product_promo_start_date"`
	ProductPromoEndDate       null.Time   `json:"product_promo_end_date"`
	NextAvailable             bool        `json:"next_available"`
}

func (q *Queries) SearchProductItems(ctx context.Context, arg SearchProductItemsParams) ([]SearchProductItemsRow, error) {
	rows, err := q.db.Query(ctx, searchProductItems, arg.Limit, arg.Query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchProductItemsRow{}
	for rows.Next() {
		var i SearchProductItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.SizeID,
			&i.ImageID,
			&i.ColorID,
			&i.ProductSku,
			&i.QtyInStock,
			&i.Price,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.CategoryID,
			&i.BrandID,
			&i.CategoryName,
			&i.ParentCategoryID,
			&i.CategoryImage,
			&i.BrandName,
			&i.BrandImage,
			&i.ParentProductActive,
			&i.SizeValue,
			&i.ProductImage1,
			&i.ProductImage2,
			&i.ProductImage3,
			&i.ColorValue,
			&i.CategoryPromoID,
			&i.CategoryPromoName,
			&i.CategoryPromoDescription,
			&i.CategoryPromoDiscountRate,
			&i.CategoryPromoActive,
			&i.CategoryPromoStartDate,
			&i.CategoryPromoEndDate,
			&i.BrandPromoID,
			&i.BrandPromoName,
			&i.BrandPromoDescription,
			&i.BrandPromoDiscountRate,
			&i.BrandPromoActive,
			&i.BrandPromoStartDate,
			&i.BrandPromoEndDate,
			&i.ProductPromoID,
			&i.ProductPromoName,
			&i.ProductPromoDescription,
			&i.ProductPromoDiscountRate,
			&i.ProductPromoActive,
			&i.ProductPromoStartDate,
			&i.ProductPromoEndDate,
			&i.NextAvailable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchProductItemsNextPage = `-- name: SearchProductItemsNextPage :many
WITH t1 AS(
SELECT 
 pi.id, pi.product_id, pi.size_id, pi.image_id, pi.color_id, pi.product_sku, pi.qty_in_stock, pi.price, pi.active, pi.created_at, pi.updated_at, p.name, p.description, p.category_id, p.brand_id, pc.category_name, pc.parent_category_id,
 pc.category_image, pb.brand_name, pb.brand_image, p.active AS parent_product_active, ps.size_value,
 pimg.product_image_1, pimg.product_image_2, pimg.product_image_3, pclr.color_value,
 cpromo.id AS category_promo_id, cpromo.name AS category_promo_name, cpromo.description AS category_promo_description,
 cpromo.discount_rate AS category_promo_discount_rate, COALESCE(cpromo.active, FALSE) AS category_promo_active,
 cpromo.start_date AS category_promo_start_date, cpromo.end_date AS category_promo_end_date,
 bpromo.id AS brand_promo_id, bpromo.name AS brand_promo_name, bpromo.description AS brand_promo_description,
 bpromo.discount_rate AS brand_promo_discount_rate, COALESCE(bpromo.active, FALSE) AS brand_promo_active,
 bpromo.start_date AS brand_promo_start_date, bpromo.end_date AS brand_promo_end_date,
 ppromo.id AS product_promo_id, ppromo.name AS product_promo_name, ppromo.description AS product_promo_description,
 ppromo.discount_rate AS product_promo_discount_rate, COALESCE(ppromo.active, FALSE) AS product_promo_active,
 ppromo.start_date AS product_promo_start_date, ppromo.end_date AS product_promo_end_date
FROM "product_item" AS pi
INNER JOIN "product" AS p ON p.id = pi.product_id
LEFT JOIN "product_size" AS ps ON ps.id = pi.size_id
LEFT JOIN "product_image" AS pimg ON pimg.id = pi.image_id
LEFT JOIN "product_color" AS pclr ON pclr.id = pi.color_id
LEFT JOIN "product_promotion" AS pp ON pp.product_id = p.id 
LEFT JOIN "promotion" AS ppromo ON ppromo.id = pp.promotion_id  
LEFT JOIN "product_category" AS pc ON pc.id = p.category_id
LEFT JOIN "category_promotion" AS cp ON cp.category_id = p.category_id 
LEFT JOIN "promotion" AS cpromo ON cpromo.id = cp.promotion_id  
LEFT JOIN "product_brand" AS pb ON pb.id = p.brand_id
LEFT JOIN "brand_promotion" AS bp ON bp.brand_id = p.brand_id 
LEFT JOIN "promotion" AS bpromo ON bpromo.id = bp.promotion_id  
WHERE 
pi.id < $2 AND
p.id < $3 AND
pi.active = TRUE AND
p.active =TRUE AND
p.search @@ 
CASE
    WHEN char_length($4) > 0 THEN to_tsquery(concat($4, ':*'))
    ELSE to_tsquery($4)
END
ORDER BY 
pi.id DESC,
p.id DESC,
ts_rank(p.search, 
CASE
    WHEN char_length($4) > 0 THEN to_tsquery(concat($4, ':*'))
    ELSE to_tsquery($4)
END
) DESC
LIMIT $1 +1
)

SELECT id, product_id, size_id, image_id, color_id, product_sku, qty_in_stock, price, active, created_at, updated_at, name, description, category_id, brand_id, category_name, parent_category_id, category_image, brand_name, brand_image, parent_product_active, size_value, product_image_1, product_image_2, product_image_3, color_value, category_promo_id, category_promo_name, category_promo_description, category_promo_discount_rate, category_promo_active, category_promo_start_date, category_promo_end_date, brand_promo_id, brand_promo_name, brand_promo_description, brand_promo_discount_rate, brand_promo_active, brand_promo_start_date, brand_promo_end_date, product_promo_id, product_promo_name, product_promo_description, product_promo_discount_rate, product_promo_active, product_promo_start_date, product_promo_end_date,COUNT(*) OVER()>10 AS next_available FROM t1 
LIMIT $1
`

type SearchProductItemsNextPageParams struct {
	Limit         int32       `json:"limit"`
	ProductItemID int64       `json:"product_item_id"`
	ProductID     int64       `json:"product_id"`
	Query         interface{} `json:"query"`
}

type SearchProductItemsNextPageRow struct {
	ID                        int64       `json:"id"`
	ProductID                 int64       `json:"product_id"`
	SizeID                    int64       `json:"size_id"`
	ImageID                   int64       `json:"image_id"`
	ColorID                   int64       `json:"color_id"`
	ProductSku                int64       `json:"product_sku"`
	QtyInStock                int32       `json:"qty_in_stock"`
	Price                     string      `json:"price"`
	Active                    bool        `json:"active"`
	CreatedAt                 time.Time   `json:"created_at"`
	UpdatedAt                 time.Time   `json:"updated_at"`
	Name                      string      `json:"name"`
	Description               string      `json:"description"`
	CategoryID                int64       `json:"category_id"`
	BrandID                   int64       `json:"brand_id"`
	CategoryName              null.String `json:"category_name"`
	ParentCategoryID          null.Int    `json:"parent_category_id"`
	CategoryImage             null.String `json:"category_image"`
	BrandName                 null.String `json:"brand_name"`
	BrandImage                null.String `json:"brand_image"`
	ParentProductActive       bool        `json:"parent_product_active"`
	SizeValue                 null.String `json:"size_value"`
	ProductImage1             null.String `json:"product_image_1"`
	ProductImage2             null.String `json:"product_image_2"`
	ProductImage3             null.String `json:"product_image_3"`
	ColorValue                null.String `json:"color_value"`
	CategoryPromoID           null.Int    `json:"category_promo_id"`
	CategoryPromoName         null.String `json:"category_promo_name"`
	CategoryPromoDescription  null.String `json:"category_promo_description"`
	CategoryPromoDiscountRate null.Int    `json:"category_promo_discount_rate"`
	CategoryPromoActive       bool        `json:"category_promo_active"`
	CategoryPromoStartDate    null.Time   `json:"category_promo_start_date"`
	CategoryPromoEndDate      null.Time   `json:"category_promo_end_date"`
	BrandPromoID              null.Int    `json:"brand_promo_id"`
	BrandPromoName            null.String `json:"brand_promo_name"`
	BrandPromoDescription     null.String `json:"brand_promo_description"`
	BrandPromoDiscountRate    null.Int    `json:"brand_promo_discount_rate"`
	BrandPromoActive          bool        `json:"brand_promo_active"`
	BrandPromoStartDate       null.Time   `json:"brand_promo_start_date"`
	BrandPromoEndDate         null.Time   `json:"brand_promo_end_date"`
	ProductPromoID            null.Int    `json:"product_promo_id"`
	ProductPromoName          null.String `json:"product_promo_name"`
	ProductPromoDescription   null.String `json:"product_promo_description"`
	ProductPromoDiscountRate  null.Int    `json:"product_promo_discount_rate"`
	ProductPromoActive        bool        `json:"product_promo_active"`
	ProductPromoStartDate     null.Time   `json:"product_promo_start_date"`
	ProductPromoEndDate       null.Time   `json:"product_promo_end_date"`
	NextAvailable             bool        `json:"next_available"`
}

func (q *Queries) SearchProductItemsNextPage(ctx context.Context, arg SearchProductItemsNextPageParams) ([]SearchProductItemsNextPageRow, error) {
	rows, err := q.db.Query(ctx, searchProductItemsNextPage,
		arg.Limit,
		arg.ProductItemID,
		arg.ProductID,
		arg.Query,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchProductItemsNextPageRow{}
	for rows.Next() {
		var i SearchProductItemsNextPageRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.SizeID,
			&i.ImageID,
			&i.ColorID,
			&i.ProductSku,
			&i.QtyInStock,
			&i.Price,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.CategoryID,
			&i.BrandID,
			&i.CategoryName,
			&i.ParentCategoryID,
			&i.CategoryImage,
			&i.BrandName,
			&i.BrandImage,
			&i.ParentProductActive,
			&i.SizeValue,
			&i.ProductImage1,
			&i.ProductImage2,
			&i.ProductImage3,
			&i.ColorValue,
			&i.CategoryPromoID,
			&i.CategoryPromoName,
			&i.CategoryPromoDescription,
			&i.CategoryPromoDiscountRate,
			&i.CategoryPromoActive,
			&i.CategoryPromoStartDate,
			&i.CategoryPromoEndDate,
			&i.BrandPromoID,
			&i.BrandPromoName,
			&i.BrandPromoDescription,
			&i.BrandPromoDiscountRate,
			&i.BrandPromoActive,
			&i.BrandPromoStartDate,
			&i.BrandPromoEndDate,
			&i.ProductPromoID,
			&i.ProductPromoName,
			&i.ProductPromoDescription,
			&i.ProductPromoDiscountRate,
			&i.ProductPromoActive,
			&i.ProductPromoStartDate,
			&i.ProductPromoEndDate,
			&i.NextAvailable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchProductItemsNextPageOld = `-- name: SearchProductItemsNextPageOld :many
SELECT pi.id, pi.product_id, pi.size_id, pi.image_id, pi.color_id, pi.product_sku, pi.qty_in_stock, pi.price, pi.active, pi.created_at, pi.updated_at, p.name, p.description, p.category_id, p.brand_id, pc.category_name, pc.parent_category_id,
 pc.category_image, pb.brand_name, pb.brand_image, p.active as parent_product_active, ps.size_value,
 pimg.product_image_1, pimg.product_image_2, pimg.product_image_3, pclr.color_value, COUNT(*) OVER() AS total_count,
 cpromo.id as category_promo_id, cpromo.name as category_promo_name, cpromo.description as category_promo_description,
 cpromo.discount_rate as category_promo_discount_rate, COALESCE(cpromo.active, false) as category_promo_active,
 cpromo.start_date as category_promo_start_date, cpromo.end_date as category_promo_end_date,
 bpromo.id as brand_promo_id, bpromo.name as brand_promo_name, bpromo.description as brand_promo_description,
 bpromo.discount_rate as brand_promo_discount_rate, COALESCE(bpromo.active, false) as brand_promo_active,
 bpromo.start_date as brand_promo_start_date, bpromo.end_date as brand_promo_end_date,
 ppromo.id as product_promo_id, ppromo.name as product_promo_name, ppromo.description as product_promo_description,
 ppromo.discount_rate as product_promo_discount_rate, COALESCE(ppromo.active, false) as product_promo_active,
 ppromo.start_date as product_promo_start_date, ppromo.end_date as product_promo_end_date
FROM "product_item" AS pi
LEFT JOIN "product" AS p ON p.id = pi.product_id AND p.active = TRUE
LEFT JOIN "product_size" AS ps ON ps.id = pi.size_id
LEFT JOIN "product_image" AS pimg ON pimg.id = pi.image_id
LEFT JOIN "product_color" AS pclr ON pclr.id = pi.color_id
LEFT JOIN "product_category" AS pc ON pc.id = p.category_id
LEFT JOIN "category_promotion" AS cp ON cp.category_id = p.category_id AND cp.active = true
LEFT JOIN "promotion" AS cpromo ON cpromo.id = cp.promotion_id AND cpromo.active =true AND cpromo.start_date <= CURRENT_DATE AND cpromo.end_date >= CURRENT_DATE
LEFT JOIN "product_brand" AS pb ON pb.id = p.brand_id
LEFT JOIN "brand_promotion" AS bp ON bp.brand_id = p.brand_id AND bp.active = true
LEFT JOIN "promotion" AS bpromo ON bpromo.id = bp.promotion_id AND bpromo.active =true AND bpromo.start_date <= CURRENT_DATE AND bpromo.end_date >= CURRENT_DATE
LEFT JOIN "product_promotion" AS pp ON pp.product_id = p.id AND pp.active = true
LEFT JOIN "promotion" AS ppromo ON ppromo.id = pp.promotion_id AND ppromo.active = true AND ppromo.start_date <= CURRENT_DATE AND ppromo.end_date >= CURRENT_DATE
WHERE pi.active = TRUE AND p.search @@  
CASE
    WHEN char_length($3) > 0 THEN to_tsquery(concat($3, ':*'))
    ELSE to_tsquery($3)
END
AND pi.id < $2
ORDER BY pi.id DESC, ts_rank(p.search, 
CASE
    WHEN char_length($3) > 0 THEN to_tsquery(concat($3, ':*'))
    ELSE to_tsquery($3)
END
) DESC
LIMIT $1
`

type SearchProductItemsNextPageOldParams struct {
	Limit int32       `json:"limit"`
	ID    int64       `json:"id"`
	Query interface{} `json:"query"`
}

type SearchProductItemsNextPageOldRow struct {
	ID                        int64       `json:"id"`
	ProductID                 int64       `json:"product_id"`
	SizeID                    int64       `json:"size_id"`
	ImageID                   int64       `json:"image_id"`
	ColorID                   int64       `json:"color_id"`
	ProductSku                int64       `json:"product_sku"`
	QtyInStock                int32       `json:"qty_in_stock"`
	Price                     string      `json:"price"`
	Active                    bool        `json:"active"`
	CreatedAt                 time.Time   `json:"created_at"`
	UpdatedAt                 time.Time   `json:"updated_at"`
	Name                      null.String `json:"name"`
	Description               null.String `json:"description"`
	CategoryID                null.Int    `json:"category_id"`
	BrandID                   null.Int    `json:"brand_id"`
	CategoryName              null.String `json:"category_name"`
	ParentCategoryID          null.Int    `json:"parent_category_id"`
	CategoryImage             null.String `json:"category_image"`
	BrandName                 null.String `json:"brand_name"`
	BrandImage                null.String `json:"brand_image"`
	ParentProductActive       null.Bool   `json:"parent_product_active"`
	SizeValue                 null.String `json:"size_value"`
	ProductImage1             null.String `json:"product_image_1"`
	ProductImage2             null.String `json:"product_image_2"`
	ProductImage3             null.String `json:"product_image_3"`
	ColorValue                null.String `json:"color_value"`
	TotalCount                int64       `json:"total_count"`
	CategoryPromoID           null.Int    `json:"category_promo_id"`
	CategoryPromoName         null.String `json:"category_promo_name"`
	CategoryPromoDescription  null.String `json:"category_promo_description"`
	CategoryPromoDiscountRate null.Int    `json:"category_promo_discount_rate"`
	CategoryPromoActive       bool        `json:"category_promo_active"`
	CategoryPromoStartDate    null.Time   `json:"category_promo_start_date"`
	CategoryPromoEndDate      null.Time   `json:"category_promo_end_date"`
	BrandPromoID              null.Int    `json:"brand_promo_id"`
	BrandPromoName            null.String `json:"brand_promo_name"`
	BrandPromoDescription     null.String `json:"brand_promo_description"`
	BrandPromoDiscountRate    null.Int    `json:"brand_promo_discount_rate"`
	BrandPromoActive          bool        `json:"brand_promo_active"`
	BrandPromoStartDate       null.Time   `json:"brand_promo_start_date"`
	BrandPromoEndDate         null.Time   `json:"brand_promo_end_date"`
	ProductPromoID            null.Int    `json:"product_promo_id"`
	ProductPromoName          null.String `json:"product_promo_name"`
	ProductPromoDescription   null.String `json:"product_promo_description"`
	ProductPromoDiscountRate  null.Int    `json:"product_promo_discount_rate"`
	ProductPromoActive        bool        `json:"product_promo_active"`
	ProductPromoStartDate     null.Time   `json:"product_promo_start_date"`
	ProductPromoEndDate       null.Time   `json:"product_promo_end_date"`
}

func (q *Queries) SearchProductItemsNextPageOld(ctx context.Context, arg SearchProductItemsNextPageOldParams) ([]SearchProductItemsNextPageOldRow, error) {
	rows, err := q.db.Query(ctx, searchProductItemsNextPageOld, arg.Limit, arg.ID, arg.Query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchProductItemsNextPageOldRow{}
	for rows.Next() {
		var i SearchProductItemsNextPageOldRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.SizeID,
			&i.ImageID,
			&i.ColorID,
			&i.ProductSku,
			&i.QtyInStock,
			&i.Price,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.CategoryID,
			&i.BrandID,
			&i.CategoryName,
			&i.ParentCategoryID,
			&i.CategoryImage,
			&i.BrandName,
			&i.BrandImage,
			&i.ParentProductActive,
			&i.SizeValue,
			&i.ProductImage1,
			&i.ProductImage2,
			&i.ProductImage3,
			&i.ColorValue,
			&i.TotalCount,
			&i.CategoryPromoID,
			&i.CategoryPromoName,
			&i.CategoryPromoDescription,
			&i.CategoryPromoDiscountRate,
			&i.CategoryPromoActive,
			&i.CategoryPromoStartDate,
			&i.CategoryPromoEndDate,
			&i.BrandPromoID,
			&i.BrandPromoName,
			&i.BrandPromoDescription,
			&i.BrandPromoDiscountRate,
			&i.BrandPromoActive,
			&i.BrandPromoStartDate,
			&i.BrandPromoEndDate,
			&i.ProductPromoID,
			&i.ProductPromoName,
			&i.ProductPromoDescription,
			&i.ProductPromoDiscountRate,
			&i.ProductPromoActive,
			&i.ProductPromoStartDate,
			&i.ProductPromoEndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchProductItemsOld = `-- name: SearchProductItemsOld :many
SELECT pi.id, pi.product_id, pi.size_id, pi.image_id, pi.color_id, pi.product_sku, pi.qty_in_stock, pi.price, pi.active, pi.created_at, pi.updated_at, p.name, p.description, p.category_id, p.brand_id, pc.category_name, pc.parent_category_id,
 pc.category_image, pb.brand_name, pb.brand_image, p.active as parent_product_active, ps.size_value,
 pimg.product_image_1, pimg.product_image_2, pimg.product_image_3, pclr.color_value, COUNT(*) OVER() AS total_count,
 cpromo.id as category_promo_id, cpromo.name as category_promo_name, cpromo.description as category_promo_description,
 cpromo.discount_rate as category_promo_discount_rate, COALESCE(cpromo.active, false) as category_promo_active,
 cpromo.start_date as category_promo_start_date, cpromo.end_date as category_promo_end_date,
 bpromo.id as brand_promo_id, bpromo.name as brand_promo_name, bpromo.description as brand_promo_description,
 bpromo.discount_rate as brand_promo_discount_rate, COALESCE(bpromo.active, false) as brand_promo_active,
 bpromo.start_date as brand_promo_start_date, bpromo.end_date as brand_promo_end_date,
 ppromo.id as product_promo_id, ppromo.name as product_promo_name, ppromo.description as product_promo_description,
 ppromo.discount_rate as product_promo_discount_rate, COALESCE(ppromo.active, false) as product_promo_active,
 ppromo.start_date as product_promo_start_date, ppromo.end_date as product_promo_end_date
FROM "product_item" AS pi
LEFT JOIN "product" AS p ON p.id = pi.product_id AND p.active = TRUE
LEFT JOIN "product_size" AS ps ON ps.id = pi.size_id
LEFT JOIN "product_image" AS pimg ON pimg.id = pi.image_id
LEFT JOIN "product_color" AS pclr ON pclr.id = pi.color_id
LEFT JOIN "product_category" AS pc ON pc.id = p.category_id
LEFT JOIN "category_promotion" AS cp ON cp.category_id = p.category_id AND cp.active = true
LEFT JOIN "promotion" AS cpromo ON cpromo.id = cp.promotion_id AND cpromo.active =true AND cpromo.start_date <= CURRENT_DATE AND cpromo.end_date >= CURRENT_DATE
LEFT JOIN "product_brand" AS pb ON pb.id = p.brand_id
LEFT JOIN "brand_promotion" AS bp ON bp.brand_id = p.brand_id AND bp.active = true
LEFT JOIN "promotion" AS bpromo ON bpromo.id = bp.promotion_id AND bpromo.active =true AND bpromo.start_date <= CURRENT_DATE AND bpromo.end_date >= CURRENT_DATE
LEFT JOIN "product_promotion" AS pp ON pp.product_id = p.id AND pp.active = true
LEFT JOIN "promotion" AS ppromo ON ppromo.id = pp.promotion_id AND ppromo.active = true AND ppromo.start_date <= CURRENT_DATE AND ppromo.end_date >= CURRENT_DATE

WHERE pi.active = TRUE AND p.search @@ 
CASE
    WHEN char_length($2) > 0 THEN to_tsquery(concat($2, ':*'))
    ELSE to_tsquery($2)
END
ORDER BY pi.id DESC, ts_rank(p.search, 
CASE
    WHEN char_length($2) > 0 THEN to_tsquery(concat($2, ':*'))
    ELSE to_tsquery($2)
END
) DESC
LIMIT $1
`

type SearchProductItemsOldParams struct {
	Limit int32       `json:"limit"`
	Query interface{} `json:"query"`
}

type SearchProductItemsOldRow struct {
	ID                        int64       `json:"id"`
	ProductID                 int64       `json:"product_id"`
	SizeID                    int64       `json:"size_id"`
	ImageID                   int64       `json:"image_id"`
	ColorID                   int64       `json:"color_id"`
	ProductSku                int64       `json:"product_sku"`
	QtyInStock                int32       `json:"qty_in_stock"`
	Price                     string      `json:"price"`
	Active                    bool        `json:"active"`
	CreatedAt                 time.Time   `json:"created_at"`
	UpdatedAt                 time.Time   `json:"updated_at"`
	Name                      null.String `json:"name"`
	Description               null.String `json:"description"`
	CategoryID                null.Int    `json:"category_id"`
	BrandID                   null.Int    `json:"brand_id"`
	CategoryName              null.String `json:"category_name"`
	ParentCategoryID          null.Int    `json:"parent_category_id"`
	CategoryImage             null.String `json:"category_image"`
	BrandName                 null.String `json:"brand_name"`
	BrandImage                null.String `json:"brand_image"`
	ParentProductActive       null.Bool   `json:"parent_product_active"`
	SizeValue                 null.String `json:"size_value"`
	ProductImage1             null.String `json:"product_image_1"`
	ProductImage2             null.String `json:"product_image_2"`
	ProductImage3             null.String `json:"product_image_3"`
	ColorValue                null.String `json:"color_value"`
	TotalCount                int64       `json:"total_count"`
	CategoryPromoID           null.Int    `json:"category_promo_id"`
	CategoryPromoName         null.String `json:"category_promo_name"`
	CategoryPromoDescription  null.String `json:"category_promo_description"`
	CategoryPromoDiscountRate null.Int    `json:"category_promo_discount_rate"`
	CategoryPromoActive       bool        `json:"category_promo_active"`
	CategoryPromoStartDate    null.Time   `json:"category_promo_start_date"`
	CategoryPromoEndDate      null.Time   `json:"category_promo_end_date"`
	BrandPromoID              null.Int    `json:"brand_promo_id"`
	BrandPromoName            null.String `json:"brand_promo_name"`
	BrandPromoDescription     null.String `json:"brand_promo_description"`
	BrandPromoDiscountRate    null.Int    `json:"brand_promo_discount_rate"`
	BrandPromoActive          bool        `json:"brand_promo_active"`
	BrandPromoStartDate       null.Time   `json:"brand_promo_start_date"`
	BrandPromoEndDate         null.Time   `json:"brand_promo_end_date"`
	ProductPromoID            null.Int    `json:"product_promo_id"`
	ProductPromoName          null.String `json:"product_promo_name"`
	ProductPromoDescription   null.String `json:"product_promo_description"`
	ProductPromoDiscountRate  null.Int    `json:"product_promo_discount_rate"`
	ProductPromoActive        bool        `json:"product_promo_active"`
	ProductPromoStartDate     null.Time   `json:"product_promo_start_date"`
	ProductPromoEndDate       null.Time   `json:"product_promo_end_date"`
}

func (q *Queries) SearchProductItemsOld(ctx context.Context, arg SearchProductItemsOldParams) ([]SearchProductItemsOldRow, error) {
	rows, err := q.db.Query(ctx, searchProductItemsOld, arg.Limit, arg.Query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchProductItemsOldRow{}
	for rows.Next() {
		var i SearchProductItemsOldRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.SizeID,
			&i.ImageID,
			&i.ColorID,
			&i.ProductSku,
			&i.QtyInStock,
			&i.Price,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.CategoryID,
			&i.BrandID,
			&i.CategoryName,
			&i.ParentCategoryID,
			&i.CategoryImage,
			&i.BrandName,
			&i.BrandImage,
			&i.ParentProductActive,
			&i.SizeValue,
			&i.ProductImage1,
			&i.ProductImage2,
			&i.ProductImage3,
			&i.ColorValue,
			&i.TotalCount,
			&i.CategoryPromoID,
			&i.CategoryPromoName,
			&i.CategoryPromoDescription,
			&i.CategoryPromoDiscountRate,
			&i.CategoryPromoActive,
			&i.CategoryPromoStartDate,
			&i.CategoryPromoEndDate,
			&i.BrandPromoID,
			&i.BrandPromoName,
			&i.BrandPromoDescription,
			&i.BrandPromoDiscountRate,
			&i.BrandPromoActive,
			&i.BrandPromoStartDate,
			&i.BrandPromoEndDate,
			&i.ProductPromoID,
			&i.ProductPromoName,
			&i.ProductPromoDescription,
			&i.ProductPromoDiscountRate,
			&i.ProductPromoActive,
			&i.ProductPromoStartDate,
			&i.ProductPromoEndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductItem = `-- name: UpdateProductItem :one
UPDATE "product_item"
SET
product_sku = COALESCE($1,product_sku),
qty_in_stock = COALESCE($2,qty_in_stock),
size_id = COALESCE($3,size_id),
image_id = COALESCE($4,image_id),
color_id = COALESCE($5,color_id),
price = COALESCE($6,price),
active = COALESCE($7,active),
updated_at = now()
WHERE id = $8
AND product_id = $9
RETURNING id, product_id, size_id, image_id, color_id, product_sku, qty_in_stock, price, active, created_at, updated_at
`

type UpdateProductItemParams struct {
	ProductSku null.Int    `json:"product_sku"`
	QtyInStock null.Int    `json:"qty_in_stock"`
	SizeID     null.Int    `json:"size_id"`
	ImageID    null.Int    `json:"image_id"`
	ColorID    null.Int    `json:"color_id"`
	Price      null.String `json:"price"`
	Active     null.Bool   `json:"active"`
	ID         int64       `json:"id"`
	ProductID  int64       `json:"product_id"`
}

func (q *Queries) UpdateProductItem(ctx context.Context, arg UpdateProductItemParams) (ProductItem, error) {
	row := q.db.QueryRow(ctx, updateProductItem,
		arg.ProductSku,
		arg.QtyInStock,
		arg.SizeID,
		arg.ImageID,
		arg.ColorID,
		arg.Price,
		arg.Active,
		arg.ID,
		arg.ProductID,
	)
	var i ProductItem
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.SizeID,
		&i.ImageID,
		&i.ColorID,
		&i.ProductSku,
		&i.QtyInStock,
		&i.Price,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
