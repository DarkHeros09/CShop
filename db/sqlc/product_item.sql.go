// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: product_item.sql

package db

import (
	"context"

	"github.com/guregu/null"
)

const createProductItem = `-- name: CreateProductItem :one
INSERT INTO "product_item" (
  product_id,
  product_sku,
  qty_in_stock,
  product_image,
  price,
  active
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, product_id, product_sku, qty_in_stock, product_image, price, active, created_at, updated_at
`

type CreateProductItemParams struct {
	ProductID    int64  `json:"product_id"`
	ProductSku   int64  `json:"product_sku"`
	QtyInStock   int32  `json:"qty_in_stock"`
	ProductImage string `json:"product_image"`
	Price        string `json:"price"`
	Active       bool   `json:"active"`
}

func (q *Queries) CreateProductItem(ctx context.Context, arg CreateProductItemParams) (ProductItem, error) {
	row := q.db.QueryRow(ctx, createProductItem,
		arg.ProductID,
		arg.ProductSku,
		arg.QtyInStock,
		arg.ProductImage,
		arg.Price,
		arg.Active,
	)
	var i ProductItem
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.ProductSku,
		&i.QtyInStock,
		&i.ProductImage,
		&i.Price,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProductItem = `-- name: DeleteProductItem :exec
DELETE FROM "product_item"
WHERE id = $1
`

func (q *Queries) DeleteProductItem(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProductItem, id)
	return err
}

const getProductItem = `-- name: GetProductItem :one
SELECT id, product_id, product_sku, qty_in_stock, product_image, price, active, created_at, updated_at FROM "product_item"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProductItem(ctx context.Context, id int64) (ProductItem, error) {
	row := q.db.QueryRow(ctx, getProductItem, id)
	var i ProductItem
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.ProductSku,
		&i.QtyInStock,
		&i.ProductImage,
		&i.Price,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductItemForUpdate = `-- name: GetProductItemForUpdate :one
SELECT id, product_id, product_sku, qty_in_stock, product_image, price, active, created_at, updated_at FROM "product_item"
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetProductItemForUpdate(ctx context.Context, id int64) (ProductItem, error) {
	row := q.db.QueryRow(ctx, getProductItemForUpdate, id)
	var i ProductItem
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.ProductSku,
		&i.QtyInStock,
		&i.ProductImage,
		&i.Price,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProductItems = `-- name: ListProductItems :many
SELECT id, product_id, product_sku, qty_in_stock, product_image, price, active, created_at, updated_at FROM "product_item"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListProductItemsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProductItems(ctx context.Context, arg ListProductItemsParams) ([]ProductItem, error) {
	rows, err := q.db.Query(ctx, listProductItems, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductItem{}
	for rows.Next() {
		var i ProductItem
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.ProductSku,
			&i.QtyInStock,
			&i.ProductImage,
			&i.Price,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductItem = `-- name: UpdateProductItem :one
UPDATE "product_item"
SET
product_sku = COALESCE($1,product_sku),
qty_in_stock = COALESCE($2,qty_in_stock),
product_image = COALESCE($3,product_image),
price = COALESCE($4,price),
active = COALESCE($5,active)
WHERE id = $6
AND product_id = $7
RETURNING id, product_id, product_sku, qty_in_stock, product_image, price, active, created_at, updated_at
`

type UpdateProductItemParams struct {
	ProductSku   null.Int    `json:"product_sku"`
	QtyInStock   null.Int    `json:"qty_in_stock"`
	ProductImage null.String `json:"product_image"`
	Price        null.String `json:"price"`
	Active       null.Bool   `json:"active"`
	ID           int64       `json:"id"`
	ProductID    int64       `json:"product_id"`
}

func (q *Queries) UpdateProductItem(ctx context.Context, arg UpdateProductItemParams) (ProductItem, error) {
	row := q.db.QueryRow(ctx, updateProductItem,
		arg.ProductSku,
		arg.QtyInStock,
		arg.ProductImage,
		arg.Price,
		arg.Active,
		arg.ID,
		arg.ProductID,
	)
	var i ProductItem
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.ProductSku,
		&i.QtyInStock,
		&i.ProductImage,
		&i.Price,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
