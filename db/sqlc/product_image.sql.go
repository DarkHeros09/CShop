// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: product_image.sql

package db

import (
	"context"

	"github.com/guregu/null"
)

const createProductImage = `-- name: CreateProductImage :one
INSERT INTO "product_image" (
  product_image_1,
  product_image_2,
  product_image_3
) VALUES (
  $1, $2, $3
)
RETURNING id, product_image_1, product_image_2, product_image_3
`

type CreateProductImageParams struct {
	ProductImage1 string `json:"product_image_1"`
	ProductImage2 string `json:"product_image_2"`
	ProductImage3 string `json:"product_image_3"`
}

func (q *Queries) CreateProductImage(ctx context.Context, arg CreateProductImageParams) (ProductImage, error) {
	row := q.db.QueryRow(ctx, createProductImage, arg.ProductImage1, arg.ProductImage2, arg.ProductImage3)
	var i ProductImage
	err := row.Scan(
		&i.ID,
		&i.ProductImage1,
		&i.ProductImage2,
		&i.ProductImage3,
	)
	return i, err
}

const deleteProductImage = `-- name: DeleteProductImage :exec
DELETE FROM "product_image"
WHERE id = $1
`

func (q *Queries) DeleteProductImage(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProductImage, id)
	return err
}

const getProductImage = `-- name: GetProductImage :one
SELECT id, product_image_1, product_image_2, product_image_3 FROM "product_image"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProductImage(ctx context.Context, id int64) (ProductImage, error) {
	row := q.db.QueryRow(ctx, getProductImage, id)
	var i ProductImage
	err := row.Scan(
		&i.ID,
		&i.ProductImage1,
		&i.ProductImage2,
		&i.ProductImage3,
	)
	return i, err
}

const updateProductImage = `-- name: UpdateProductImage :one
UPDATE "product_image"
SET 
product_image_1 = COALESCE($1,product_image_1),
product_image_2 = COALESCE($2,product_image_2),
product_image_3 = COALESCE($3,product_image_3)
WHERE id = $4
RETURNING id, product_image_1, product_image_2, product_image_3
`

type UpdateProductImageParams struct {
	ProductImage1 null.String `json:"product_image_1"`
	ProductImage2 null.String `json:"product_image_2"`
	ProductImage3 null.String `json:"product_image_3"`
	ID            int64       `json:"id"`
}

func (q *Queries) UpdateProductImage(ctx context.Context, arg UpdateProductImageParams) (ProductImage, error) {
	row := q.db.QueryRow(ctx, updateProductImage,
		arg.ProductImage1,
		arg.ProductImage2,
		arg.ProductImage3,
		arg.ID,
	)
	var i ProductImage
	err := row.Scan(
		&i.ID,
		&i.ProductImage1,
		&i.ProductImage2,
		&i.ProductImage3,
	)
	return i, err
}
