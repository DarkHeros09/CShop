// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: category_promotion.sql

package db

import (
	"context"
	"database/sql"
)

const createCategoryPromotion = `-- name: CreateCategoryPromotion :one
INSERT INTO "category_promotion" (
  category_id,
  promotion_id,
  active
) VALUES (
  $1, $2, $3
)
RETURNING category_id, promotion_id, active
`

type CreateCategoryPromotionParams struct {
	CategoryID  int64 `json:"category_id"`
	PromotionID int64 `json:"promotion_id"`
	Active      bool  `json:"active"`
}

func (q *Queries) CreateCategoryPromotion(ctx context.Context, arg CreateCategoryPromotionParams) (CategoryPromotion, error) {
	row := q.db.QueryRowContext(ctx, createCategoryPromotion, arg.CategoryID, arg.PromotionID, arg.Active)
	var i CategoryPromotion
	err := row.Scan(&i.CategoryID, &i.PromotionID, &i.Active)
	return i, err
}

const deleteCategoryPromotion = `-- name: DeleteCategoryPromotion :exec
DELETE FROM "category_promotion"
WHERE category_id = $1
`

func (q *Queries) DeleteCategoryPromotion(ctx context.Context, categoryID int64) error {
	_, err := q.db.ExecContext(ctx, deleteCategoryPromotion, categoryID)
	return err
}

const getCategoryPromotion = `-- name: GetCategoryPromotion :one
SELECT category_id, promotion_id, active FROM "category_promotion"
WHERE category_id = $1 LIMIT 1
`

func (q *Queries) GetCategoryPromotion(ctx context.Context, categoryID int64) (CategoryPromotion, error) {
	row := q.db.QueryRowContext(ctx, getCategoryPromotion, categoryID)
	var i CategoryPromotion
	err := row.Scan(&i.CategoryID, &i.PromotionID, &i.Active)
	return i, err
}

const listCategoryPromotions = `-- name: ListCategoryPromotions :many
SELECT category_id, promotion_id, active FROM "category_promotion"
ORDER BY category_id
LIMIT $1
OFFSET $2
`

type ListCategoryPromotionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCategoryPromotions(ctx context.Context, arg ListCategoryPromotionsParams) ([]CategoryPromotion, error) {
	rows, err := q.db.QueryContext(ctx, listCategoryPromotions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CategoryPromotion{}
	for rows.Next() {
		var i CategoryPromotion
		if err := rows.Scan(&i.CategoryID, &i.PromotionID, &i.Active); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategoryPromotion = `-- name: UpdateCategoryPromotion :one
UPDATE "category_promotion"
SET
promotion_id = COALESCE($1,promotion_id),
active = COALESCE($2,active)
WHERE category_id = $3
RETURNING category_id, promotion_id, active
`

type UpdateCategoryPromotionParams struct {
	PromotionID sql.NullInt64 `json:"promotion_id"`
	Active      sql.NullBool  `json:"active"`
	CategoryID  int64         `json:"category_id"`
}

func (q *Queries) UpdateCategoryPromotion(ctx context.Context, arg UpdateCategoryPromotionParams) (CategoryPromotion, error) {
	row := q.db.QueryRowContext(ctx, updateCategoryPromotion, arg.PromotionID, arg.Active, arg.CategoryID)
	var i CategoryPromotion
	err := row.Scan(&i.CategoryID, &i.PromotionID, &i.Active)
	return i, err
}
