// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: category_promotion.sql

package db

import (
	"context"
	"time"

	null "github.com/guregu/null/v5"
)

const adminCreateCategoryPromotion = `-- name: AdminCreateCategoryPromotion :one
With t1 AS (
SELECT 1 AS is_admin
    FROM "admin"
    WHERE "admin".id = $5
    AND active = TRUE
    )
INSERT INTO "category_promotion" (
  category_id,
  promotion_id,
  category_promotion_image,
  active
)
SELECT $1, $2, $3, $4 FROM t1
WHERE is_admin=1
ON CONFLICT(category_id) DO UPDATE SET 
promotion_id = EXCLUDED.promotion_id,
category_promotion_image = EXCLUDED.category_promotion_image,
active = EXCLUDED.active
RETURNING category_id, promotion_id, category_promotion_image, active
`

type AdminCreateCategoryPromotionParams struct {
	CategoryID             int64       `json:"category_id"`
	PromotionID            int64       `json:"promotion_id"`
	CategoryPromotionImage null.String `json:"category_promotion_image"`
	Active                 bool        `json:"active"`
	AdminID                int64       `json:"admin_id"`
}

func (q *Queries) AdminCreateCategoryPromotion(ctx context.Context, arg AdminCreateCategoryPromotionParams) (CategoryPromotion, error) {
	row := q.db.QueryRow(ctx, adminCreateCategoryPromotion,
		arg.CategoryID,
		arg.PromotionID,
		arg.CategoryPromotionImage,
		arg.Active,
		arg.AdminID,
	)
	var i CategoryPromotion
	err := row.Scan(
		&i.CategoryID,
		&i.PromotionID,
		&i.CategoryPromotionImage,
		&i.Active,
	)
	return i, err
}

const adminListCategoryPromotions = `-- name: AdminListCategoryPromotions :many
With t1 AS (
SELECT 1 AS is_admin
    FROM "admin"
    WHERE "admin".id = $1
    AND active = TRUE
    )
SELECT 
cp.category_id, pc.category_name, 
cp.promotion_id, promo.name AS promotion_name,
cp.category_promotion_image, cp.active FROM "category_promotion" AS cp
LEFT JOIN "product_category" AS pc ON pc.id = cp.category_id
LEFT JOIN "promotion" AS promo ON promo.id = cp.promotion_id
WHERE (SELECT is_admin FROM t1) = 1
ORDER BY category_id
`

type AdminListCategoryPromotionsRow struct {
	CategoryID             int64       `json:"category_id"`
	CategoryName           null.String `json:"category_name"`
	PromotionID            int64       `json:"promotion_id"`
	PromotionName          null.String `json:"promotion_name"`
	CategoryPromotionImage null.String `json:"category_promotion_image"`
	Active                 bool        `json:"active"`
}

func (q *Queries) AdminListCategoryPromotions(ctx context.Context, adminID int64) ([]AdminListCategoryPromotionsRow, error) {
	rows, err := q.db.Query(ctx, adminListCategoryPromotions, adminID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AdminListCategoryPromotionsRow{}
	for rows.Next() {
		var i AdminListCategoryPromotionsRow
		if err := rows.Scan(
			&i.CategoryID,
			&i.CategoryName,
			&i.PromotionID,
			&i.PromotionName,
			&i.CategoryPromotionImage,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const adminUpdateCategoryPromotion = `-- name: AdminUpdateCategoryPromotion :one
With t1 AS (
SELECT 1 AS is_admin
    FROM "admin"
    WHERE "admin".id = $5
    AND active = TRUE
    )
UPDATE "category_promotion"
SET
category_promotion_image = COALESCE($1,category_promotion_image),
active = COALESCE($2,active)
WHERE category_id = $3
AND promotion_id = $4
AND (SELECT is_admin FROM t1) = 1
RETURNING category_id, promotion_id, category_promotion_image, active
`

type AdminUpdateCategoryPromotionParams struct {
	CategoryPromotionImage null.String `json:"category_promotion_image"`
	Active                 null.Bool   `json:"active"`
	CategoryID             int64       `json:"category_id"`
	PromotionID            int64       `json:"promotion_id"`
	AdminID                int64       `json:"admin_id"`
}

func (q *Queries) AdminUpdateCategoryPromotion(ctx context.Context, arg AdminUpdateCategoryPromotionParams) (CategoryPromotion, error) {
	row := q.db.QueryRow(ctx, adminUpdateCategoryPromotion,
		arg.CategoryPromotionImage,
		arg.Active,
		arg.CategoryID,
		arg.PromotionID,
		arg.AdminID,
	)
	var i CategoryPromotion
	err := row.Scan(
		&i.CategoryID,
		&i.PromotionID,
		&i.CategoryPromotionImage,
		&i.Active,
	)
	return i, err
}

const createCategoryPromotion = `-- name: CreateCategoryPromotion :one
INSERT INTO "category_promotion" (
  category_id,
  promotion_id,
  category_promotion_image,
  active
) VALUES (
  $1, $2, $3, $4
) ON CONFLICT(category_id) DO UPDATE SET 
promotion_id = EXCLUDED.promotion_id,
category_promotion_image = EXCLUDED.category_promotion_image,
active = EXCLUDED.active
RETURNING category_id, promotion_id, category_promotion_image, active
`

type CreateCategoryPromotionParams struct {
	CategoryID             int64       `json:"category_id"`
	PromotionID            int64       `json:"promotion_id"`
	CategoryPromotionImage null.String `json:"category_promotion_image"`
	Active                 bool        `json:"active"`
}

func (q *Queries) CreateCategoryPromotion(ctx context.Context, arg CreateCategoryPromotionParams) (CategoryPromotion, error) {
	row := q.db.QueryRow(ctx, createCategoryPromotion,
		arg.CategoryID,
		arg.PromotionID,
		arg.CategoryPromotionImage,
		arg.Active,
	)
	var i CategoryPromotion
	err := row.Scan(
		&i.CategoryID,
		&i.PromotionID,
		&i.CategoryPromotionImage,
		&i.Active,
	)
	return i, err
}

const deleteCategoryPromotion = `-- name: DeleteCategoryPromotion :exec
DELETE FROM "category_promotion"
WHERE category_id = $1
AND promotion_id = $2
RETURNING category_id, promotion_id, category_promotion_image, active
`

type DeleteCategoryPromotionParams struct {
	CategoryID  int64 `json:"category_id"`
	PromotionID int64 `json:"promotion_id"`
}

func (q *Queries) DeleteCategoryPromotion(ctx context.Context, arg DeleteCategoryPromotionParams) error {
	_, err := q.db.Exec(ctx, deleteCategoryPromotion, arg.CategoryID, arg.PromotionID)
	return err
}

const getCategoryPromotion = `-- name: GetCategoryPromotion :one
SELECT category_id, promotion_id, category_promotion_image, active FROM "category_promotion"
WHERE category_id = $1
AND promotion_id = $2 
LIMIT 1
`

type GetCategoryPromotionParams struct {
	CategoryID  int64 `json:"category_id"`
	PromotionID int64 `json:"promotion_id"`
}

func (q *Queries) GetCategoryPromotion(ctx context.Context, arg GetCategoryPromotionParams) (CategoryPromotion, error) {
	row := q.db.QueryRow(ctx, getCategoryPromotion, arg.CategoryID, arg.PromotionID)
	var i CategoryPromotion
	err := row.Scan(
		&i.CategoryID,
		&i.PromotionID,
		&i.CategoryPromotionImage,
		&i.Active,
	)
	return i, err
}

const listCategoryPromotions = `-- name: ListCategoryPromotions :many
SELECT category_id, promotion_id, category_promotion_image, active FROM "category_promotion"
ORDER BY category_id
LIMIT $1
OFFSET $2
`

type ListCategoryPromotionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCategoryPromotions(ctx context.Context, arg ListCategoryPromotionsParams) ([]CategoryPromotion, error) {
	rows, err := q.db.Query(ctx, listCategoryPromotions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CategoryPromotion{}
	for rows.Next() {
		var i CategoryPromotion
		if err := rows.Scan(
			&i.CategoryID,
			&i.PromotionID,
			&i.CategoryPromotionImage,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCategoryPromotionsWithImages = `-- name: ListCategoryPromotionsWithImages :many
SELECT category_id, promotion_id, category_promotion_image, cp.active, pc.id, parent_category_id, category_name, category_image, promo.id, name, description, discount_rate, promo.active, start_date, end_date FROM "category_promotion" AS cp
LEFT JOIN "product_category" AS pc ON pc.id = cp.category_id
JOIN "promotion" AS promo ON promo.id = cp.promotion_id AND promo.active = true AND promo.start_date <= CURRENT_DATE AND promo.end_date >= CURRENT_DATE
WHERE cp.category_promotion_image IS NOT NULL AND cp.active = true
`

type ListCategoryPromotionsWithImagesRow struct {
	CategoryID             int64       `json:"category_id"`
	PromotionID            int64       `json:"promotion_id"`
	CategoryPromotionImage null.String `json:"category_promotion_image"`
	Active                 bool        `json:"active"`
	ID                     null.Int    `json:"id"`
	ParentCategoryID       null.Int    `json:"parent_category_id"`
	CategoryName           null.String `json:"category_name"`
	CategoryImage          null.String `json:"category_image"`
	ID_2                   int64       `json:"id_2"`
	Name                   string      `json:"name"`
	Description            string      `json:"description"`
	DiscountRate           int64       `json:"discount_rate"`
	Active_2               bool        `json:"active_2"`
	StartDate              time.Time   `json:"start_date"`
	EndDate                time.Time   `json:"end_date"`
}

func (q *Queries) ListCategoryPromotionsWithImages(ctx context.Context) ([]ListCategoryPromotionsWithImagesRow, error) {
	rows, err := q.db.Query(ctx, listCategoryPromotionsWithImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListCategoryPromotionsWithImagesRow{}
	for rows.Next() {
		var i ListCategoryPromotionsWithImagesRow
		if err := rows.Scan(
			&i.CategoryID,
			&i.PromotionID,
			&i.CategoryPromotionImage,
			&i.Active,
			&i.ID,
			&i.ParentCategoryID,
			&i.CategoryName,
			&i.CategoryImage,
			&i.ID_2,
			&i.Name,
			&i.Description,
			&i.DiscountRate,
			&i.Active_2,
			&i.StartDate,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategoryPromotion = `-- name: UpdateCategoryPromotion :one
UPDATE "category_promotion"
SET
category_promotion_image = COALESCE($1,category_promotion_image),
active = COALESCE($2,active)
WHERE category_id = $3
AND promotion_id = $4
RETURNING category_id, promotion_id, category_promotion_image, active
`

type UpdateCategoryPromotionParams struct {
	CategoryPromotionImage null.String `json:"category_promotion_image"`
	Active                 null.Bool   `json:"active"`
	CategoryID             int64       `json:"category_id"`
	PromotionID            int64       `json:"promotion_id"`
}

func (q *Queries) UpdateCategoryPromotion(ctx context.Context, arg UpdateCategoryPromotionParams) (CategoryPromotion, error) {
	row := q.db.QueryRow(ctx, updateCategoryPromotion,
		arg.CategoryPromotionImage,
		arg.Active,
		arg.CategoryID,
		arg.PromotionID,
	)
	var i CategoryPromotion
	err := row.Scan(
		&i.CategoryID,
		&i.PromotionID,
		&i.CategoryPromotionImage,
		&i.Active,
	)
	return i, err
}
