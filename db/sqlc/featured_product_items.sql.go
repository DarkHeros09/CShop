// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: featured_product_items.sql

package db

import (
	"context"
	"time"

	null "github.com/guregu/null/v5"
)

const adminCreateFeaturedProductItem = `-- name: AdminCreateFeaturedProductItem :one
With t1 AS (
SELECT 1 AS is_admin
    FROM "admin"
    WHERE "admin".id = $6
    AND active = TRUE
    )
INSERT INTO "featured_product_item" (
  product_item_id,
  active,
  start_date,
  end_date,
  priority
)
SELECT $1, $2, $3, $4, $5 FROM t1
WHERE is_admin=1
RETURNING id, product_item_id, active, start_date, end_date, priority
`

type AdminCreateFeaturedProductItemParams struct {
	ProductItemID int64     `json:"product_item_id"`
	Active        bool      `json:"active"`
	StartDate     time.Time `json:"start_date"`
	EndDate       time.Time `json:"end_date"`
	Priority      null.Int  `json:"priority"`
	AdminID       int64     `json:"admin_id"`
}

func (q *Queries) AdminCreateFeaturedProductItem(ctx context.Context, arg AdminCreateFeaturedProductItemParams) (FeaturedProductItem, error) {
	row := q.db.QueryRow(ctx, adminCreateFeaturedProductItem,
		arg.ProductItemID,
		arg.Active,
		arg.StartDate,
		arg.EndDate,
		arg.Priority,
		arg.AdminID,
	)
	var i FeaturedProductItem
	err := row.Scan(
		&i.ID,
		&i.ProductItemID,
		&i.Active,
		&i.StartDate,
		&i.EndDate,
		&i.Priority,
	)
	return i, err
}

const adminListFeaturedProductItems = `-- name: AdminListFeaturedProductItems :many
With t1 AS (
SELECT 1 AS is_admin
    FROM "admin"
    WHERE "admin".id = $1
    AND active = TRUE
    )
SELECT 
fp.id, fp.product_item_id, fp.active, fp.start_date, fp.end_date, fp.priority, pi.id, pi.product_id, pi.image_id, pi.color_id, pi.product_sku, pi.price, pi.active, pi.created_at, pi.updated_at, p.name AS product_name, 
p.description FROM "featured_product_item" AS fp
LEFT JOIN "product_item" AS pi ON pi.id = fp.product_item_id
LEFT JOIN "product" AS p ON p.id = pi.product_id
WHERE (SELECT is_admin FROM t1) = 1
ORDER BY product_item_id
`

type AdminListFeaturedProductItemsRow struct {
	ID            int64       `json:"id"`
	ProductItemID int64       `json:"product_item_id"`
	Active        bool        `json:"active"`
	StartDate     time.Time   `json:"start_date"`
	EndDate       time.Time   `json:"end_date"`
	Priority      null.Int    `json:"priority"`
	ID_2          null.Int    `json:"id_2"`
	ProductID     null.Int    `json:"product_id"`
	ImageID       null.Int    `json:"image_id"`
	ColorID       null.Int    `json:"color_id"`
	ProductSku    null.Int    `json:"product_sku"`
	Price         null.String `json:"price"`
	Active_2      null.Bool   `json:"active_2"`
	CreatedAt     null.Time   `json:"created_at"`
	UpdatedAt     null.Time   `json:"updated_at"`
	ProductName   null.String `json:"product_name"`
	Description   null.String `json:"description"`
}

func (q *Queries) AdminListFeaturedProductItems(ctx context.Context, adminID int64) ([]AdminListFeaturedProductItemsRow, error) {
	rows, err := q.db.Query(ctx, adminListFeaturedProductItems, adminID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AdminListFeaturedProductItemsRow{}
	for rows.Next() {
		var i AdminListFeaturedProductItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductItemID,
			&i.Active,
			&i.StartDate,
			&i.EndDate,
			&i.Priority,
			&i.ID_2,
			&i.ProductID,
			&i.ImageID,
			&i.ColorID,
			&i.ProductSku,
			&i.Price,
			&i.Active_2,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProductName,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const adminUpdateFeaturedProductItem = `-- name: AdminUpdateFeaturedProductItem :one
With t1 AS (
SELECT 1 AS is_admin
    FROM "admin"
    WHERE "admin".id = $6
    AND active = TRUE
    )
UPDATE "featured_product_item"
SET
active = COALESCE($1,active),
start_date = COALESCE($2,start_date),
end_date = COALESCE($3,end_date),
priority = COALESCE($4,priority)
WHERE product_item_id = $5
AND (SELECT is_admin FROM t1) = 1
RETURNING id, product_item_id, active, start_date, end_date, priority
`

type AdminUpdateFeaturedProductItemParams struct {
	Active        null.Bool `json:"active"`
	StartDate     null.Time `json:"start_date"`
	EndDate       null.Time `json:"end_date"`
	Priority      null.Int  `json:"priority"`
	ProductItemID int64     `json:"product_item_id"`
	AdminID       int64     `json:"admin_id"`
}

func (q *Queries) AdminUpdateFeaturedProductItem(ctx context.Context, arg AdminUpdateFeaturedProductItemParams) (FeaturedProductItem, error) {
	row := q.db.QueryRow(ctx, adminUpdateFeaturedProductItem,
		arg.Active,
		arg.StartDate,
		arg.EndDate,
		arg.Priority,
		arg.ProductItemID,
		arg.AdminID,
	)
	var i FeaturedProductItem
	err := row.Scan(
		&i.ID,
		&i.ProductItemID,
		&i.Active,
		&i.StartDate,
		&i.EndDate,
		&i.Priority,
	)
	return i, err
}

const deleteFeaturedProductItem = `-- name: DeleteFeaturedProductItem :exec
With t1 AS (
SELECT 1 AS is_admin
    FROM "admin"
    WHERE "admin".id = $2
    AND active = TRUE
    )
DELETE FROM "featured_product_item"
WHERE product_item_id = $1
AND (SELECT is_admin FROM t1) = 1
RETURNING id, product_item_id, active, start_date, end_date, priority
`

type DeleteFeaturedProductItemParams struct {
	ProductItemID int64 `json:"product_item_id"`
	AdminID       int64 `json:"admin_id"`
}

func (q *Queries) DeleteFeaturedProductItem(ctx context.Context, arg DeleteFeaturedProductItemParams) error {
	_, err := q.db.Exec(ctx, deleteFeaturedProductItem, arg.ProductItemID, arg.AdminID)
	return err
}

const getFeaturedProductItem = `-- name: GetFeaturedProductItem :one
SELECT id, product_item_id, active, start_date, end_date, priority FROM "featured_product_item"
WHERE product_item_id = $1
LIMIT 1
`

func (q *Queries) GetFeaturedProductItem(ctx context.Context, productItemID int64) (FeaturedProductItem, error) {
	row := q.db.QueryRow(ctx, getFeaturedProductItem, productItemID)
	var i FeaturedProductItem
	err := row.Scan(
		&i.ID,
		&i.ProductItemID,
		&i.Active,
		&i.StartDate,
		&i.EndDate,
		&i.Priority,
	)
	return i, err
}

const listFeaturedProductItems = `-- name: ListFeaturedProductItems :many
SELECT id, product_item_id, active, start_date, end_date, priority FROM "featured_product_item"
ORDER BY product_item_id
LIMIT $1
OFFSET $2
`

type ListFeaturedProductItemsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListFeaturedProductItems(ctx context.Context, arg ListFeaturedProductItemsParams) ([]FeaturedProductItem, error) {
	rows, err := q.db.Query(ctx, listFeaturedProductItems, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FeaturedProductItem{}
	for rows.Next() {
		var i FeaturedProductItem
		if err := rows.Scan(
			&i.ID,
			&i.ProductItemID,
			&i.Active,
			&i.StartDate,
			&i.EndDate,
			&i.Priority,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
