// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: batch.go

package db

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v4"
)

const createShoppingCartItem = `-- name: CreateShoppingCartItem :batchmany
INSERT INTO "shopping_cart_item" (
  shopping_cart_id,
  product_item_id,
  qty
) VALUES (
  $1, $2, $3
) ON CONFLICT (product_item_id)
DO UPDATE SET
qty = EXCLUDED.qty,
shopping_cart_id = EXCLUDED.shopping_cart_id,
updated_at = now()
RETURNING id, shopping_cart_id, product_item_id, qty, created_at, updated_at
`

type CreateShoppingCartItemBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateShoppingCartItemParams struct {
	ShoppingCartID int64 `json:"shopping_cart_id"`
	ProductItemID  int64 `json:"product_item_id"`
	Qty            int32 `json:"qty"`
}

func (q *Queries) CreateShoppingCartItem(ctx context.Context, arg []CreateShoppingCartItemParams) *CreateShoppingCartItemBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ShoppingCartID,
			a.ProductItemID,
			a.Qty,
		}
		batch.Queue(createShoppingCartItem, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateShoppingCartItemBatchResults{br, len(arg), false}
}

func (b *CreateShoppingCartItemBatchResults) Query(f func(int, []ShoppingCartItem, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		items := []ShoppingCartItem{}
		if b.closed {
			if f != nil {
				f(t, items, errors.New("batch already closed"))
			}
			continue
		}
		err := func() error {
			rows, err := b.br.Query()
			defer rows.Close()
			if err != nil {
				return err
			}
			for rows.Next() {
				var i ShoppingCartItem
				if err := rows.Scan(
					&i.ID,
					&i.ShoppingCartID,
					&i.ProductItemID,
					&i.Qty,
					&i.CreatedAt,
					&i.UpdatedAt,
				); err != nil {
					return err
				}
				items = append(items, i)
			}
			return rows.Err()
		}()
		if f != nil {
			f(t, items, err)
		}
	}
}

func (b *CreateShoppingCartItemBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
